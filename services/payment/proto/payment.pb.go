// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: proto/payment/payment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_payment_payment_proto protoreflect.FileDescriptor

var file_proto_payment_payment_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xd3, 0x03, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x12, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x10, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x17, 0x4f, 0x6d, 0x79, 0x5c,
	0x43, 0x72, 0x69, 0x75, 0x73, 0x5c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_payment_payment_proto_goTypes = []interface{}{
	(*WechatUnifiedOrderRequest)(nil),  // 0: payment.WechatUnifiedOrderRequest
	(*WechatOrderQueryRequest)(nil),    // 1: payment.WechatOrderQueryRequest
	(*WechatCloseOrderRequest)(nil),    // 2: payment.WechatCloseOrderRequest
	(*WechatRefundRequest)(nil),        // 3: payment.WechatRefundRequest
	(*WechatRefundQueryRequest)(nil),   // 4: payment.WechatRefundQueryRequest
	(*WechatUnifiedOrderResponse)(nil), // 5: payment.WechatUnifiedOrderResponse
	(*WechatOrderQueryResponse)(nil),   // 6: payment.WechatOrderQueryResponse
	(*WechatCloseOrderResponse)(nil),   // 7: payment.WechatCloseOrderResponse
	(*WechatRefundResponse)(nil),       // 8: payment.WechatRefundResponse
	(*WechatRefundQueryResponse)(nil),  // 9: payment.WechatRefundQueryResponse
}
var file_proto_payment_payment_proto_depIdxs = []int32{
	0, // 0: payment.PaymentServer.WechatUnifiedOrder:input_type -> payment.WechatUnifiedOrderRequest
	1, // 1: payment.PaymentServer.WechatOrderQuery:input_type -> payment.WechatOrderQueryRequest
	2, // 2: payment.PaymentServer.WechatCloseOrder:input_type -> payment.WechatCloseOrderRequest
	3, // 3: payment.PaymentServer.WechatRefund:input_type -> payment.WechatRefundRequest
	4, // 4: payment.PaymentServer.WechatRefundQuery:input_type -> payment.WechatRefundQueryRequest
	5, // 5: payment.PaymentServer.WechatUnifiedOrder:output_type -> payment.WechatUnifiedOrderResponse
	6, // 6: payment.PaymentServer.WechatOrderQuery:output_type -> payment.WechatOrderQueryResponse
	7, // 7: payment.PaymentServer.WechatCloseOrder:output_type -> payment.WechatCloseOrderResponse
	8, // 8: payment.PaymentServer.WechatRefund:output_type -> payment.WechatRefundResponse
	9, // 9: payment.PaymentServer.WechatRefundQuery:output_type -> payment.WechatRefundQueryResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_payment_payment_proto_init() }
func file_proto_payment_payment_proto_init() {
	if File_proto_payment_payment_proto != nil {
		return
	}
	file_proto_payment_wechat_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_payment_payment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_payment_payment_proto_goTypes,
		DependencyIndexes: file_proto_payment_payment_proto_depIdxs,
	}.Build()
	File_proto_payment_payment_proto = out.File
	file_proto_payment_payment_proto_rawDesc = nil
	file_proto_payment_payment_proto_goTypes = nil
	file_proto_payment_payment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PaymentServerClient is the client API for PaymentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServerClient interface {
	// WechatUnifiedOrder 统一下单
	WechatUnifiedOrder(ctx context.Context, in *WechatUnifiedOrderRequest, opts ...grpc.CallOption) (*WechatUnifiedOrderResponse, error)
	// WechatOrderQuery 查询订单
	WechatOrderQuery(ctx context.Context, in *WechatOrderQueryRequest, opts ...grpc.CallOption) (*WechatOrderQueryResponse, error)
	// WechatCloseOrder 关闭订单
	WechatCloseOrder(ctx context.Context, in *WechatCloseOrderRequest, opts ...grpc.CallOption) (*WechatCloseOrderResponse, error)
	// WechatRefund 退款
	WechatRefund(ctx context.Context, in *WechatRefundRequest, opts ...grpc.CallOption) (*WechatRefundResponse, error)
	// WechatRefundQuery 查询退款
	WechatRefundQuery(ctx context.Context, in *WechatRefundQueryRequest, opts ...grpc.CallOption) (*WechatRefundQueryResponse, error)
}

type paymentServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServerClient(cc grpc.ClientConnInterface) PaymentServerClient {
	return &paymentServerClient{cc}
}

func (c *paymentServerClient) WechatUnifiedOrder(ctx context.Context, in *WechatUnifiedOrderRequest, opts ...grpc.CallOption) (*WechatUnifiedOrderResponse, error) {
	out := new(WechatUnifiedOrderResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentServer/WechatUnifiedOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServerClient) WechatOrderQuery(ctx context.Context, in *WechatOrderQueryRequest, opts ...grpc.CallOption) (*WechatOrderQueryResponse, error) {
	out := new(WechatOrderQueryResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentServer/WechatOrderQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServerClient) WechatCloseOrder(ctx context.Context, in *WechatCloseOrderRequest, opts ...grpc.CallOption) (*WechatCloseOrderResponse, error) {
	out := new(WechatCloseOrderResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentServer/WechatCloseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServerClient) WechatRefund(ctx context.Context, in *WechatRefundRequest, opts ...grpc.CallOption) (*WechatRefundResponse, error) {
	out := new(WechatRefundResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentServer/WechatRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServerClient) WechatRefundQuery(ctx context.Context, in *WechatRefundQueryRequest, opts ...grpc.CallOption) (*WechatRefundQueryResponse, error) {
	out := new(WechatRefundQueryResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentServer/WechatRefundQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServerServer is the server API for PaymentServer service.
type PaymentServerServer interface {
	// WechatUnifiedOrder 统一下单
	WechatUnifiedOrder(context.Context, *WechatUnifiedOrderRequest) (*WechatUnifiedOrderResponse, error)
	// WechatOrderQuery 查询订单
	WechatOrderQuery(context.Context, *WechatOrderQueryRequest) (*WechatOrderQueryResponse, error)
	// WechatCloseOrder 关闭订单
	WechatCloseOrder(context.Context, *WechatCloseOrderRequest) (*WechatCloseOrderResponse, error)
	// WechatRefund 退款
	WechatRefund(context.Context, *WechatRefundRequest) (*WechatRefundResponse, error)
	// WechatRefundQuery 查询退款
	WechatRefundQuery(context.Context, *WechatRefundQueryRequest) (*WechatRefundQueryResponse, error)
}

// UnimplementedPaymentServerServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServerServer struct {
}

func (*UnimplementedPaymentServerServer) WechatUnifiedOrder(context.Context, *WechatUnifiedOrderRequest) (*WechatUnifiedOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatUnifiedOrder not implemented")
}
func (*UnimplementedPaymentServerServer) WechatOrderQuery(context.Context, *WechatOrderQueryRequest) (*WechatOrderQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatOrderQuery not implemented")
}
func (*UnimplementedPaymentServerServer) WechatCloseOrder(context.Context, *WechatCloseOrderRequest) (*WechatCloseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatCloseOrder not implemented")
}
func (*UnimplementedPaymentServerServer) WechatRefund(context.Context, *WechatRefundRequest) (*WechatRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatRefund not implemented")
}
func (*UnimplementedPaymentServerServer) WechatRefundQuery(context.Context, *WechatRefundQueryRequest) (*WechatRefundQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatRefundQuery not implemented")
}

func RegisterPaymentServerServer(s *grpc.Server, srv PaymentServerServer) {
	s.RegisterService(&_PaymentServer_serviceDesc, srv)
}

func _PaymentServer_WechatUnifiedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatUnifiedOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServerServer).WechatUnifiedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentServer/WechatUnifiedOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServerServer).WechatUnifiedOrder(ctx, req.(*WechatUnifiedOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentServer_WechatOrderQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatOrderQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServerServer).WechatOrderQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentServer/WechatOrderQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServerServer).WechatOrderQuery(ctx, req.(*WechatOrderQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentServer_WechatCloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatCloseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServerServer).WechatCloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentServer/WechatCloseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServerServer).WechatCloseOrder(ctx, req.(*WechatCloseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentServer_WechatRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServerServer).WechatRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentServer/WechatRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServerServer).WechatRefund(ctx, req.(*WechatRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentServer_WechatRefundQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatRefundQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServerServer).WechatRefundQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentServer/WechatRefundQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServerServer).WechatRefundQuery(ctx, req.(*WechatRefundQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentServer",
	HandlerType: (*PaymentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WechatUnifiedOrder",
			Handler:    _PaymentServer_WechatUnifiedOrder_Handler,
		},
		{
			MethodName: "WechatOrderQuery",
			Handler:    _PaymentServer_WechatOrderQuery_Handler,
		},
		{
			MethodName: "WechatCloseOrder",
			Handler:    _PaymentServer_WechatCloseOrder_Handler,
		},
		{
			MethodName: "WechatRefund",
			Handler:    _PaymentServer_WechatRefund_Handler,
		},
		{
			MethodName: "WechatRefundQuery",
			Handler:    _PaymentServer_WechatRefundQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/payment/payment.proto",
}
