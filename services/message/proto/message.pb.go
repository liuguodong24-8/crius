// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: proto/message/message.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{0}
}

type MessageVariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                               `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                              `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         []*MessageVariableResponse_Variable `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MessageVariableResponse) Reset() {
	*x = MessageVariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageVariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageVariableResponse) ProtoMessage() {}

func (x *MessageVariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageVariableResponse.ProtoReflect.Descriptor instead.
func (*MessageVariableResponse) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{1}
}

func (x *MessageVariableResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *MessageVariableResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MessageVariableResponse) GetData() []*MessageVariableResponse_Variable {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBranchTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId    string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	MessageType string `protobuf:"bytes,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Time        int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetBranchTemplateRequest) Reset() {
	*x = GetBranchTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchTemplateRequest) ProtoMessage() {}

func (x *GetBranchTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetBranchTemplateRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{2}
}

func (x *GetBranchTemplateRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *GetBranchTemplateRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *GetBranchTemplateRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GetBranchTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                                                    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                                                   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *GetBranchTemplateResponse_GetBranchTemplateResponseDate `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBranchTemplateResponse) Reset() {
	*x = GetBranchTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchTemplateResponse) ProtoMessage() {}

func (x *GetBranchTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetBranchTemplateResponse) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{3}
}

func (x *GetBranchTemplateResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetBranchTemplateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetBranchTemplateResponse) GetData() *GetBranchTemplateResponse_GetBranchTemplateResponseDate {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetShortURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetShortURLRequest) Reset() {
	*x = GetShortURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShortURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortURLRequest) ProtoMessage() {}

func (x *GetShortURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortURLRequest.ProtoReflect.Descriptor instead.
func (*GetShortURLRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{4}
}

func (x *GetShortURLRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetShortURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                     `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *GetShortURLResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetShortURLResponse) Reset() {
	*x = GetShortURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShortURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortURLResponse) ProtoMessage() {}

func (x *GetShortURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortURLResponse.ProtoReflect.Descriptor instead.
func (*GetShortURLResponse) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{5}
}

func (x *GetShortURLResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetShortURLResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetShortURLResponse) GetData() *GetShortURLResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type MessageVariableResponse_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System    string                                      `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	SystemKey string                                      `protobuf:"bytes,2,opt,name=system_key,json=systemKey,proto3" json:"system_key,omitempty"`
	Message   []*MessageVariableResponse_Variable_Message `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *MessageVariableResponse_Variable) Reset() {
	*x = MessageVariableResponse_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageVariableResponse_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageVariableResponse_Variable) ProtoMessage() {}

func (x *MessageVariableResponse_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageVariableResponse_Variable.ProtoReflect.Descriptor instead.
func (*MessageVariableResponse_Variable) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MessageVariableResponse_Variable) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *MessageVariableResponse_Variable) GetSystemKey() string {
	if x != nil {
		return x.SystemKey
	}
	return ""
}

func (x *MessageVariableResponse_Variable) GetMessage() []*MessageVariableResponse_Variable_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type MessageVariableResponse_Variable_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category       string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	CategoryKey    string   `protobuf:"bytes,2,opt,name=category_key,json=categoryKey,proto3" json:"category_key,omitempty"`
	Variables      []string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty"`
	Trigger        string   `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	SettingDisable bool     `protobuf:"varint,5,opt,name=setting_disable,json=settingDisable,proto3" json:"setting_disable,omitempty"`
}

func (x *MessageVariableResponse_Variable_Message) Reset() {
	*x = MessageVariableResponse_Variable_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageVariableResponse_Variable_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageVariableResponse_Variable_Message) ProtoMessage() {}

func (x *MessageVariableResponse_Variable_Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageVariableResponse_Variable_Message.ProtoReflect.Descriptor instead.
func (*MessageVariableResponse_Variable_Message) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *MessageVariableResponse_Variable_Message) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MessageVariableResponse_Variable_Message) GetCategoryKey() string {
	if x != nil {
		return x.CategoryKey
	}
	return ""
}

func (x *MessageVariableResponse_Variable_Message) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *MessageVariableResponse_Variable_Message) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *MessageVariableResponse_Variable_Message) GetSettingDisable() bool {
	if x != nil {
		return x.SettingDisable
	}
	return false
}

type GetBranchTemplateResponse_GetBranchTemplateResponseDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TriggerType    string                                                        `protobuf:"bytes,2,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"`
	AdvanceHour    int32                                                         `protobuf:"varint,3,opt,name=advance_hour,json=advanceHour,proto3" json:"advance_hour,omitempty"`
	SmsTemplate    *SmsTemplate                                                  `protobuf:"bytes,4,opt,name=sms_template,json=smsTemplate,proto3" json:"sms_template,omitempty"`
	WechatTemplate *WechatTemplate                                               `protobuf:"bytes,5,opt,name=wechat_template,json=wechatTemplate,proto3" json:"wechat_template,omitempty"`
	Cc             []*GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc `protobuf:"bytes,6,rep,name=cc,proto3" json:"cc,omitempty"`
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) Reset() {
	*x = GetBranchTemplateResponse_GetBranchTemplateResponseDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchTemplateResponse_GetBranchTemplateResponseDate) ProtoMessage() {}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchTemplateResponse_GetBranchTemplateResponseDate.ProtoReflect.Descriptor instead.
func (*GetBranchTemplateResponse_GetBranchTemplateResponseDate) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) GetAdvanceHour() int32 {
	if x != nil {
		return x.AdvanceHour
	}
	return 0
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) GetSmsTemplate() *SmsTemplate {
	if x != nil {
		return x.SmsTemplate
	}
	return nil
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) GetWechatTemplate() *WechatTemplate {
	if x != nil {
		return x.WechatTemplate
	}
	return nil
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate) GetCc() []*GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc {
	if x != nil {
		return x.Cc
	}
	return nil
}

type GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) Reset() {
	*x = GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) ProtoMessage() {}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc.ProtoReflect.Descriptor instead.
func (*GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type GetShortURLResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetShortURLResponse_Data) Reset() {
	*x = GetShortURLResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShortURLResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortURLResponse_Data) ProtoMessage() {}

func (x *GetShortURLResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortURLResponse_Data.ProtoReflect.Descriptor instead.
func (*GetShortURLResponse_Data) Descriptor() ([]byte, []int) {
	return file_proto_message_message_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetShortURLResponse_Data) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_proto_message_message_proto protoreflect.FileDescriptor

var file_proto_message_message_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x6d, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xd9, 0x03, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xba, 0x02, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0xa9, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x6e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x04, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xf5, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x37, 0x0a, 0x0c,
	0x73, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x63, 0x52, 0x02, 0x63, 0x63, 0x1a, 0x2e, 0x0a, 0x02,
	0x43, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x26, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x18, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x32, 0x9e, 0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x12,
	0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x68, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1a, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x53, 0x6d, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x53, 0x6d, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x53, 0x6d, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6d, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x29, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0xca, 0x02, 0x17, 0x4f, 0x6d, 0x79, 0x5c, 0x43, 0x72, 0x69, 0x75, 0x73, 0x5c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_message_message_proto_rawDescOnce sync.Once
	file_proto_message_message_proto_rawDescData = file_proto_message_message_proto_rawDesc
)

func file_proto_message_message_proto_rawDescGZIP() []byte {
	file_proto_message_message_proto_rawDescOnce.Do(func() {
		file_proto_message_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_message_message_proto_rawDescData)
	})
	return file_proto_message_message_proto_rawDescData
}

var file_proto_message_message_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_message_message_proto_goTypes = []interface{}{
	(*Empty)(nil),                                                      // 0: message.Empty
	(*MessageVariableResponse)(nil),                                    // 1: message.MessageVariableResponse
	(*GetBranchTemplateRequest)(nil),                                   // 2: message.GetBranchTemplateRequest
	(*GetBranchTemplateResponse)(nil),                                  // 3: message.GetBranchTemplateResponse
	(*GetShortURLRequest)(nil),                                         // 4: message.GetShortURLRequest
	(*GetShortURLResponse)(nil),                                        // 5: message.GetShortURLResponse
	(*MessageVariableResponse_Variable)(nil),                           // 6: message.MessageVariableResponse.Variable
	(*MessageVariableResponse_Variable_Message)(nil),                   // 7: message.MessageVariableResponse.Variable.Message
	(*GetBranchTemplateResponse_GetBranchTemplateResponseDate)(nil),    // 8: message.GetBranchTemplateResponse.GetBranchTemplateResponseDate
	(*GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc)(nil), // 9: message.GetBranchTemplateResponse.GetBranchTemplateResponseDate.Cc
	(*GetShortURLResponse_Data)(nil),                                   // 10: message.GetShortURLResponse.Data
	(*SmsTemplate)(nil),                                                // 11: message.SmsTemplate
	(*WechatTemplate)(nil),                                             // 12: message.WechatTemplate
	(*SendSmsRequest)(nil),                                             // 13: message.SendSmsRequest
	(*CreateSmsTemplateRequest)(nil),                                   // 14: message.CreateSmsTemplateRequest
	(*ListSmsTemplateRequest)(nil),                                     // 15: message.ListSmsTemplateRequest
	(*UpdateSmsTemplateRequest)(nil),                                   // 16: message.UpdateSmsTemplateRequest
	(*ShowSmsTemplateRequest)(nil),                                     // 17: message.ShowSmsTemplateRequest
	(*ChangeSmsTemplateStatusRequest)(nil),                             // 18: message.ChangeSmsTemplateStatusRequest
	(*CreateMessageSettingRequest)(nil),                                // 19: message.CreateMessageSettingRequest
	(*ListMessageSettingRequest)(nil),                                  // 20: message.ListMessageSettingRequest
	(*UpdateMessageSettingRequest)(nil),                                // 21: message.UpdateMessageSettingRequest
	(*ShowMessageSettingRequest)(nil),                                  // 22: message.ShowMessageSettingRequest
	(*ChangeMessageSettingStatusRequest)(nil),                          // 23: message.ChangeMessageSettingStatusRequest
	(*StatSmsHistoryRequest)(nil),                                      // 24: message.StatSmsHistoryRequest
	(*ListSmsHistoryRequest)(nil),                                      // 25: message.ListSmsHistoryRequest
	(*CreateWechatTemplateRequest)(nil),                                // 26: message.CreateWechatTemplateRequest
	(*ListWechatTemplateRequest)(nil),                                  // 27: message.ListWechatTemplateRequest
	(*UpdateWechatTemplateStatusRequest)(nil),                          // 28: message.UpdateWechatTemplateStatusRequest
	(*UpdateWechatTemplateRequest)(nil),                                // 29: message.UpdateWechatTemplateRequest
	(*ShowWechatTemplateRequest)(nil),                                  // 30: message.ShowWechatTemplateRequest
	(*SendWechatTemplateRequest)(nil),                                  // 31: message.SendWechatTemplateRequest
	(*WechatStatRequest)(nil),                                          // 32: message.WechatStatRequest
	(*SendSmsResponse)(nil),                                            // 33: message.SendSmsResponse
	(*CreateSmsTemplateResponse)(nil),                                  // 34: message.CreateSmsTemplateResponse
	(*ListSmsTemplateResponse)(nil),                                    // 35: message.ListSmsTemplateResponse
	(*UpdateSmsTemplateResponse)(nil),                                  // 36: message.UpdateSmsTemplateResponse
	(*ShowSmsTemplateResponse)(nil),                                    // 37: message.ShowSmsTemplateResponse
	(*ChangeSmsTemplateStatusResponse)(nil),                            // 38: message.ChangeSmsTemplateStatusResponse
	(*CreateMessageSettingResponse)(nil),                               // 39: message.CreateMessageSettingResponse
	(*ListMessageSettingResponse)(nil),                                 // 40: message.ListMessageSettingResponse
	(*UpdateMessageSettingResponse)(nil),                               // 41: message.UpdateMessageSettingResponse
	(*ShowMessageSettingResponse)(nil),                                 // 42: message.ShowMessageSettingResponse
	(*ChangeMessageSettingStatusResponse)(nil),                         // 43: message.ChangeMessageSettingStatusResponse
	(*StatSmsHistoryResponse)(nil),                                     // 44: message.StatSmsHistoryResponse
	(*ListSmsHistoryResponse)(nil),                                     // 45: message.ListSmsHistoryResponse
	(*ListOfficialLinkResponse)(nil),                                   // 46: message.ListOfficialLinkResponse
	(*ListMiniprogramLinkResponse)(nil),                                // 47: message.ListMiniprogramLinkResponse
	(*CreateWechatTemplateResponse)(nil),                               // 48: message.CreateWechatTemplateResponse
	(*ListWechatTemplateResponse)(nil),                                 // 49: message.ListWechatTemplateResponse
	(*UpdateWechatTemplateStatusResponse)(nil),                         // 50: message.UpdateWechatTemplateStatusResponse
	(*UpdateWechatTemplateResponse)(nil),                               // 51: message.UpdateWechatTemplateResponse
	(*ShowWechatTemplateResponse)(nil),                                 // 52: message.ShowWechatTemplateResponse
	(*SendWechatTemplateResponse)(nil),                                 // 53: message.SendWechatTemplateResponse
	(*WechatStatResponse)(nil),                                         // 54: message.WechatStatResponse
}
var file_proto_message_message_proto_depIdxs = []int32{
	6,  // 0: message.MessageVariableResponse.data:type_name -> message.MessageVariableResponse.Variable
	8,  // 1: message.GetBranchTemplateResponse.data:type_name -> message.GetBranchTemplateResponse.GetBranchTemplateResponseDate
	10, // 2: message.GetShortURLResponse.data:type_name -> message.GetShortURLResponse.Data
	7,  // 3: message.MessageVariableResponse.Variable.message:type_name -> message.MessageVariableResponse.Variable.Message
	11, // 4: message.GetBranchTemplateResponse.GetBranchTemplateResponseDate.sms_template:type_name -> message.SmsTemplate
	12, // 5: message.GetBranchTemplateResponse.GetBranchTemplateResponseDate.wechat_template:type_name -> message.WechatTemplate
	9,  // 6: message.GetBranchTemplateResponse.GetBranchTemplateResponseDate.cc:type_name -> message.GetBranchTemplateResponse.GetBranchTemplateResponseDate.Cc
	13, // 7: message.MessageService.SendSms:input_type -> message.SendSmsRequest
	0,  // 8: message.MessageService.GetMessageVariable:input_type -> message.Empty
	14, // 9: message.MessageService.CreateSmsTemplate:input_type -> message.CreateSmsTemplateRequest
	15, // 10: message.MessageService.ListSmsTemplate:input_type -> message.ListSmsTemplateRequest
	16, // 11: message.MessageService.UpdateSmsTemplate:input_type -> message.UpdateSmsTemplateRequest
	17, // 12: message.MessageService.ShowSmsTemplate:input_type -> message.ShowSmsTemplateRequest
	18, // 13: message.MessageService.ChangeSmsTemplateStatus:input_type -> message.ChangeSmsTemplateStatusRequest
	19, // 14: message.MessageService.CreateMessageSetting:input_type -> message.CreateMessageSettingRequest
	20, // 15: message.MessageService.ListMessageSetting:input_type -> message.ListMessageSettingRequest
	21, // 16: message.MessageService.UpdateMessageSetting:input_type -> message.UpdateMessageSettingRequest
	22, // 17: message.MessageService.ShowMessageSetting:input_type -> message.ShowMessageSettingRequest
	23, // 18: message.MessageService.ChangeMessageSettingStatus:input_type -> message.ChangeMessageSettingStatusRequest
	24, // 19: message.MessageService.StatSmsHistory:input_type -> message.StatSmsHistoryRequest
	25, // 20: message.MessageService.ListSmsHistory:input_type -> message.ListSmsHistoryRequest
	2,  // 21: message.MessageService.GetBranchTemplate:input_type -> message.GetBranchTemplateRequest
	4,  // 22: message.MessageService.GetShortURL:input_type -> message.GetShortURLRequest
	0,  // 23: message.MessageService.ListOfficialLink:input_type -> message.Empty
	0,  // 24: message.MessageService.ListMiniprogramLink:input_type -> message.Empty
	26, // 25: message.MessageService.CreateWechatTemplate:input_type -> message.CreateWechatTemplateRequest
	27, // 26: message.MessageService.ListWechatTemplate:input_type -> message.ListWechatTemplateRequest
	28, // 27: message.MessageService.UpdateWechatTemplateStatus:input_type -> message.UpdateWechatTemplateStatusRequest
	29, // 28: message.MessageService.UpdateWechatTemplate:input_type -> message.UpdateWechatTemplateRequest
	30, // 29: message.MessageService.ShowWechatTemplate:input_type -> message.ShowWechatTemplateRequest
	31, // 30: message.MessageService.SendWechatTemplate:input_type -> message.SendWechatTemplateRequest
	32, // 31: message.MessageService.WechatStat:input_type -> message.WechatStatRequest
	33, // 32: message.MessageService.SendSms:output_type -> message.SendSmsResponse
	1,  // 33: message.MessageService.GetMessageVariable:output_type -> message.MessageVariableResponse
	34, // 34: message.MessageService.CreateSmsTemplate:output_type -> message.CreateSmsTemplateResponse
	35, // 35: message.MessageService.ListSmsTemplate:output_type -> message.ListSmsTemplateResponse
	36, // 36: message.MessageService.UpdateSmsTemplate:output_type -> message.UpdateSmsTemplateResponse
	37, // 37: message.MessageService.ShowSmsTemplate:output_type -> message.ShowSmsTemplateResponse
	38, // 38: message.MessageService.ChangeSmsTemplateStatus:output_type -> message.ChangeSmsTemplateStatusResponse
	39, // 39: message.MessageService.CreateMessageSetting:output_type -> message.CreateMessageSettingResponse
	40, // 40: message.MessageService.ListMessageSetting:output_type -> message.ListMessageSettingResponse
	41, // 41: message.MessageService.UpdateMessageSetting:output_type -> message.UpdateMessageSettingResponse
	42, // 42: message.MessageService.ShowMessageSetting:output_type -> message.ShowMessageSettingResponse
	43, // 43: message.MessageService.ChangeMessageSettingStatus:output_type -> message.ChangeMessageSettingStatusResponse
	44, // 44: message.MessageService.StatSmsHistory:output_type -> message.StatSmsHistoryResponse
	45, // 45: message.MessageService.ListSmsHistory:output_type -> message.ListSmsHistoryResponse
	3,  // 46: message.MessageService.GetBranchTemplate:output_type -> message.GetBranchTemplateResponse
	5,  // 47: message.MessageService.GetShortURL:output_type -> message.GetShortURLResponse
	46, // 48: message.MessageService.ListOfficialLink:output_type -> message.ListOfficialLinkResponse
	47, // 49: message.MessageService.ListMiniprogramLink:output_type -> message.ListMiniprogramLinkResponse
	48, // 50: message.MessageService.CreateWechatTemplate:output_type -> message.CreateWechatTemplateResponse
	49, // 51: message.MessageService.ListWechatTemplate:output_type -> message.ListWechatTemplateResponse
	50, // 52: message.MessageService.UpdateWechatTemplateStatus:output_type -> message.UpdateWechatTemplateStatusResponse
	51, // 53: message.MessageService.UpdateWechatTemplate:output_type -> message.UpdateWechatTemplateResponse
	52, // 54: message.MessageService.ShowWechatTemplate:output_type -> message.ShowWechatTemplateResponse
	53, // 55: message.MessageService.SendWechatTemplate:output_type -> message.SendWechatTemplateResponse
	54, // 56: message.MessageService.WechatStat:output_type -> message.WechatStatResponse
	32, // [32:57] is the sub-list for method output_type
	7,  // [7:32] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_message_message_proto_init() }
func file_proto_message_message_proto_init() {
	if File_proto_message_message_proto != nil {
		return
	}
	file_proto_message_sms_proto_init()
	file_proto_message_setting_proto_init()
	file_proto_message_sms_stat_proto_init()
	file_proto_message_wechat_proto_init()
	file_proto_message_wechat_stat_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_message_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageVariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShortURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShortURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageVariableResponse_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageVariableResponse_Variable_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchTemplateResponse_GetBranchTemplateResponseDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchTemplateResponse_GetBranchTemplateResponseDate_Cc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShortURLResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_message_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_message_message_proto_goTypes,
		DependencyIndexes: file_proto_message_message_proto_depIdxs,
		MessageInfos:      file_proto_message_message_proto_msgTypes,
	}.Build()
	File_proto_message_message_proto = out.File
	file_proto_message_message_proto_rawDesc = nil
	file_proto_message_message_proto_goTypes = nil
	file_proto_message_message_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	GetMessageVariable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageVariableResponse, error)
	// 短信模版
	CreateSmsTemplate(ctx context.Context, in *CreateSmsTemplateRequest, opts ...grpc.CallOption) (*CreateSmsTemplateResponse, error)
	ListSmsTemplate(ctx context.Context, in *ListSmsTemplateRequest, opts ...grpc.CallOption) (*ListSmsTemplateResponse, error)
	UpdateSmsTemplate(ctx context.Context, in *UpdateSmsTemplateRequest, opts ...grpc.CallOption) (*UpdateSmsTemplateResponse, error)
	ShowSmsTemplate(ctx context.Context, in *ShowSmsTemplateRequest, opts ...grpc.CallOption) (*ShowSmsTemplateResponse, error)
	ChangeSmsTemplateStatus(ctx context.Context, in *ChangeSmsTemplateStatusRequest, opts ...grpc.CallOption) (*ChangeSmsTemplateStatusResponse, error)
	// 消息设置
	CreateMessageSetting(ctx context.Context, in *CreateMessageSettingRequest, opts ...grpc.CallOption) (*CreateMessageSettingResponse, error)
	ListMessageSetting(ctx context.Context, in *ListMessageSettingRequest, opts ...grpc.CallOption) (*ListMessageSettingResponse, error)
	UpdateMessageSetting(ctx context.Context, in *UpdateMessageSettingRequest, opts ...grpc.CallOption) (*UpdateMessageSettingResponse, error)
	ShowMessageSetting(ctx context.Context, in *ShowMessageSettingRequest, opts ...grpc.CallOption) (*ShowMessageSettingResponse, error)
	ChangeMessageSettingStatus(ctx context.Context, in *ChangeMessageSettingStatusRequest, opts ...grpc.CallOption) (*ChangeMessageSettingStatusResponse, error)
	// 发送记录
	StatSmsHistory(ctx context.Context, in *StatSmsHistoryRequest, opts ...grpc.CallOption) (*StatSmsHistoryResponse, error)
	ListSmsHistory(ctx context.Context, in *ListSmsHistoryRequest, opts ...grpc.CallOption) (*ListSmsHistoryResponse, error)
	// 获取门店短信模版
	GetBranchTemplate(ctx context.Context, in *GetBranchTemplateRequest, opts ...grpc.CallOption) (*GetBranchTemplateResponse, error)
	// 短链
	GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error)
	// 微信模版
	ListOfficialLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOfficialLinkResponse, error)
	ListMiniprogramLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMiniprogramLinkResponse, error)
	CreateWechatTemplate(ctx context.Context, in *CreateWechatTemplateRequest, opts ...grpc.CallOption) (*CreateWechatTemplateResponse, error)
	ListWechatTemplate(ctx context.Context, in *ListWechatTemplateRequest, opts ...grpc.CallOption) (*ListWechatTemplateResponse, error)
	UpdateWechatTemplateStatus(ctx context.Context, in *UpdateWechatTemplateStatusRequest, opts ...grpc.CallOption) (*UpdateWechatTemplateStatusResponse, error)
	UpdateWechatTemplate(ctx context.Context, in *UpdateWechatTemplateRequest, opts ...grpc.CallOption) (*UpdateWechatTemplateResponse, error)
	ShowWechatTemplate(ctx context.Context, in *ShowWechatTemplateRequest, opts ...grpc.CallOption) (*ShowWechatTemplateResponse, error)
	// 发送微信模版消息
	SendWechatTemplate(ctx context.Context, in *SendWechatTemplateRequest, opts ...grpc.CallOption) (*SendWechatTemplateResponse, error)
	WechatStat(ctx context.Context, in *WechatStatRequest, opts ...grpc.CallOption) (*WechatStatResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageVariable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageVariableResponse, error) {
	out := new(MessageVariableResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetMessageVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateSmsTemplate(ctx context.Context, in *CreateSmsTemplateRequest, opts ...grpc.CallOption) (*CreateSmsTemplateResponse, error) {
	out := new(CreateSmsTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateSmsTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListSmsTemplate(ctx context.Context, in *ListSmsTemplateRequest, opts ...grpc.CallOption) (*ListSmsTemplateResponse, error) {
	out := new(ListSmsTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ListSmsTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateSmsTemplate(ctx context.Context, in *UpdateSmsTemplateRequest, opts ...grpc.CallOption) (*UpdateSmsTemplateResponse, error) {
	out := new(UpdateSmsTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/UpdateSmsTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ShowSmsTemplate(ctx context.Context, in *ShowSmsTemplateRequest, opts ...grpc.CallOption) (*ShowSmsTemplateResponse, error) {
	out := new(ShowSmsTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ShowSmsTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ChangeSmsTemplateStatus(ctx context.Context, in *ChangeSmsTemplateStatusRequest, opts ...grpc.CallOption) (*ChangeSmsTemplateStatusResponse, error) {
	out := new(ChangeSmsTemplateStatusResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ChangeSmsTemplateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateMessageSetting(ctx context.Context, in *CreateMessageSettingRequest, opts ...grpc.CallOption) (*CreateMessageSettingResponse, error) {
	out := new(CreateMessageSettingResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateMessageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListMessageSetting(ctx context.Context, in *ListMessageSettingRequest, opts ...grpc.CallOption) (*ListMessageSettingResponse, error) {
	out := new(ListMessageSettingResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ListMessageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateMessageSetting(ctx context.Context, in *UpdateMessageSettingRequest, opts ...grpc.CallOption) (*UpdateMessageSettingResponse, error) {
	out := new(UpdateMessageSettingResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/UpdateMessageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ShowMessageSetting(ctx context.Context, in *ShowMessageSettingRequest, opts ...grpc.CallOption) (*ShowMessageSettingResponse, error) {
	out := new(ShowMessageSettingResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ShowMessageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ChangeMessageSettingStatus(ctx context.Context, in *ChangeMessageSettingStatusRequest, opts ...grpc.CallOption) (*ChangeMessageSettingStatusResponse, error) {
	out := new(ChangeMessageSettingStatusResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ChangeMessageSettingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) StatSmsHistory(ctx context.Context, in *StatSmsHistoryRequest, opts ...grpc.CallOption) (*StatSmsHistoryResponse, error) {
	out := new(StatSmsHistoryResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/StatSmsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListSmsHistory(ctx context.Context, in *ListSmsHistoryRequest, opts ...grpc.CallOption) (*ListSmsHistoryResponse, error) {
	out := new(ListSmsHistoryResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ListSmsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetBranchTemplate(ctx context.Context, in *GetBranchTemplateRequest, opts ...grpc.CallOption) (*GetBranchTemplateResponse, error) {
	out := new(GetBranchTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetBranchTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error) {
	out := new(GetShortURLResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetShortURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListOfficialLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOfficialLinkResponse, error) {
	out := new(ListOfficialLinkResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ListOfficialLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListMiniprogramLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMiniprogramLinkResponse, error) {
	out := new(ListMiniprogramLinkResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ListMiniprogramLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateWechatTemplate(ctx context.Context, in *CreateWechatTemplateRequest, opts ...grpc.CallOption) (*CreateWechatTemplateResponse, error) {
	out := new(CreateWechatTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateWechatTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListWechatTemplate(ctx context.Context, in *ListWechatTemplateRequest, opts ...grpc.CallOption) (*ListWechatTemplateResponse, error) {
	out := new(ListWechatTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ListWechatTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateWechatTemplateStatus(ctx context.Context, in *UpdateWechatTemplateStatusRequest, opts ...grpc.CallOption) (*UpdateWechatTemplateStatusResponse, error) {
	out := new(UpdateWechatTemplateStatusResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/UpdateWechatTemplateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateWechatTemplate(ctx context.Context, in *UpdateWechatTemplateRequest, opts ...grpc.CallOption) (*UpdateWechatTemplateResponse, error) {
	out := new(UpdateWechatTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/UpdateWechatTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ShowWechatTemplate(ctx context.Context, in *ShowWechatTemplateRequest, opts ...grpc.CallOption) (*ShowWechatTemplateResponse, error) {
	out := new(ShowWechatTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/ShowWechatTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendWechatTemplate(ctx context.Context, in *SendWechatTemplateRequest, opts ...grpc.CallOption) (*SendWechatTemplateResponse, error) {
	out := new(SendWechatTemplateResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendWechatTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) WechatStat(ctx context.Context, in *WechatStatRequest, opts ...grpc.CallOption) (*WechatStatResponse, error) {
	out := new(WechatStatResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/WechatStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	GetMessageVariable(context.Context, *Empty) (*MessageVariableResponse, error)
	// 短信模版
	CreateSmsTemplate(context.Context, *CreateSmsTemplateRequest) (*CreateSmsTemplateResponse, error)
	ListSmsTemplate(context.Context, *ListSmsTemplateRequest) (*ListSmsTemplateResponse, error)
	UpdateSmsTemplate(context.Context, *UpdateSmsTemplateRequest) (*UpdateSmsTemplateResponse, error)
	ShowSmsTemplate(context.Context, *ShowSmsTemplateRequest) (*ShowSmsTemplateResponse, error)
	ChangeSmsTemplateStatus(context.Context, *ChangeSmsTemplateStatusRequest) (*ChangeSmsTemplateStatusResponse, error)
	// 消息设置
	CreateMessageSetting(context.Context, *CreateMessageSettingRequest) (*CreateMessageSettingResponse, error)
	ListMessageSetting(context.Context, *ListMessageSettingRequest) (*ListMessageSettingResponse, error)
	UpdateMessageSetting(context.Context, *UpdateMessageSettingRequest) (*UpdateMessageSettingResponse, error)
	ShowMessageSetting(context.Context, *ShowMessageSettingRequest) (*ShowMessageSettingResponse, error)
	ChangeMessageSettingStatus(context.Context, *ChangeMessageSettingStatusRequest) (*ChangeMessageSettingStatusResponse, error)
	// 发送记录
	StatSmsHistory(context.Context, *StatSmsHistoryRequest) (*StatSmsHistoryResponse, error)
	ListSmsHistory(context.Context, *ListSmsHistoryRequest) (*ListSmsHistoryResponse, error)
	// 获取门店短信模版
	GetBranchTemplate(context.Context, *GetBranchTemplateRequest) (*GetBranchTemplateResponse, error)
	// 短链
	GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error)
	// 微信模版
	ListOfficialLink(context.Context, *Empty) (*ListOfficialLinkResponse, error)
	ListMiniprogramLink(context.Context, *Empty) (*ListMiniprogramLinkResponse, error)
	CreateWechatTemplate(context.Context, *CreateWechatTemplateRequest) (*CreateWechatTemplateResponse, error)
	ListWechatTemplate(context.Context, *ListWechatTemplateRequest) (*ListWechatTemplateResponse, error)
	UpdateWechatTemplateStatus(context.Context, *UpdateWechatTemplateStatusRequest) (*UpdateWechatTemplateStatusResponse, error)
	UpdateWechatTemplate(context.Context, *UpdateWechatTemplateRequest) (*UpdateWechatTemplateResponse, error)
	ShowWechatTemplate(context.Context, *ShowWechatTemplateRequest) (*ShowWechatTemplateResponse, error)
	// 发送微信模版消息
	SendWechatTemplate(context.Context, *SendWechatTemplateRequest) (*SendWechatTemplateResponse, error)
	WechatStat(context.Context, *WechatStatRequest) (*WechatStatResponse, error)
}

// UnimplementedMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (*UnimplementedMessageServiceServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (*UnimplementedMessageServiceServer) GetMessageVariable(context.Context, *Empty) (*MessageVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageVariable not implemented")
}
func (*UnimplementedMessageServiceServer) CreateSmsTemplate(context.Context, *CreateSmsTemplateRequest) (*CreateSmsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) ListSmsTemplate(context.Context, *ListSmsTemplateRequest) (*ListSmsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) UpdateSmsTemplate(context.Context, *UpdateSmsTemplateRequest) (*UpdateSmsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmsTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) ShowSmsTemplate(context.Context, *ShowSmsTemplateRequest) (*ShowSmsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSmsTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) ChangeSmsTemplateStatus(context.Context, *ChangeSmsTemplateStatusRequest) (*ChangeSmsTemplateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSmsTemplateStatus not implemented")
}
func (*UnimplementedMessageServiceServer) CreateMessageSetting(context.Context, *CreateMessageSettingRequest) (*CreateMessageSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessageSetting not implemented")
}
func (*UnimplementedMessageServiceServer) ListMessageSetting(context.Context, *ListMessageSettingRequest) (*ListMessageSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessageSetting not implemented")
}
func (*UnimplementedMessageServiceServer) UpdateMessageSetting(context.Context, *UpdateMessageSettingRequest) (*UpdateMessageSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageSetting not implemented")
}
func (*UnimplementedMessageServiceServer) ShowMessageSetting(context.Context, *ShowMessageSettingRequest) (*ShowMessageSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMessageSetting not implemented")
}
func (*UnimplementedMessageServiceServer) ChangeMessageSettingStatus(context.Context, *ChangeMessageSettingStatusRequest) (*ChangeMessageSettingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMessageSettingStatus not implemented")
}
func (*UnimplementedMessageServiceServer) StatSmsHistory(context.Context, *StatSmsHistoryRequest) (*StatSmsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatSmsHistory not implemented")
}
func (*UnimplementedMessageServiceServer) ListSmsHistory(context.Context, *ListSmsHistoryRequest) (*ListSmsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmsHistory not implemented")
}
func (*UnimplementedMessageServiceServer) GetBranchTemplate(context.Context, *GetBranchTemplateRequest) (*GetBranchTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (*UnimplementedMessageServiceServer) ListOfficialLink(context.Context, *Empty) (*ListOfficialLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfficialLink not implemented")
}
func (*UnimplementedMessageServiceServer) ListMiniprogramLink(context.Context, *Empty) (*ListMiniprogramLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiniprogramLink not implemented")
}
func (*UnimplementedMessageServiceServer) CreateWechatTemplate(context.Context, *CreateWechatTemplateRequest) (*CreateWechatTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWechatTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) ListWechatTemplate(context.Context, *ListWechatTemplateRequest) (*ListWechatTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWechatTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) UpdateWechatTemplateStatus(context.Context, *UpdateWechatTemplateStatusRequest) (*UpdateWechatTemplateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWechatTemplateStatus not implemented")
}
func (*UnimplementedMessageServiceServer) UpdateWechatTemplate(context.Context, *UpdateWechatTemplateRequest) (*UpdateWechatTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWechatTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) ShowWechatTemplate(context.Context, *ShowWechatTemplateRequest) (*ShowWechatTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowWechatTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) SendWechatTemplate(context.Context, *SendWechatTemplateRequest) (*SendWechatTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWechatTemplate not implemented")
}
func (*UnimplementedMessageServiceServer) WechatStat(context.Context, *WechatStatRequest) (*WechatStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatStat not implemented")
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetMessageVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageVariable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateSmsTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateSmsTemplate(ctx, req.(*CreateSmsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ListSmsTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListSmsTemplate(ctx, req.(*ListSmsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/UpdateSmsTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateSmsTemplate(ctx, req.(*UpdateSmsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ShowSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSmsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ShowSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ShowSmsTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ShowSmsTemplate(ctx, req.(*ShowSmsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ChangeSmsTemplateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSmsTemplateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ChangeSmsTemplateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ChangeSmsTemplateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ChangeSmsTemplateStatus(ctx, req.(*ChangeSmsTemplateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateMessageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateMessageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateMessageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateMessageSetting(ctx, req.(*CreateMessageSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListMessageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListMessageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ListMessageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListMessageSetting(ctx, req.(*ListMessageSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateMessageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateMessageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/UpdateMessageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateMessageSetting(ctx, req.(*UpdateMessageSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ShowMessageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMessageSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ShowMessageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ShowMessageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ShowMessageSetting(ctx, req.(*ShowMessageSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ChangeMessageSettingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMessageSettingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ChangeMessageSettingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ChangeMessageSettingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ChangeMessageSettingStatus(ctx, req.(*ChangeMessageSettingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_StatSmsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatSmsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).StatSmsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/StatSmsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).StatSmsHistory(ctx, req.(*StatSmsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListSmsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListSmsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ListSmsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListSmsHistory(ctx, req.(*ListSmsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetBranchTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetBranchTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetBranchTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetBranchTemplate(ctx, req.(*GetBranchTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetShortURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetShortURL(ctx, req.(*GetShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListOfficialLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListOfficialLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ListOfficialLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListOfficialLink(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListMiniprogramLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListMiniprogramLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ListMiniprogramLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListMiniprogramLink(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateWechatTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWechatTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateWechatTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateWechatTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateWechatTemplate(ctx, req.(*CreateWechatTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListWechatTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWechatTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListWechatTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ListWechatTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListWechatTemplate(ctx, req.(*ListWechatTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateWechatTemplateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWechatTemplateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateWechatTemplateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/UpdateWechatTemplateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateWechatTemplateStatus(ctx, req.(*UpdateWechatTemplateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateWechatTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWechatTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateWechatTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/UpdateWechatTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateWechatTemplate(ctx, req.(*UpdateWechatTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ShowWechatTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowWechatTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ShowWechatTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/ShowWechatTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ShowWechatTemplate(ctx, req.(*ShowWechatTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendWechatTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWechatTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendWechatTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendWechatTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendWechatTemplate(ctx, req.(*SendWechatTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_WechatStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).WechatStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/WechatStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).WechatStat(ctx, req.(*WechatStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _MessageService_SendSms_Handler,
		},
		{
			MethodName: "GetMessageVariable",
			Handler:    _MessageService_GetMessageVariable_Handler,
		},
		{
			MethodName: "CreateSmsTemplate",
			Handler:    _MessageService_CreateSmsTemplate_Handler,
		},
		{
			MethodName: "ListSmsTemplate",
			Handler:    _MessageService_ListSmsTemplate_Handler,
		},
		{
			MethodName: "UpdateSmsTemplate",
			Handler:    _MessageService_UpdateSmsTemplate_Handler,
		},
		{
			MethodName: "ShowSmsTemplate",
			Handler:    _MessageService_ShowSmsTemplate_Handler,
		},
		{
			MethodName: "ChangeSmsTemplateStatus",
			Handler:    _MessageService_ChangeSmsTemplateStatus_Handler,
		},
		{
			MethodName: "CreateMessageSetting",
			Handler:    _MessageService_CreateMessageSetting_Handler,
		},
		{
			MethodName: "ListMessageSetting",
			Handler:    _MessageService_ListMessageSetting_Handler,
		},
		{
			MethodName: "UpdateMessageSetting",
			Handler:    _MessageService_UpdateMessageSetting_Handler,
		},
		{
			MethodName: "ShowMessageSetting",
			Handler:    _MessageService_ShowMessageSetting_Handler,
		},
		{
			MethodName: "ChangeMessageSettingStatus",
			Handler:    _MessageService_ChangeMessageSettingStatus_Handler,
		},
		{
			MethodName: "StatSmsHistory",
			Handler:    _MessageService_StatSmsHistory_Handler,
		},
		{
			MethodName: "ListSmsHistory",
			Handler:    _MessageService_ListSmsHistory_Handler,
		},
		{
			MethodName: "GetBranchTemplate",
			Handler:    _MessageService_GetBranchTemplate_Handler,
		},
		{
			MethodName: "GetShortURL",
			Handler:    _MessageService_GetShortURL_Handler,
		},
		{
			MethodName: "ListOfficialLink",
			Handler:    _MessageService_ListOfficialLink_Handler,
		},
		{
			MethodName: "ListMiniprogramLink",
			Handler:    _MessageService_ListMiniprogramLink_Handler,
		},
		{
			MethodName: "CreateWechatTemplate",
			Handler:    _MessageService_CreateWechatTemplate_Handler,
		},
		{
			MethodName: "ListWechatTemplate",
			Handler:    _MessageService_ListWechatTemplate_Handler,
		},
		{
			MethodName: "UpdateWechatTemplateStatus",
			Handler:    _MessageService_UpdateWechatTemplateStatus_Handler,
		},
		{
			MethodName: "UpdateWechatTemplate",
			Handler:    _MessageService_UpdateWechatTemplate_Handler,
		},
		{
			MethodName: "ShowWechatTemplate",
			Handler:    _MessageService_ShowWechatTemplate_Handler,
		},
		{
			MethodName: "SendWechatTemplate",
			Handler:    _MessageService_SendWechatTemplate_Handler,
		},
		{
			MethodName: "WechatStat",
			Handler:    _MessageService_WechatStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message/message.proto",
}
