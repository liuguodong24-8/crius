// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/merchant-basic/merchant_basic.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merchant_basic_merchant_basic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merchant_basic_merchant_basic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_merchant_basic_merchant_basic_proto_rawDescGZIP(), []int{0}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merchant_basic_merchant_basic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merchant_basic_merchant_basic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_merchant_basic_merchant_basic_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// UpdateStatusRequest 统一定义修改状态request
type UpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateStatusRequest) Reset() {
	*x = UpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merchant_basic_merchant_basic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatusRequest) ProtoMessage() {}

func (x *UpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merchant_basic_merchant_basic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_merchant_basic_merchant_basic_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_merchant_basic_merchant_basic_proto protoreflect.FileDescriptor

var file_proto_merchant_basic_merchant_basic_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x67, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4e,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xb9, 0x66,
	0x0a, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x20, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x61, 0x67, 0x49, 0x44, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x42,
	0x79, 0x54, 0x61, 0x67, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x12, 0x1f,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x10, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x66, 0x66, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x66, 0x66, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x42, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x80, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x2d,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12,
	0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x12, 0x25, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x12, 0x25, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x54, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x54, 0x61, 0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61,
	0x67, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54,
	0x61, 0x67, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x77, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x12, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x98, 0x01, 0x0a, 0x21, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x53, 0x68,
	0x6f, 0x77, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x75, 0x62, 0x4d, 0x63, 0x68, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x63, 0x68, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x63, 0x68, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x63, 0x68, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x63, 0x68, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x12, 0x30, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2e, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x17, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x17, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2d, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x10, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x48, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x48, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x1f,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x1d, 0x4f, 0x6d, 0x79,
	0x5c, 0x43, 0x72, 0x69, 0x75, 0x73, 0x5c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_merchant_basic_merchant_basic_proto_rawDescOnce sync.Once
	file_proto_merchant_basic_merchant_basic_proto_rawDescData = file_proto_merchant_basic_merchant_basic_proto_rawDesc
)

func file_proto_merchant_basic_merchant_basic_proto_rawDescGZIP() []byte {
	file_proto_merchant_basic_merchant_basic_proto_rawDescOnce.Do(func() {
		file_proto_merchant_basic_merchant_basic_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_merchant_basic_merchant_basic_proto_rawDescData)
	})
	return file_proto_merchant_basic_merchant_basic_proto_rawDescData
}

var file_proto_merchant_basic_merchant_basic_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_merchant_basic_merchant_basic_proto_goTypes = []interface{}{
	(*Empty)(nil),                                     // 0: merchantBasic.Empty
	(*Response)(nil),                                  // 1: merchantBasic.Response
	(*UpdateStatusRequest)(nil),                       // 2: merchantBasic.UpdateStatusRequest
	(*CreateBranchRequest)(nil),                       // 3: merchantBasic.CreateBranchRequest
	(*UpdateBranchRequest)(nil),                       // 4: merchantBasic.UpdateBranchRequest
	(*GetBranchesRequest)(nil),                        // 5: merchantBasic.GetBranchesRequest
	(*DeleteBranchRequest)(nil),                       // 6: merchantBasic.DeleteBranchRequest
	(*ShowBranchRequest)(nil),                         // 7: merchantBasic.ShowBranchRequest
	(*UpdateBranchStatusRequest)(nil),                 // 8: merchantBasic.UpdateBranchStatusRequest
	(*UpdateBranchAccountRequest)(nil),                // 9: merchantBasic.UpdateBranchAccountRequest
	(*GetBranchesByTagIDsRequest)(nil),                // 10: merchantBasic.GetBranchesByTagIDsRequest
	(*CreateStaffRequest)(nil),                        // 11: merchantBasic.CreateStaffRequest
	(*UpdateStaffRequest)(nil),                        // 12: merchantBasic.UpdateStaffRequest
	(*GetStaffsRequest)(nil),                          // 13: merchantBasic.GetStaffsRequest
	(*DeleteStaffRequest)(nil),                        // 14: merchantBasic.DeleteStaffRequest
	(*ShowStaffRequest)(nil),                          // 15: merchantBasic.ShowStaffRequest
	(*ShowStaffByPhoneRequest)(nil),                   // 16: merchantBasic.ShowStaffByPhoneRequest
	(*UpdateStaffStatusRequest)(nil),                  // 17: merchantBasic.UpdateStaffStatusRequest
	(*GetStaffsByRoleIDRequest)(nil),                  // 18: merchantBasic.GetStaffsByRoleIDRequest
	(*SignInRequest)(nil),                             // 19: merchantBasic.SignInRequest
	(*UpdatePasswordRequest)(nil),                     // 20: merchantBasic.UpdatePasswordRequest
	(*ResetPasswordRequest)(nil),                      // 21: merchantBasic.ResetPasswordRequest
	(*CreateRoleRequest)(nil),                         // 22: merchantBasic.CreateRoleRequest
	(*UpdateRoleRequest)(nil),                         // 23: merchantBasic.UpdateRoleRequest
	(*GetRolesRequest)(nil),                           // 24: merchantBasic.GetRolesRequest
	(*DeleteRoleRequest)(nil),                         // 25: merchantBasic.DeleteRoleRequest
	(*UpdateRoleStatusRequest)(nil),                   // 26: merchantBasic.UpdateRoleStatusRequest
	(*GetRoleHistoriesRequest)(nil),                   // 27: merchantBasic.GetRoleHistoriesRequest
	(*ShowRoleRequest)(nil),                           // 28: merchantBasic.ShowRoleRequest
	(*GetPermissionsRequest)(nil),                     // 29: merchantBasic.GetPermissionsRequest
	(*CreatePermissionsRequest)(nil),                  // 30: merchantBasic.CreatePermissionsRequest
	(*CreateMemberRequest)(nil),                       // 31: merchantBasic.CreateMemberRequest
	(*GetMembersRequest)(nil),                         // 32: merchantBasic.GetMembersRequest
	(*GetMembersByIDsRequest)(nil),                    // 33: merchantBasic.GetMembersByIDsRequest
	(*ShowMemberRequest)(nil),                         // 34: merchantBasic.ShowMemberRequest
	(*ShowMemberByAccuratePhoneRequest)(nil),          // 35: merchantBasic.ShowMemberByAccuratePhoneRequest
	(*UpdateMemberRequest)(nil),                       // 36: merchantBasic.UpdateMemberRequest
	(*GetBirthdayMembersRequest)(nil),                 // 37: merchantBasic.GetBirthdayMembersRequest
	(*CreateOrUpdateCallingMemberRequest)(nil),        // 38: merchantBasic.CreateOrUpdateCallingMemberRequest
	(*GetMembersByPhoneSuffixRequest)(nil),            // 39: merchantBasic.GetMembersByPhoneSuffixRequest
	(*CreateWechatMemberRequest)(nil),                 // 40: merchantBasic.CreateWechatMemberRequest
	(*UpdateMemberBranchInfoRequest)(nil),             // 41: merchantBasic.UpdateMemberBranchInfoRequest
	(*SearchMemberRequest)(nil),                       // 42: merchantBasic.SearchMemberRequest
	(*GetCouponMemberIDsRequest)(nil),                 // 43: merchantBasic.GetCouponMemberIDsRequest
	(*CreateBranchTagRequest)(nil),                    // 44: merchantBasic.CreateBranchTagRequest
	(*GetBranchTagsRequest)(nil),                      // 45: merchantBasic.GetBranchTagsRequest
	(*UpdateBranchTagRequest)(nil),                    // 46: merchantBasic.UpdateBranchTagRequest
	(*UpdateBranchTagStatusRequest)(nil),              // 47: merchantBasic.UpdateBranchTagStatusRequest
	(*GetBranchTagsByIDsRequest)(nil),                 // 48: merchantBasic.GetBranchTagsByIDsRequest
	(*ShowBranchTagRequest)(nil),                      // 49: merchantBasic.ShowBranchTagRequest
	(*SaveBranchAppointmentRequest)(nil),              // 50: merchantBasic.SaveBranchAppointmentRequest
	(*ShowBranchAppointmentRequest)(nil),              // 51: merchantBasic.ShowBranchAppointmentRequest
	(*UpdateBranchAppointmentRoomTypeRequest)(nil),    // 52: merchantBasic.UpdateBranchAppointmentRoomTypeRequest
	(*CreateRoomTypeCategoryRequest)(nil),             // 53: merchantBasic.CreateRoomTypeCategoryRequest
	(*CreateRoomTypeRequest)(nil),                     // 54: merchantBasic.CreateRoomTypeRequest
	(*GetRoomTypeCategoriesRequest)(nil),              // 55: merchantBasic.GetRoomTypeCategoriesRequest
	(*GetRoomTypesRequest)(nil),                       // 56: merchantBasic.GetRoomTypesRequest
	(*GetRoomTypesByIDsRequest)(nil),                  // 57: merchantBasic.GetRoomTypesByIDsRequest
	(*UpdateRoomTypeCategoryRequest)(nil),             // 58: merchantBasic.UpdateRoomTypeCategoryRequest
	(*UpdateRoomTypeRequest)(nil),                     // 59: merchantBasic.UpdateRoomTypeRequest
	(*ShowBranchAppointmentBusinessTimeRequest)(nil),  // 60: merchantBasic.ShowBranchAppointmentBusinessTimeRequest
	(*ShowRoomTypeRequest)(nil),                       // 61: merchantBasic.ShowRoomTypeRequest
	(*UpdateRoomTypeStatusRequest)(nil),               // 62: merchantBasic.UpdateRoomTypeStatusRequest
	(*CreateInvoiceRequest)(nil),                      // 63: merchantBasic.CreateInvoiceRequest
	(*CreateDistrictRequest)(nil),                     // 64: merchantBasic.CreateDistrictRequest
	(*UpdateDistrictRequest)(nil),                     // 65: merchantBasic.UpdateDistrictRequest
	(*GetDistrictsRequest)(nil),                       // 66: merchantBasic.GetDistrictsRequest
	(*GetBranchWithSubMchIDRequest)(nil),              // 67: merchantBasic.GetBranchWithSubMchIDRequest
	(*SetBranchSubMchIDRequest)(nil),                  // 68: merchantBasic.SetBranchSubMchIDRequest
	(*GetWechatPaySettingRequest)(nil),                // 69: merchantBasic.GetWechatPaySettingRequest
	(*GetWechatPaySettingByAppIDRequest)(nil),         // 70: merchantBasic.GetWechatPaySettingByAppIDRequest
	(*SetWechatPaySettingRequest)(nil),                // 71: merchantBasic.SetWechatPaySettingRequest
	(*GetBranchWechatPaymentSettingRequest)(nil),      // 72: merchantBasic.GetBranchWechatPaymentSettingRequest
	(*CreateMemberBehaviorRequest)(nil),               // 73: merchantBasic.CreateMemberBehaviorRequest
	(*GetMemberBehaviorsRequest)(nil),                 // 74: merchantBasic.GetMemberBehaviorsRequest
	(*GetBrandsRequest)(nil),                          // 75: merchantBasic.GetBrandsRequest
	(*CreateBrandRequest)(nil),                        // 76: merchantBasic.CreateBrandRequest
	(*UpdateBrandRequest)(nil),                        // 77: merchantBasic.UpdateBrandRequest
	(*UpdateBrandStatusRequest)(nil),                  // 78: merchantBasic.UpdateBrandStatusRequest
	(*CreateBranchBusinessSpecialRequest)(nil),        // 79: merchantBasic.CreateBranchBusinessSpecialRequest
	(*UpdateBranchBusinessSpecialRequest)(nil),        // 80: merchantBasic.UpdateBranchBusinessSpecialRequest
	(*UpdateBranchBusinessNormalRequest)(nil),         // 81: merchantBasic.UpdateBranchBusinessNormalRequest
	(*UpdateBranchBusinessStatusRequest)(nil),         // 82: merchantBasic.UpdateBranchBusinessStatusRequest
	(*GetBranchBusinessesRequest)(nil),                // 83: merchantBasic.GetBranchBusinessesRequest
	(*CreateOrUpdateWechatUserRequest)(nil),           // 84: merchantBasic.CreateOrUpdateWechatUserRequest
	(*ShowWechatUserRequest)(nil),                     // 85: merchantBasic.ShowWechatUserRequest
	(*GetWechatUsersRequest)(nil),                     // 86: merchantBasic.GetWechatUsersRequest
	(*GetBranchLatelyBusinessRequest)(nil),            // 87: merchantBasic.GetBranchLatelyBusinessRequest
	(*ShowWechatUserByMemberRequest)(nil),             // 88: merchantBasic.ShowWechatUserByMemberRequest
	(*CreateConsumeCategoryRequest)(nil),              // 89: merchantBasic.CreateConsumeCategoryRequest
	(*ListConsumeCategoryRequest)(nil),                // 90: merchantBasic.ListConsumeCategoryRequest
	(*UpdateConsumeCategoryRequest)(nil),              // 91: merchantBasic.UpdateConsumeCategoryRequest
	(*ShowConsumeCategoryRequest)(nil),                // 92: merchantBasic.ShowConsumeCategoryRequest
	(*SetPointRuleDescribeRequest)(nil),               // 93: merchantBasic.SetPointRuleDescribeRequest
	(*CreatePointRuleRequest)(nil),                    // 94: merchantBasic.CreatePointRuleRequest
	(*UpdatePointRuleRequest)(nil),                    // 95: merchantBasic.UpdatePointRuleRequest
	(*ListPointRuleRequest)(nil),                      // 96: merchantBasic.ListPointRuleRequest
	(*ShowPointRuleRequest)(nil),                      // 97: merchantBasic.ShowPointRuleRequest
	(*GetBranchPointRuleRequest)(nil),                 // 98: merchantBasic.GetBranchPointRuleRequest
	(*GetBranchPointRulesRequest)(nil),                // 99: merchantBasic.GetBranchPointRulesRequest
	(*MemberAddress)(nil),                             // 100: merchantBasic.MemberAddress
	(*GetMemberAddressRequest)(nil),                   // 101: merchantBasic.GetMemberAddressRequest
	(*SetMemberAddressDefaultRequest)(nil),            // 102: merchantBasic.SetMemberAddressDefaultRequest
	(*GetMemberDefaultAddressRequest)(nil),            // 103: merchantBasic.GetMemberDefaultAddressRequest
	(*DeleteMemberAddressRequest)(nil),                // 104: merchantBasic.DeleteMemberAddressRequest
	(*SaveGrowthConfigRequest)(nil),                   // 105: merchantBasic.SaveGrowthConfigRequest
	(*CreateGrowthRuleRequest)(nil),                   // 106: merchantBasic.CreateGrowthRuleRequest
	(*GetGrowthRulesRequest)(nil),                     // 107: merchantBasic.GetGrowthRulesRequest
	(*ShowGrowthRuleRequest)(nil),                     // 108: merchantBasic.ShowGrowthRuleRequest
	(*UpdateGrowthRuleRequest)(nil),                   // 109: merchantBasic.UpdateGrowthRuleRequest
	(*GetBranchGrowthRuleRequest)(nil),                // 110: merchantBasic.GetBranchGrowthRuleRequest
	(*GetBranchConsumeRewardRuleRequest)(nil),         // 111: merchantBasic.GetBranchConsumeRewardRuleRequest
	(*SearchGoodsAndPackageRequest)(nil),              // 112: merchantBasic.SearchGoodsAndPackageRequest
	(*SearchGoodsOrPackageRequest)(nil),               // 113: merchantBasic.SearchGoodsOrPackageRequest
	(*ShowGoodsRequest)(nil),                          // 114: merchantBasic.ShowGoodsRequest
	(*ShowPackageRequest)(nil),                        // 115: merchantBasic.ShowPackageRequest
	(*MultiGetGoodsAndPackagesRequest)(nil),           // 116: merchantBasic.MultiGetGoodsAndPackagesRequest
	(*GetRoomTypeGroupsByRoomTypeIDRequest)(nil),      // 117: merchantBasic.GetRoomTypeGroupsByRoomTypeIDRequest
	(*UpdateMerchantLogoRequest)(nil),                 // 118: merchantBasic.UpdateMerchantLogoRequest
	(*UpdateMerchantUserAgreementRequest)(nil),        // 119: merchantBasic.UpdateMerchantUserAgreementRequest
	(*CreateBranchResponse)(nil),                      // 120: merchantBasic.CreateBranchResponse
	(*UpdateBranchResponse)(nil),                      // 121: merchantBasic.UpdateBranchResponse
	(*GetBranchesResponse)(nil),                       // 122: merchantBasic.GetBranchesResponse
	(*DeleteBranchResponse)(nil),                      // 123: merchantBasic.DeleteBranchResponse
	(*ShowBranchResponse)(nil),                        // 124: merchantBasic.ShowBranchResponse
	(*UpdateBranchStatusResponse)(nil),                // 125: merchantBasic.UpdateBranchStatusResponse
	(*UpdateBranchAccountResponse)(nil),               // 126: merchantBasic.UpdateBranchAccountResponse
	(*GetBranchesByTagIDsResponse)(nil),               // 127: merchantBasic.GetBranchesByTagIDsResponse
	(*CreateStaffResponse)(nil),                       // 128: merchantBasic.CreateStaffResponse
	(*UpdateStaffResponse)(nil),                       // 129: merchantBasic.UpdateStaffResponse
	(*GetStaffsResponse)(nil),                         // 130: merchantBasic.GetStaffsResponse
	(*DeleteStaffResponse)(nil),                       // 131: merchantBasic.DeleteStaffResponse
	(*ShowStaffResponse)(nil),                         // 132: merchantBasic.ShowStaffResponse
	(*ShowStaffByPhoneResponse)(nil),                  // 133: merchantBasic.ShowStaffByPhoneResponse
	(*UpdateStaffStatusResponse)(nil),                 // 134: merchantBasic.UpdateStaffStatusResponse
	(*GetStaffsByRoleIDResponse)(nil),                 // 135: merchantBasic.GetStaffsByRoleIDResponse
	(*SignInResponse)(nil),                            // 136: merchantBasic.SignInResponse
	(*UpdatePasswordResponse)(nil),                    // 137: merchantBasic.UpdatePasswordResponse
	(*ResetPasswordResponse)(nil),                     // 138: merchantBasic.ResetPasswordResponse
	(*CreateRoleResponse)(nil),                        // 139: merchantBasic.CreateRoleResponse
	(*UpdateRoleResponse)(nil),                        // 140: merchantBasic.UpdateRoleResponse
	(*GetRolesResponse)(nil),                          // 141: merchantBasic.GetRolesResponse
	(*DeleteRoleResponse)(nil),                        // 142: merchantBasic.DeleteRoleResponse
	(*UpdateRoleStatusResponse)(nil),                  // 143: merchantBasic.UpdateRoleStatusResponse
	(*GetRoleHistoriesResponse)(nil),                  // 144: merchantBasic.GetRoleHistoriesResponse
	(*ShowRoleResponse)(nil),                          // 145: merchantBasic.ShowRoleResponse
	(*GetPermissionsResponse)(nil),                    // 146: merchantBasic.GetPermissionsResponse
	(*CreatePermissionsResponse)(nil),                 // 147: merchantBasic.CreatePermissionsResponse
	(*CreateMemberResponse)(nil),                      // 148: merchantBasic.CreateMemberResponse
	(*GetMembersResponse)(nil),                        // 149: merchantBasic.GetMembersResponse
	(*GetMembersByIDsResponse)(nil),                   // 150: merchantBasic.GetMembersByIDsResponse
	(*ShowMemberResponse)(nil),                        // 151: merchantBasic.ShowMemberResponse
	(*ShowMemberByAccuratePhoneResponse)(nil),         // 152: merchantBasic.ShowMemberByAccuratePhoneResponse
	(*UpdateMemberResponse)(nil),                      // 153: merchantBasic.UpdateMemberResponse
	(*GetBirthdayMembersResponse)(nil),                // 154: merchantBasic.GetBirthdayMembersResponse
	(*CreateOrUpdateCallingMemberResponse)(nil),       // 155: merchantBasic.CreateOrUpdateCallingMemberResponse
	(*GetMembersByPhoneSuffixResponse)(nil),           // 156: merchantBasic.GetMembersByPhoneSuffixResponse
	(*CreateWechatMemberResponse)(nil),                // 157: merchantBasic.CreateWechatMemberResponse
	(*SearchMemberResponse)(nil),                      // 158: merchantBasic.SearchMemberResponse
	(*GetCouponMemberIDsResponse)(nil),                // 159: merchantBasic.GetCouponMemberIDsResponse
	(*CountCouponMemberIDsResponse)(nil),              // 160: merchantBasic.CountCouponMemberIDsResponse
	(*CreateBranchTagResponse)(nil),                   // 161: merchantBasic.CreateBranchTagResponse
	(*GetBranchTagsResponse)(nil),                     // 162: merchantBasic.GetBranchTagsResponse
	(*UpdateBranchTagResponse)(nil),                   // 163: merchantBasic.UpdateBranchTagResponse
	(*UpdateBranchTagStatusResponse)(nil),             // 164: merchantBasic.UpdateBranchTagStatusResponse
	(*GetBranchTagsByIDsResponse)(nil),                // 165: merchantBasic.GetBranchTagsByIDsResponse
	(*ShowBranchTagResponse)(nil),                     // 166: merchantBasic.ShowBranchTagResponse
	(*SaveBranchAppointmentResponse)(nil),             // 167: merchantBasic.SaveBranchAppointmentResponse
	(*ShowBranchAppointmentResponse)(nil),             // 168: merchantBasic.ShowBranchAppointmentResponse
	(*UpdateBranchAppointmentRoomTypeResponse)(nil),   // 169: merchantBasic.UpdateBranchAppointmentRoomTypeResponse
	(*CreateRoomTypeCategoryResponse)(nil),            // 170: merchantBasic.CreateRoomTypeCategoryResponse
	(*CreateRoomTypeResponse)(nil),                    // 171: merchantBasic.CreateRoomTypeResponse
	(*GetRoomTypeCategoriesResponse)(nil),             // 172: merchantBasic.GetRoomTypeCategoriesResponse
	(*GetRoomTypesResponse)(nil),                      // 173: merchantBasic.GetRoomTypesResponse
	(*GetRoomTypesByIDsResponse)(nil),                 // 174: merchantBasic.GetRoomTypesByIDsResponse
	(*UpdateRoomTypeCategoryResponse)(nil),            // 175: merchantBasic.UpdateRoomTypeCategoryResponse
	(*UpdateRoomTypeResponse)(nil),                    // 176: merchantBasic.UpdateRoomTypeResponse
	(*ShowBranchAppointmentBusinessTimeResponse)(nil), // 177: merchantBasic.ShowBranchAppointmentBusinessTimeResponse
	(*ShowRoomTypeResponse)(nil),                      // 178: merchantBasic.ShowRoomTypeResponse
	(*CreateInvoiceResponse)(nil),                     // 179: merchantBasic.CreateInvoiceResponse
	(*CreateDistrictResponse)(nil),                    // 180: merchantBasic.CreateDistrictResponse
	(*UpdateDistrictResponse)(nil),                    // 181: merchantBasic.UpdateDistrictResponse
	(*GetDistrictsResponse)(nil),                      // 182: merchantBasic.GetDistrictsResponse
	(*GetBranchWithSubMchIDResponse)(nil),             // 183: merchantBasic.GetBranchWithSubMchIDResponse
	(*GetWechatPaySettingResponse)(nil),               // 184: merchantBasic.GetWechatPaySettingResponse
	(*GetBranchWechatPaymentSettingResponse)(nil),     // 185: merchantBasic.GetBranchWechatPaymentSettingResponse
	(*GetMemberBehaviorsResponse)(nil),                // 186: merchantBasic.GetMemberBehaviorsResponse
	(*GetBrandsResponse)(nil),                         // 187: merchantBasic.GetBrandsResponse
	(*GetBranchBusinessesResponse)(nil),               // 188: merchantBasic.GetBranchBusinessesResponse
	(*CreateOrUpdateWechatUserResponse)(nil),          // 189: merchantBasic.CreateOrUpdateWechatUserResponse
	(*ShowWechatUserResponse)(nil),                    // 190: merchantBasic.ShowWechatUserResponse
	(*GetWechatUsersResponse)(nil),                    // 191: merchantBasic.GetWechatUsersResponse
	(*GetBranchLatelyBusinessResponse)(nil),           // 192: merchantBasic.GetBranchLatelyBusinessResponse
	(*ShowWechatUserByMemberResponse)(nil),            // 193: merchantBasic.ShowWechatUserByMemberResponse
	(*ListConsumeCategoryResponse)(nil),               // 194: merchantBasic.ListConsumeCategoryResponse
	(*ShowConsumeCategoryResponse)(nil),               // 195: merchantBasic.ShowConsumeCategoryResponse
	(*GetConsumeCategoryTypesResponse)(nil),           // 196: merchantBasic.GetConsumeCategoryTypesResponse
	(*GetPointRuleDescribeResponse)(nil),              // 197: merchantBasic.GetPointRuleDescribeResponse
	(*ListPointRuleResponse)(nil),                     // 198: merchantBasic.ListPointRuleResponse
	(*ShowPointRuleResponse)(nil),                     // 199: merchantBasic.ShowPointRuleResponse
	(*GetPointRuleAllBranchResponse)(nil),             // 200: merchantBasic.GetPointRuleAllBranchResponse
	(*GetBranchPointRuleResponse)(nil),                // 201: merchantBasic.GetBranchPointRuleResponse
	(*GetBranchPointRulesResponse)(nil),               // 202: merchantBasic.GetBranchPointRulesResponse
	(*GetMemberAddressResponse)(nil),                  // 203: merchantBasic.GetMemberAddressResponse
	(*GetMemberDefaultAddressResponse)(nil),           // 204: merchantBasic.GetMemberDefaultAddressResponse
	(*ShowGrowthConfigResponse)(nil),                  // 205: merchantBasic.ShowGrowthConfigResponse
	(*GetGrowthRulesResponse)(nil),                    // 206: merchantBasic.GetGrowthRulesResponse
	(*ShowGrowthRuleResponse)(nil),                    // 207: merchantBasic.ShowGrowthRuleResponse
	(*GetBranchesHasGrowthRuleResponse)(nil),          // 208: merchantBasic.GetBranchesHasGrowthRuleResponse
	(*GetBranchGrowthRuleResponse)(nil),               // 209: merchantBasic.GetBranchGrowthRuleResponse
	(*GetBranchConsumeRewardRuleResponse)(nil),        // 210: merchantBasic.GetBranchConsumeRewardRuleResponse
	(*GetOperateTypesResponse)(nil),                   // 211: merchantBasic.GetOperateTypesResponse
	(*GetActiveTypesResponse)(nil),                    // 212: merchantBasic.GetActiveTypesResponse
	(*SearchGoodsAndPackageResponse)(nil),             // 213: merchantBasic.SearchGoodsAndPackageResponse
	(*SearchGoodsOrPackageResponse)(nil),              // 214: merchantBasic.SearchGoodsOrPackageResponse
	(*ShowGoodsResponse)(nil),                         // 215: merchantBasic.ShowGoodsResponse
	(*ShowPackageResponse)(nil),                       // 216: merchantBasic.ShowPackageResponse
	(*MultiGetGoodsAndPackagesResponse)(nil),          // 217: merchantBasic.MultiGetGoodsAndPackagesResponse
	(*GetRoomTypeGroupsResponse)(nil),                 // 218: merchantBasic.GetRoomTypeGroupsResponse
	(*ShowMerchantResponse)(nil),                      // 219: merchantBasic.ShowMerchantResponse
}
var file_proto_merchant_basic_merchant_basic_proto_depIdxs = []int32{
	3,   // 0: merchantBasic.MerchantBasicService.CreateBranch:input_type -> merchantBasic.CreateBranchRequest
	4,   // 1: merchantBasic.MerchantBasicService.UpdateBranch:input_type -> merchantBasic.UpdateBranchRequest
	5,   // 2: merchantBasic.MerchantBasicService.GetBranches:input_type -> merchantBasic.GetBranchesRequest
	6,   // 3: merchantBasic.MerchantBasicService.DeleteBranch:input_type -> merchantBasic.DeleteBranchRequest
	7,   // 4: merchantBasic.MerchantBasicService.ShowBranch:input_type -> merchantBasic.ShowBranchRequest
	8,   // 5: merchantBasic.MerchantBasicService.UpdateBranchStatus:input_type -> merchantBasic.UpdateBranchStatusRequest
	9,   // 6: merchantBasic.MerchantBasicService.UpdateBranchAccount:input_type -> merchantBasic.UpdateBranchAccountRequest
	10,  // 7: merchantBasic.MerchantBasicService.GetBranchesByTagIDs:input_type -> merchantBasic.GetBranchesByTagIDsRequest
	11,  // 8: merchantBasic.MerchantBasicService.CreateStaff:input_type -> merchantBasic.CreateStaffRequest
	12,  // 9: merchantBasic.MerchantBasicService.UpdateStaff:input_type -> merchantBasic.UpdateStaffRequest
	13,  // 10: merchantBasic.MerchantBasicService.GetStaffs:input_type -> merchantBasic.GetStaffsRequest
	14,  // 11: merchantBasic.MerchantBasicService.DeleteStaff:input_type -> merchantBasic.DeleteStaffRequest
	15,  // 12: merchantBasic.MerchantBasicService.ShowStaff:input_type -> merchantBasic.ShowStaffRequest
	16,  // 13: merchantBasic.MerchantBasicService.ShowStaffByPhone:input_type -> merchantBasic.ShowStaffByPhoneRequest
	17,  // 14: merchantBasic.MerchantBasicService.UpdateStaffStatus:input_type -> merchantBasic.UpdateStaffStatusRequest
	18,  // 15: merchantBasic.MerchantBasicService.GetStaffsByRoleID:input_type -> merchantBasic.GetStaffsByRoleIDRequest
	19,  // 16: merchantBasic.MerchantBasicService.SignIn:input_type -> merchantBasic.SignInRequest
	20,  // 17: merchantBasic.MerchantBasicService.UpdatePassword:input_type -> merchantBasic.UpdatePasswordRequest
	21,  // 18: merchantBasic.MerchantBasicService.ResetPassword:input_type -> merchantBasic.ResetPasswordRequest
	22,  // 19: merchantBasic.MerchantBasicService.CreateRole:input_type -> merchantBasic.CreateRoleRequest
	23,  // 20: merchantBasic.MerchantBasicService.UpdateRole:input_type -> merchantBasic.UpdateRoleRequest
	24,  // 21: merchantBasic.MerchantBasicService.GetRoles:input_type -> merchantBasic.GetRolesRequest
	25,  // 22: merchantBasic.MerchantBasicService.DeleteRole:input_type -> merchantBasic.DeleteRoleRequest
	26,  // 23: merchantBasic.MerchantBasicService.UpdateRoleStatus:input_type -> merchantBasic.UpdateRoleStatusRequest
	27,  // 24: merchantBasic.MerchantBasicService.GetRoleHistories:input_type -> merchantBasic.GetRoleHistoriesRequest
	28,  // 25: merchantBasic.MerchantBasicService.ShowRole:input_type -> merchantBasic.ShowRoleRequest
	29,  // 26: merchantBasic.MerchantBasicService.GetPermissions:input_type -> merchantBasic.GetPermissionsRequest
	30,  // 27: merchantBasic.MerchantBasicService.CreatePermissions:input_type -> merchantBasic.CreatePermissionsRequest
	31,  // 28: merchantBasic.MerchantBasicService.CreateMember:input_type -> merchantBasic.CreateMemberRequest
	32,  // 29: merchantBasic.MerchantBasicService.GetMembers:input_type -> merchantBasic.GetMembersRequest
	33,  // 30: merchantBasic.MerchantBasicService.GetMembersByIDs:input_type -> merchantBasic.GetMembersByIDsRequest
	34,  // 31: merchantBasic.MerchantBasicService.ShowMember:input_type -> merchantBasic.ShowMemberRequest
	35,  // 32: merchantBasic.MerchantBasicService.ShowMemberByAccuratePhone:input_type -> merchantBasic.ShowMemberByAccuratePhoneRequest
	36,  // 33: merchantBasic.MerchantBasicService.UpdateMember:input_type -> merchantBasic.UpdateMemberRequest
	37,  // 34: merchantBasic.MerchantBasicService.GetBirthdayMembers:input_type -> merchantBasic.GetBirthdayMembersRequest
	38,  // 35: merchantBasic.MerchantBasicService.CreateOrUpdateCallingMember:input_type -> merchantBasic.CreateOrUpdateCallingMemberRequest
	39,  // 36: merchantBasic.MerchantBasicService.GetMembersByPhoneSuffix:input_type -> merchantBasic.GetMembersByPhoneSuffixRequest
	40,  // 37: merchantBasic.MerchantBasicService.CreateWechatMember:input_type -> merchantBasic.CreateWechatMemberRequest
	41,  // 38: merchantBasic.MerchantBasicService.UpdateMemberBranchInfo:input_type -> merchantBasic.UpdateMemberBranchInfoRequest
	42,  // 39: merchantBasic.MerchantBasicService.SearchMember:input_type -> merchantBasic.SearchMemberRequest
	43,  // 40: merchantBasic.MerchantBasicService.GetCouponMemberIDs:input_type -> merchantBasic.GetCouponMemberIDsRequest
	43,  // 41: merchantBasic.MerchantBasicService.CountCouponMemberIDs:input_type -> merchantBasic.GetCouponMemberIDsRequest
	44,  // 42: merchantBasic.MerchantBasicService.CreateBranchTag:input_type -> merchantBasic.CreateBranchTagRequest
	45,  // 43: merchantBasic.MerchantBasicService.GetBranchTags:input_type -> merchantBasic.GetBranchTagsRequest
	46,  // 44: merchantBasic.MerchantBasicService.UpdateBranchTag:input_type -> merchantBasic.UpdateBranchTagRequest
	47,  // 45: merchantBasic.MerchantBasicService.UpdateBranchTagStatus:input_type -> merchantBasic.UpdateBranchTagStatusRequest
	48,  // 46: merchantBasic.MerchantBasicService.GetBranchTagsByIDs:input_type -> merchantBasic.GetBranchTagsByIDsRequest
	49,  // 47: merchantBasic.MerchantBasicService.ShowBranchTag:input_type -> merchantBasic.ShowBranchTagRequest
	50,  // 48: merchantBasic.MerchantBasicService.SaveBranchAppointment:input_type -> merchantBasic.SaveBranchAppointmentRequest
	51,  // 49: merchantBasic.MerchantBasicService.ShowBranchAppointment:input_type -> merchantBasic.ShowBranchAppointmentRequest
	52,  // 50: merchantBasic.MerchantBasicService.UpdateBranchAppointmentRoomType:input_type -> merchantBasic.UpdateBranchAppointmentRoomTypeRequest
	53,  // 51: merchantBasic.MerchantBasicService.CreateRoomTypeCategory:input_type -> merchantBasic.CreateRoomTypeCategoryRequest
	54,  // 52: merchantBasic.MerchantBasicService.CreateRoomType:input_type -> merchantBasic.CreateRoomTypeRequest
	55,  // 53: merchantBasic.MerchantBasicService.GetRoomTypeCategories:input_type -> merchantBasic.GetRoomTypeCategoriesRequest
	56,  // 54: merchantBasic.MerchantBasicService.GetRoomTypes:input_type -> merchantBasic.GetRoomTypesRequest
	57,  // 55: merchantBasic.MerchantBasicService.GetRoomTypesByIDs:input_type -> merchantBasic.GetRoomTypesByIDsRequest
	58,  // 56: merchantBasic.MerchantBasicService.UpdateRoomTypeCategory:input_type -> merchantBasic.UpdateRoomTypeCategoryRequest
	59,  // 57: merchantBasic.MerchantBasicService.UpdateRoomType:input_type -> merchantBasic.UpdateRoomTypeRequest
	60,  // 58: merchantBasic.MerchantBasicService.ShowBranchAppointmentBusinessTime:input_type -> merchantBasic.ShowBranchAppointmentBusinessTimeRequest
	61,  // 59: merchantBasic.MerchantBasicService.ShowRoomType:input_type -> merchantBasic.ShowRoomTypeRequest
	62,  // 60: merchantBasic.MerchantBasicService.UpdateRoomTypeStatus:input_type -> merchantBasic.UpdateRoomTypeStatusRequest
	63,  // 61: merchantBasic.MerchantBasicService.CreateInvoice:input_type -> merchantBasic.CreateInvoiceRequest
	64,  // 62: merchantBasic.MerchantBasicService.CreateDistrict:input_type -> merchantBasic.CreateDistrictRequest
	65,  // 63: merchantBasic.MerchantBasicService.UpdateDistrict:input_type -> merchantBasic.UpdateDistrictRequest
	66,  // 64: merchantBasic.MerchantBasicService.GetDistricts:input_type -> merchantBasic.GetDistrictsRequest
	67,  // 65: merchantBasic.MerchantBasicService.GetBranchWithSubMchID:input_type -> merchantBasic.GetBranchWithSubMchIDRequest
	68,  // 66: merchantBasic.MerchantBasicService.SetBranchSubMchID:input_type -> merchantBasic.SetBranchSubMchIDRequest
	69,  // 67: merchantBasic.MerchantBasicService.GetWechatPaySetting:input_type -> merchantBasic.GetWechatPaySettingRequest
	70,  // 68: merchantBasic.MerchantBasicService.GetWechatPaySettingByAppID:input_type -> merchantBasic.GetWechatPaySettingByAppIDRequest
	71,  // 69: merchantBasic.MerchantBasicService.SetWechatPaySetting:input_type -> merchantBasic.SetWechatPaySettingRequest
	72,  // 70: merchantBasic.MerchantBasicService.GetBranchWechatPaymentSetting:input_type -> merchantBasic.GetBranchWechatPaymentSettingRequest
	73,  // 71: merchantBasic.MerchantBasicService.CreateMemberBehavior:input_type -> merchantBasic.CreateMemberBehaviorRequest
	74,  // 72: merchantBasic.MerchantBasicService.GetMemberBehaviors:input_type -> merchantBasic.GetMemberBehaviorsRequest
	75,  // 73: merchantBasic.MerchantBasicService.GetBrands:input_type -> merchantBasic.GetBrandsRequest
	76,  // 74: merchantBasic.MerchantBasicService.CreateBrand:input_type -> merchantBasic.CreateBrandRequest
	77,  // 75: merchantBasic.MerchantBasicService.UpdateBrand:input_type -> merchantBasic.UpdateBrandRequest
	78,  // 76: merchantBasic.MerchantBasicService.UpdateBrandStatus:input_type -> merchantBasic.UpdateBrandStatusRequest
	79,  // 77: merchantBasic.MerchantBasicService.CreateBranchBusinessSpecial:input_type -> merchantBasic.CreateBranchBusinessSpecialRequest
	80,  // 78: merchantBasic.MerchantBasicService.UpdateBranchBusinessSpecial:input_type -> merchantBasic.UpdateBranchBusinessSpecialRequest
	81,  // 79: merchantBasic.MerchantBasicService.UpdateBranchBusinessNormal:input_type -> merchantBasic.UpdateBranchBusinessNormalRequest
	82,  // 80: merchantBasic.MerchantBasicService.UpdateBranchBusinessStatus:input_type -> merchantBasic.UpdateBranchBusinessStatusRequest
	83,  // 81: merchantBasic.MerchantBasicService.GetBranchBusinesses:input_type -> merchantBasic.GetBranchBusinessesRequest
	84,  // 82: merchantBasic.MerchantBasicService.CreateOrUpdateWechatUser:input_type -> merchantBasic.CreateOrUpdateWechatUserRequest
	85,  // 83: merchantBasic.MerchantBasicService.ShowWechatUser:input_type -> merchantBasic.ShowWechatUserRequest
	86,  // 84: merchantBasic.MerchantBasicService.GetWechatUsers:input_type -> merchantBasic.GetWechatUsersRequest
	87,  // 85: merchantBasic.MerchantBasicService.GetBranchLatelyBusiness:input_type -> merchantBasic.GetBranchLatelyBusinessRequest
	88,  // 86: merchantBasic.MerchantBasicService.ShowWechatUserByMember:input_type -> merchantBasic.ShowWechatUserByMemberRequest
	89,  // 87: merchantBasic.MerchantBasicService.CreateConsumeCategory:input_type -> merchantBasic.CreateConsumeCategoryRequest
	90,  // 88: merchantBasic.MerchantBasicService.ListConsumeCategory:input_type -> merchantBasic.ListConsumeCategoryRequest
	91,  // 89: merchantBasic.MerchantBasicService.UpdateConsumeCategory:input_type -> merchantBasic.UpdateConsumeCategoryRequest
	2,   // 90: merchantBasic.MerchantBasicService.UpdateConsumeCategoryStatus:input_type -> merchantBasic.UpdateStatusRequest
	92,  // 91: merchantBasic.MerchantBasicService.ShowConsumeCategory:input_type -> merchantBasic.ShowConsumeCategoryRequest
	0,   // 92: merchantBasic.MerchantBasicService.GetConsumeCategoryTypes:input_type -> merchantBasic.Empty
	93,  // 93: merchantBasic.MerchantBasicService.SetPointRuleDescribe:input_type -> merchantBasic.SetPointRuleDescribeRequest
	0,   // 94: merchantBasic.MerchantBasicService.GetPointRuleDescribe:input_type -> merchantBasic.Empty
	94,  // 95: merchantBasic.MerchantBasicService.CreatePointRule:input_type -> merchantBasic.CreatePointRuleRequest
	95,  // 96: merchantBasic.MerchantBasicService.UpdatePointRule:input_type -> merchantBasic.UpdatePointRuleRequest
	2,   // 97: merchantBasic.MerchantBasicService.UpdatePointRuleStatus:input_type -> merchantBasic.UpdateStatusRequest
	96,  // 98: merchantBasic.MerchantBasicService.ListPointRule:input_type -> merchantBasic.ListPointRuleRequest
	97,  // 99: merchantBasic.MerchantBasicService.ShowPointRule:input_type -> merchantBasic.ShowPointRuleRequest
	0,   // 100: merchantBasic.MerchantBasicService.GetPointRuleAllBranch:input_type -> merchantBasic.Empty
	98,  // 101: merchantBasic.MerchantBasicService.GetBranchPointRule:input_type -> merchantBasic.GetBranchPointRuleRequest
	99,  // 102: merchantBasic.MerchantBasicService.GetBranchPointRules:input_type -> merchantBasic.GetBranchPointRulesRequest
	100, // 103: merchantBasic.MerchantBasicService.CreateMemberAddress:input_type -> merchantBasic.MemberAddress
	100, // 104: merchantBasic.MerchantBasicService.UpdateMemberAddress:input_type -> merchantBasic.MemberAddress
	101, // 105: merchantBasic.MerchantBasicService.GetMemberAddress:input_type -> merchantBasic.GetMemberAddressRequest
	102, // 106: merchantBasic.MerchantBasicService.SetMemberAddressDefault:input_type -> merchantBasic.SetMemberAddressDefaultRequest
	103, // 107: merchantBasic.MerchantBasicService.GetMemberDefaultAddress:input_type -> merchantBasic.GetMemberDefaultAddressRequest
	104, // 108: merchantBasic.MerchantBasicService.DeleteMemberAddress:input_type -> merchantBasic.DeleteMemberAddressRequest
	0,   // 109: merchantBasic.MerchantBasicService.ShowGrowthConfig:input_type -> merchantBasic.Empty
	105, // 110: merchantBasic.MerchantBasicService.SaveGrowthConfig:input_type -> merchantBasic.SaveGrowthConfigRequest
	106, // 111: merchantBasic.MerchantBasicService.CreateGrowthRule:input_type -> merchantBasic.CreateGrowthRuleRequest
	107, // 112: merchantBasic.MerchantBasicService.GetGrowthRules:input_type -> merchantBasic.GetGrowthRulesRequest
	108, // 113: merchantBasic.MerchantBasicService.ShowGrowthRule:input_type -> merchantBasic.ShowGrowthRuleRequest
	109, // 114: merchantBasic.MerchantBasicService.UpdateGrowthRule:input_type -> merchantBasic.UpdateGrowthRuleRequest
	0,   // 115: merchantBasic.MerchantBasicService.GetBranchesHasGrowthRule:input_type -> merchantBasic.Empty
	110, // 116: merchantBasic.MerchantBasicService.GetBranchGrowthRule:input_type -> merchantBasic.GetBranchGrowthRuleRequest
	111, // 117: merchantBasic.MerchantBasicService.GetBranchConsumeRewardRule:input_type -> merchantBasic.GetBranchConsumeRewardRuleRequest
	0,   // 118: merchantBasic.MerchantBasicService.GetOperateTypes:input_type -> merchantBasic.Empty
	0,   // 119: merchantBasic.MerchantBasicService.GetActiveTypes:input_type -> merchantBasic.Empty
	112, // 120: merchantBasic.MerchantBasicService.SearchGoodsAndPackage:input_type -> merchantBasic.SearchGoodsAndPackageRequest
	113, // 121: merchantBasic.MerchantBasicService.SearchGoodsOrPackage:input_type -> merchantBasic.SearchGoodsOrPackageRequest
	114, // 122: merchantBasic.MerchantBasicService.ShowGoods:input_type -> merchantBasic.ShowGoodsRequest
	115, // 123: merchantBasic.MerchantBasicService.ShowPackage:input_type -> merchantBasic.ShowPackageRequest
	116, // 124: merchantBasic.MerchantBasicService.MultiGetGoodsAndPackages:input_type -> merchantBasic.MultiGetGoodsAndPackagesRequest
	0,   // 125: merchantBasic.MerchantBasicService.GetRoomTypeGroups:input_type -> merchantBasic.Empty
	117, // 126: merchantBasic.MerchantBasicService.GetRoomTypeGroupsByRoomTypeID:input_type -> merchantBasic.GetRoomTypeGroupsByRoomTypeIDRequest
	118, // 127: merchantBasic.MerchantBasicService.UpdateMerchantLogo:input_type -> merchantBasic.UpdateMerchantLogoRequest
	119, // 128: merchantBasic.MerchantBasicService.UpdateMerchantUserAgreement:input_type -> merchantBasic.UpdateMerchantUserAgreementRequest
	0,   // 129: merchantBasic.MerchantBasicService.ShowMerchant:input_type -> merchantBasic.Empty
	120, // 130: merchantBasic.MerchantBasicService.CreateBranch:output_type -> merchantBasic.CreateBranchResponse
	121, // 131: merchantBasic.MerchantBasicService.UpdateBranch:output_type -> merchantBasic.UpdateBranchResponse
	122, // 132: merchantBasic.MerchantBasicService.GetBranches:output_type -> merchantBasic.GetBranchesResponse
	123, // 133: merchantBasic.MerchantBasicService.DeleteBranch:output_type -> merchantBasic.DeleteBranchResponse
	124, // 134: merchantBasic.MerchantBasicService.ShowBranch:output_type -> merchantBasic.ShowBranchResponse
	125, // 135: merchantBasic.MerchantBasicService.UpdateBranchStatus:output_type -> merchantBasic.UpdateBranchStatusResponse
	126, // 136: merchantBasic.MerchantBasicService.UpdateBranchAccount:output_type -> merchantBasic.UpdateBranchAccountResponse
	127, // 137: merchantBasic.MerchantBasicService.GetBranchesByTagIDs:output_type -> merchantBasic.GetBranchesByTagIDsResponse
	128, // 138: merchantBasic.MerchantBasicService.CreateStaff:output_type -> merchantBasic.CreateStaffResponse
	129, // 139: merchantBasic.MerchantBasicService.UpdateStaff:output_type -> merchantBasic.UpdateStaffResponse
	130, // 140: merchantBasic.MerchantBasicService.GetStaffs:output_type -> merchantBasic.GetStaffsResponse
	131, // 141: merchantBasic.MerchantBasicService.DeleteStaff:output_type -> merchantBasic.DeleteStaffResponse
	132, // 142: merchantBasic.MerchantBasicService.ShowStaff:output_type -> merchantBasic.ShowStaffResponse
	133, // 143: merchantBasic.MerchantBasicService.ShowStaffByPhone:output_type -> merchantBasic.ShowStaffByPhoneResponse
	134, // 144: merchantBasic.MerchantBasicService.UpdateStaffStatus:output_type -> merchantBasic.UpdateStaffStatusResponse
	135, // 145: merchantBasic.MerchantBasicService.GetStaffsByRoleID:output_type -> merchantBasic.GetStaffsByRoleIDResponse
	136, // 146: merchantBasic.MerchantBasicService.SignIn:output_type -> merchantBasic.SignInResponse
	137, // 147: merchantBasic.MerchantBasicService.UpdatePassword:output_type -> merchantBasic.UpdatePasswordResponse
	138, // 148: merchantBasic.MerchantBasicService.ResetPassword:output_type -> merchantBasic.ResetPasswordResponse
	139, // 149: merchantBasic.MerchantBasicService.CreateRole:output_type -> merchantBasic.CreateRoleResponse
	140, // 150: merchantBasic.MerchantBasicService.UpdateRole:output_type -> merchantBasic.UpdateRoleResponse
	141, // 151: merchantBasic.MerchantBasicService.GetRoles:output_type -> merchantBasic.GetRolesResponse
	142, // 152: merchantBasic.MerchantBasicService.DeleteRole:output_type -> merchantBasic.DeleteRoleResponse
	143, // 153: merchantBasic.MerchantBasicService.UpdateRoleStatus:output_type -> merchantBasic.UpdateRoleStatusResponse
	144, // 154: merchantBasic.MerchantBasicService.GetRoleHistories:output_type -> merchantBasic.GetRoleHistoriesResponse
	145, // 155: merchantBasic.MerchantBasicService.ShowRole:output_type -> merchantBasic.ShowRoleResponse
	146, // 156: merchantBasic.MerchantBasicService.GetPermissions:output_type -> merchantBasic.GetPermissionsResponse
	147, // 157: merchantBasic.MerchantBasicService.CreatePermissions:output_type -> merchantBasic.CreatePermissionsResponse
	148, // 158: merchantBasic.MerchantBasicService.CreateMember:output_type -> merchantBasic.CreateMemberResponse
	149, // 159: merchantBasic.MerchantBasicService.GetMembers:output_type -> merchantBasic.GetMembersResponse
	150, // 160: merchantBasic.MerchantBasicService.GetMembersByIDs:output_type -> merchantBasic.GetMembersByIDsResponse
	151, // 161: merchantBasic.MerchantBasicService.ShowMember:output_type -> merchantBasic.ShowMemberResponse
	152, // 162: merchantBasic.MerchantBasicService.ShowMemberByAccuratePhone:output_type -> merchantBasic.ShowMemberByAccuratePhoneResponse
	153, // 163: merchantBasic.MerchantBasicService.UpdateMember:output_type -> merchantBasic.UpdateMemberResponse
	154, // 164: merchantBasic.MerchantBasicService.GetBirthdayMembers:output_type -> merchantBasic.GetBirthdayMembersResponse
	155, // 165: merchantBasic.MerchantBasicService.CreateOrUpdateCallingMember:output_type -> merchantBasic.CreateOrUpdateCallingMemberResponse
	156, // 166: merchantBasic.MerchantBasicService.GetMembersByPhoneSuffix:output_type -> merchantBasic.GetMembersByPhoneSuffixResponse
	157, // 167: merchantBasic.MerchantBasicService.CreateWechatMember:output_type -> merchantBasic.CreateWechatMemberResponse
	1,   // 168: merchantBasic.MerchantBasicService.UpdateMemberBranchInfo:output_type -> merchantBasic.Response
	158, // 169: merchantBasic.MerchantBasicService.SearchMember:output_type -> merchantBasic.SearchMemberResponse
	159, // 170: merchantBasic.MerchantBasicService.GetCouponMemberIDs:output_type -> merchantBasic.GetCouponMemberIDsResponse
	160, // 171: merchantBasic.MerchantBasicService.CountCouponMemberIDs:output_type -> merchantBasic.CountCouponMemberIDsResponse
	161, // 172: merchantBasic.MerchantBasicService.CreateBranchTag:output_type -> merchantBasic.CreateBranchTagResponse
	162, // 173: merchantBasic.MerchantBasicService.GetBranchTags:output_type -> merchantBasic.GetBranchTagsResponse
	163, // 174: merchantBasic.MerchantBasicService.UpdateBranchTag:output_type -> merchantBasic.UpdateBranchTagResponse
	164, // 175: merchantBasic.MerchantBasicService.UpdateBranchTagStatus:output_type -> merchantBasic.UpdateBranchTagStatusResponse
	165, // 176: merchantBasic.MerchantBasicService.GetBranchTagsByIDs:output_type -> merchantBasic.GetBranchTagsByIDsResponse
	166, // 177: merchantBasic.MerchantBasicService.ShowBranchTag:output_type -> merchantBasic.ShowBranchTagResponse
	167, // 178: merchantBasic.MerchantBasicService.SaveBranchAppointment:output_type -> merchantBasic.SaveBranchAppointmentResponse
	168, // 179: merchantBasic.MerchantBasicService.ShowBranchAppointment:output_type -> merchantBasic.ShowBranchAppointmentResponse
	169, // 180: merchantBasic.MerchantBasicService.UpdateBranchAppointmentRoomType:output_type -> merchantBasic.UpdateBranchAppointmentRoomTypeResponse
	170, // 181: merchantBasic.MerchantBasicService.CreateRoomTypeCategory:output_type -> merchantBasic.CreateRoomTypeCategoryResponse
	171, // 182: merchantBasic.MerchantBasicService.CreateRoomType:output_type -> merchantBasic.CreateRoomTypeResponse
	172, // 183: merchantBasic.MerchantBasicService.GetRoomTypeCategories:output_type -> merchantBasic.GetRoomTypeCategoriesResponse
	173, // 184: merchantBasic.MerchantBasicService.GetRoomTypes:output_type -> merchantBasic.GetRoomTypesResponse
	174, // 185: merchantBasic.MerchantBasicService.GetRoomTypesByIDs:output_type -> merchantBasic.GetRoomTypesByIDsResponse
	175, // 186: merchantBasic.MerchantBasicService.UpdateRoomTypeCategory:output_type -> merchantBasic.UpdateRoomTypeCategoryResponse
	176, // 187: merchantBasic.MerchantBasicService.UpdateRoomType:output_type -> merchantBasic.UpdateRoomTypeResponse
	177, // 188: merchantBasic.MerchantBasicService.ShowBranchAppointmentBusinessTime:output_type -> merchantBasic.ShowBranchAppointmentBusinessTimeResponse
	178, // 189: merchantBasic.MerchantBasicService.ShowRoomType:output_type -> merchantBasic.ShowRoomTypeResponse
	1,   // 190: merchantBasic.MerchantBasicService.UpdateRoomTypeStatus:output_type -> merchantBasic.Response
	179, // 191: merchantBasic.MerchantBasicService.CreateInvoice:output_type -> merchantBasic.CreateInvoiceResponse
	180, // 192: merchantBasic.MerchantBasicService.CreateDistrict:output_type -> merchantBasic.CreateDistrictResponse
	181, // 193: merchantBasic.MerchantBasicService.UpdateDistrict:output_type -> merchantBasic.UpdateDistrictResponse
	182, // 194: merchantBasic.MerchantBasicService.GetDistricts:output_type -> merchantBasic.GetDistrictsResponse
	183, // 195: merchantBasic.MerchantBasicService.GetBranchWithSubMchID:output_type -> merchantBasic.GetBranchWithSubMchIDResponse
	1,   // 196: merchantBasic.MerchantBasicService.SetBranchSubMchID:output_type -> merchantBasic.Response
	184, // 197: merchantBasic.MerchantBasicService.GetWechatPaySetting:output_type -> merchantBasic.GetWechatPaySettingResponse
	184, // 198: merchantBasic.MerchantBasicService.GetWechatPaySettingByAppID:output_type -> merchantBasic.GetWechatPaySettingResponse
	1,   // 199: merchantBasic.MerchantBasicService.SetWechatPaySetting:output_type -> merchantBasic.Response
	185, // 200: merchantBasic.MerchantBasicService.GetBranchWechatPaymentSetting:output_type -> merchantBasic.GetBranchWechatPaymentSettingResponse
	1,   // 201: merchantBasic.MerchantBasicService.CreateMemberBehavior:output_type -> merchantBasic.Response
	186, // 202: merchantBasic.MerchantBasicService.GetMemberBehaviors:output_type -> merchantBasic.GetMemberBehaviorsResponse
	187, // 203: merchantBasic.MerchantBasicService.GetBrands:output_type -> merchantBasic.GetBrandsResponse
	1,   // 204: merchantBasic.MerchantBasicService.CreateBrand:output_type -> merchantBasic.Response
	1,   // 205: merchantBasic.MerchantBasicService.UpdateBrand:output_type -> merchantBasic.Response
	1,   // 206: merchantBasic.MerchantBasicService.UpdateBrandStatus:output_type -> merchantBasic.Response
	1,   // 207: merchantBasic.MerchantBasicService.CreateBranchBusinessSpecial:output_type -> merchantBasic.Response
	1,   // 208: merchantBasic.MerchantBasicService.UpdateBranchBusinessSpecial:output_type -> merchantBasic.Response
	1,   // 209: merchantBasic.MerchantBasicService.UpdateBranchBusinessNormal:output_type -> merchantBasic.Response
	1,   // 210: merchantBasic.MerchantBasicService.UpdateBranchBusinessStatus:output_type -> merchantBasic.Response
	188, // 211: merchantBasic.MerchantBasicService.GetBranchBusinesses:output_type -> merchantBasic.GetBranchBusinessesResponse
	189, // 212: merchantBasic.MerchantBasicService.CreateOrUpdateWechatUser:output_type -> merchantBasic.CreateOrUpdateWechatUserResponse
	190, // 213: merchantBasic.MerchantBasicService.ShowWechatUser:output_type -> merchantBasic.ShowWechatUserResponse
	191, // 214: merchantBasic.MerchantBasicService.GetWechatUsers:output_type -> merchantBasic.GetWechatUsersResponse
	192, // 215: merchantBasic.MerchantBasicService.GetBranchLatelyBusiness:output_type -> merchantBasic.GetBranchLatelyBusinessResponse
	193, // 216: merchantBasic.MerchantBasicService.ShowWechatUserByMember:output_type -> merchantBasic.ShowWechatUserByMemberResponse
	1,   // 217: merchantBasic.MerchantBasicService.CreateConsumeCategory:output_type -> merchantBasic.Response
	194, // 218: merchantBasic.MerchantBasicService.ListConsumeCategory:output_type -> merchantBasic.ListConsumeCategoryResponse
	1,   // 219: merchantBasic.MerchantBasicService.UpdateConsumeCategory:output_type -> merchantBasic.Response
	1,   // 220: merchantBasic.MerchantBasicService.UpdateConsumeCategoryStatus:output_type -> merchantBasic.Response
	195, // 221: merchantBasic.MerchantBasicService.ShowConsumeCategory:output_type -> merchantBasic.ShowConsumeCategoryResponse
	196, // 222: merchantBasic.MerchantBasicService.GetConsumeCategoryTypes:output_type -> merchantBasic.GetConsumeCategoryTypesResponse
	1,   // 223: merchantBasic.MerchantBasicService.SetPointRuleDescribe:output_type -> merchantBasic.Response
	197, // 224: merchantBasic.MerchantBasicService.GetPointRuleDescribe:output_type -> merchantBasic.GetPointRuleDescribeResponse
	1,   // 225: merchantBasic.MerchantBasicService.CreatePointRule:output_type -> merchantBasic.Response
	1,   // 226: merchantBasic.MerchantBasicService.UpdatePointRule:output_type -> merchantBasic.Response
	1,   // 227: merchantBasic.MerchantBasicService.UpdatePointRuleStatus:output_type -> merchantBasic.Response
	198, // 228: merchantBasic.MerchantBasicService.ListPointRule:output_type -> merchantBasic.ListPointRuleResponse
	199, // 229: merchantBasic.MerchantBasicService.ShowPointRule:output_type -> merchantBasic.ShowPointRuleResponse
	200, // 230: merchantBasic.MerchantBasicService.GetPointRuleAllBranch:output_type -> merchantBasic.GetPointRuleAllBranchResponse
	201, // 231: merchantBasic.MerchantBasicService.GetBranchPointRule:output_type -> merchantBasic.GetBranchPointRuleResponse
	202, // 232: merchantBasic.MerchantBasicService.GetBranchPointRules:output_type -> merchantBasic.GetBranchPointRulesResponse
	1,   // 233: merchantBasic.MerchantBasicService.CreateMemberAddress:output_type -> merchantBasic.Response
	1,   // 234: merchantBasic.MerchantBasicService.UpdateMemberAddress:output_type -> merchantBasic.Response
	203, // 235: merchantBasic.MerchantBasicService.GetMemberAddress:output_type -> merchantBasic.GetMemberAddressResponse
	1,   // 236: merchantBasic.MerchantBasicService.SetMemberAddressDefault:output_type -> merchantBasic.Response
	204, // 237: merchantBasic.MerchantBasicService.GetMemberDefaultAddress:output_type -> merchantBasic.GetMemberDefaultAddressResponse
	1,   // 238: merchantBasic.MerchantBasicService.DeleteMemberAddress:output_type -> merchantBasic.Response
	205, // 239: merchantBasic.MerchantBasicService.ShowGrowthConfig:output_type -> merchantBasic.ShowGrowthConfigResponse
	1,   // 240: merchantBasic.MerchantBasicService.SaveGrowthConfig:output_type -> merchantBasic.Response
	1,   // 241: merchantBasic.MerchantBasicService.CreateGrowthRule:output_type -> merchantBasic.Response
	206, // 242: merchantBasic.MerchantBasicService.GetGrowthRules:output_type -> merchantBasic.GetGrowthRulesResponse
	207, // 243: merchantBasic.MerchantBasicService.ShowGrowthRule:output_type -> merchantBasic.ShowGrowthRuleResponse
	1,   // 244: merchantBasic.MerchantBasicService.UpdateGrowthRule:output_type -> merchantBasic.Response
	208, // 245: merchantBasic.MerchantBasicService.GetBranchesHasGrowthRule:output_type -> merchantBasic.GetBranchesHasGrowthRuleResponse
	209, // 246: merchantBasic.MerchantBasicService.GetBranchGrowthRule:output_type -> merchantBasic.GetBranchGrowthRuleResponse
	210, // 247: merchantBasic.MerchantBasicService.GetBranchConsumeRewardRule:output_type -> merchantBasic.GetBranchConsumeRewardRuleResponse
	211, // 248: merchantBasic.MerchantBasicService.GetOperateTypes:output_type -> merchantBasic.GetOperateTypesResponse
	212, // 249: merchantBasic.MerchantBasicService.GetActiveTypes:output_type -> merchantBasic.GetActiveTypesResponse
	213, // 250: merchantBasic.MerchantBasicService.SearchGoodsAndPackage:output_type -> merchantBasic.SearchGoodsAndPackageResponse
	214, // 251: merchantBasic.MerchantBasicService.SearchGoodsOrPackage:output_type -> merchantBasic.SearchGoodsOrPackageResponse
	215, // 252: merchantBasic.MerchantBasicService.ShowGoods:output_type -> merchantBasic.ShowGoodsResponse
	216, // 253: merchantBasic.MerchantBasicService.ShowPackage:output_type -> merchantBasic.ShowPackageResponse
	217, // 254: merchantBasic.MerchantBasicService.MultiGetGoodsAndPackages:output_type -> merchantBasic.MultiGetGoodsAndPackagesResponse
	218, // 255: merchantBasic.MerchantBasicService.GetRoomTypeGroups:output_type -> merchantBasic.GetRoomTypeGroupsResponse
	218, // 256: merchantBasic.MerchantBasicService.GetRoomTypeGroupsByRoomTypeID:output_type -> merchantBasic.GetRoomTypeGroupsResponse
	1,   // 257: merchantBasic.MerchantBasicService.UpdateMerchantLogo:output_type -> merchantBasic.Response
	1,   // 258: merchantBasic.MerchantBasicService.UpdateMerchantUserAgreement:output_type -> merchantBasic.Response
	219, // 259: merchantBasic.MerchantBasicService.ShowMerchant:output_type -> merchantBasic.ShowMerchantResponse
	130, // [130:260] is the sub-list for method output_type
	0,   // [0:130] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_proto_merchant_basic_merchant_basic_proto_init() }
func file_proto_merchant_basic_merchant_basic_proto_init() {
	if File_proto_merchant_basic_merchant_basic_proto != nil {
		return
	}
	file_proto_merchant_basic_branch_proto_init()
	file_proto_merchant_basic_operate_type_proto_init()
	file_proto_merchant_basic_active_type_proto_init()
	file_proto_merchant_basic_staff_proto_init()
	file_proto_merchant_basic_role_proto_init()
	file_proto_merchant_basic_permission_proto_init()
	file_proto_merchant_basic_member_proto_init()
	file_proto_merchant_basic_branch_tag_proto_init()
	file_proto_merchant_basic_invoice_proto_init()
	file_proto_merchant_basic_branch_appointment_proto_init()
	file_proto_merchant_basic_room_type_category_proto_init()
	file_proto_merchant_basic_room_type_proto_init()
	file_proto_merchant_basic_district_proto_init()
	file_proto_merchant_basic_payment_proto_init()
	file_proto_merchant_basic_member_behavior_proto_init()
	file_proto_merchant_basic_brand_proto_init()
	file_proto_merchant_basic_branch_business_proto_init()
	file_proto_merchant_basic_wechat_member_proto_init()
	file_proto_merchant_basic_point_proto_init()
	file_proto_merchant_basic_member_address_proto_init()
	file_proto_merchant_basic_growth_config_proto_init()
	file_proto_merchant_basic_growth_rule_proto_init()
	file_proto_merchant_basic_goods_and_package_proto_init()
	file_proto_merchant_basic_room_type_group_proto_init()
	file_proto_merchant_basic_merchant_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_merchant_basic_merchant_basic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merchant_basic_merchant_basic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merchant_basic_merchant_basic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_merchant_basic_merchant_basic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_merchant_basic_merchant_basic_proto_goTypes,
		DependencyIndexes: file_proto_merchant_basic_merchant_basic_proto_depIdxs,
		MessageInfos:      file_proto_merchant_basic_merchant_basic_proto_msgTypes,
	}.Build()
	File_proto_merchant_basic_merchant_basic_proto = out.File
	file_proto_merchant_basic_merchant_basic_proto_rawDesc = nil
	file_proto_merchant_basic_merchant_basic_proto_goTypes = nil
	file_proto_merchant_basic_merchant_basic_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MerchantBasicServiceClient is the client API for MerchantBasicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantBasicServiceClient interface {
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error)
	GetBranches(ctx context.Context, in *GetBranchesRequest, opts ...grpc.CallOption) (*GetBranchesResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
	ShowBranch(ctx context.Context, in *ShowBranchRequest, opts ...grpc.CallOption) (*ShowBranchResponse, error)
	UpdateBranchStatus(ctx context.Context, in *UpdateBranchStatusRequest, opts ...grpc.CallOption) (*UpdateBranchStatusResponse, error)
	UpdateBranchAccount(ctx context.Context, in *UpdateBranchAccountRequest, opts ...grpc.CallOption) (*UpdateBranchAccountResponse, error)
	GetBranchesByTagIDs(ctx context.Context, in *GetBranchesByTagIDsRequest, opts ...grpc.CallOption) (*GetBranchesByTagIDsResponse, error)
	CreateStaff(ctx context.Context, in *CreateStaffRequest, opts ...grpc.CallOption) (*CreateStaffResponse, error)
	UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffResponse, error)
	GetStaffs(ctx context.Context, in *GetStaffsRequest, opts ...grpc.CallOption) (*GetStaffsResponse, error)
	DeleteStaff(ctx context.Context, in *DeleteStaffRequest, opts ...grpc.CallOption) (*DeleteStaffResponse, error)
	ShowStaff(ctx context.Context, in *ShowStaffRequest, opts ...grpc.CallOption) (*ShowStaffResponse, error)
	ShowStaffByPhone(ctx context.Context, in *ShowStaffByPhoneRequest, opts ...grpc.CallOption) (*ShowStaffByPhoneResponse, error)
	UpdateStaffStatus(ctx context.Context, in *UpdateStaffStatusRequest, opts ...grpc.CallOption) (*UpdateStaffStatusResponse, error)
	GetStaffsByRoleID(ctx context.Context, in *GetStaffsByRoleIDRequest, opts ...grpc.CallOption) (*GetStaffsByRoleIDResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusRequest, opts ...grpc.CallOption) (*UpdateRoleStatusResponse, error)
	GetRoleHistories(ctx context.Context, in *GetRoleHistoriesRequest, opts ...grpc.CallOption) (*GetRoleHistoriesResponse, error)
	ShowRole(ctx context.Context, in *ShowRoleRequest, opts ...grpc.CallOption) (*ShowRoleResponse, error)
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	CreatePermissions(ctx context.Context, in *CreatePermissionsRequest, opts ...grpc.CallOption) (*CreatePermissionsResponse, error)
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	GetMembersByIDs(ctx context.Context, in *GetMembersByIDsRequest, opts ...grpc.CallOption) (*GetMembersByIDsResponse, error)
	ShowMember(ctx context.Context, in *ShowMemberRequest, opts ...grpc.CallOption) (*ShowMemberResponse, error)
	ShowMemberByAccuratePhone(ctx context.Context, in *ShowMemberByAccuratePhoneRequest, opts ...grpc.CallOption) (*ShowMemberByAccuratePhoneResponse, error)
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error)
	GetBirthdayMembers(ctx context.Context, in *GetBirthdayMembersRequest, opts ...grpc.CallOption) (*GetBirthdayMembersResponse, error)
	CreateOrUpdateCallingMember(ctx context.Context, in *CreateOrUpdateCallingMemberRequest, opts ...grpc.CallOption) (*CreateOrUpdateCallingMemberResponse, error)
	GetMembersByPhoneSuffix(ctx context.Context, in *GetMembersByPhoneSuffixRequest, opts ...grpc.CallOption) (*GetMembersByPhoneSuffixResponse, error)
	CreateWechatMember(ctx context.Context, in *CreateWechatMemberRequest, opts ...grpc.CallOption) (*CreateWechatMemberResponse, error)
	UpdateMemberBranchInfo(ctx context.Context, in *UpdateMemberBranchInfoRequest, opts ...grpc.CallOption) (*Response, error)
	SearchMember(ctx context.Context, in *SearchMemberRequest, opts ...grpc.CallOption) (*SearchMemberResponse, error)
	// 推送券对象
	GetCouponMemberIDs(ctx context.Context, in *GetCouponMemberIDsRequest, opts ...grpc.CallOption) (*GetCouponMemberIDsResponse, error)
	// 推送券对象数量
	CountCouponMemberIDs(ctx context.Context, in *GetCouponMemberIDsRequest, opts ...grpc.CallOption) (*CountCouponMemberIDsResponse, error)
	CreateBranchTag(ctx context.Context, in *CreateBranchTagRequest, opts ...grpc.CallOption) (*CreateBranchTagResponse, error)
	GetBranchTags(ctx context.Context, in *GetBranchTagsRequest, opts ...grpc.CallOption) (*GetBranchTagsResponse, error)
	UpdateBranchTag(ctx context.Context, in *UpdateBranchTagRequest, opts ...grpc.CallOption) (*UpdateBranchTagResponse, error)
	UpdateBranchTagStatus(ctx context.Context, in *UpdateBranchTagStatusRequest, opts ...grpc.CallOption) (*UpdateBranchTagStatusResponse, error)
	GetBranchTagsByIDs(ctx context.Context, in *GetBranchTagsByIDsRequest, opts ...grpc.CallOption) (*GetBranchTagsByIDsResponse, error)
	ShowBranchTag(ctx context.Context, in *ShowBranchTagRequest, opts ...grpc.CallOption) (*ShowBranchTagResponse, error)
	SaveBranchAppointment(ctx context.Context, in *SaveBranchAppointmentRequest, opts ...grpc.CallOption) (*SaveBranchAppointmentResponse, error)
	ShowBranchAppointment(ctx context.Context, in *ShowBranchAppointmentRequest, opts ...grpc.CallOption) (*ShowBranchAppointmentResponse, error)
	UpdateBranchAppointmentRoomType(ctx context.Context, in *UpdateBranchAppointmentRoomTypeRequest, opts ...grpc.CallOption) (*UpdateBranchAppointmentRoomTypeResponse, error)
	CreateRoomTypeCategory(ctx context.Context, in *CreateRoomTypeCategoryRequest, opts ...grpc.CallOption) (*CreateRoomTypeCategoryResponse, error)
	CreateRoomType(ctx context.Context, in *CreateRoomTypeRequest, opts ...grpc.CallOption) (*CreateRoomTypeResponse, error)
	GetRoomTypeCategories(ctx context.Context, in *GetRoomTypeCategoriesRequest, opts ...grpc.CallOption) (*GetRoomTypeCategoriesResponse, error)
	GetRoomTypes(ctx context.Context, in *GetRoomTypesRequest, opts ...grpc.CallOption) (*GetRoomTypesResponse, error)
	GetRoomTypesByIDs(ctx context.Context, in *GetRoomTypesByIDsRequest, opts ...grpc.CallOption) (*GetRoomTypesByIDsResponse, error)
	UpdateRoomTypeCategory(ctx context.Context, in *UpdateRoomTypeCategoryRequest, opts ...grpc.CallOption) (*UpdateRoomTypeCategoryResponse, error)
	UpdateRoomType(ctx context.Context, in *UpdateRoomTypeRequest, opts ...grpc.CallOption) (*UpdateRoomTypeResponse, error)
	ShowBranchAppointmentBusinessTime(ctx context.Context, in *ShowBranchAppointmentBusinessTimeRequest, opts ...grpc.CallOption) (*ShowBranchAppointmentBusinessTimeResponse, error)
	ShowRoomType(ctx context.Context, in *ShowRoomTypeRequest, opts ...grpc.CallOption) (*ShowRoomTypeResponse, error)
	UpdateRoomTypeStatus(ctx context.Context, in *UpdateRoomTypeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*CreateDistrictResponse, error)
	UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*UpdateDistrictResponse, error)
	GetDistricts(ctx context.Context, in *GetDistrictsRequest, opts ...grpc.CallOption) (*GetDistrictsResponse, error)
	GetBranchWithSubMchID(ctx context.Context, in *GetBranchWithSubMchIDRequest, opts ...grpc.CallOption) (*GetBranchWithSubMchIDResponse, error)
	SetBranchSubMchID(ctx context.Context, in *SetBranchSubMchIDRequest, opts ...grpc.CallOption) (*Response, error)
	GetWechatPaySetting(ctx context.Context, in *GetWechatPaySettingRequest, opts ...grpc.CallOption) (*GetWechatPaySettingResponse, error)
	GetWechatPaySettingByAppID(ctx context.Context, in *GetWechatPaySettingByAppIDRequest, opts ...grpc.CallOption) (*GetWechatPaySettingResponse, error)
	SetWechatPaySetting(ctx context.Context, in *SetWechatPaySettingRequest, opts ...grpc.CallOption) (*Response, error)
	GetBranchWechatPaymentSetting(ctx context.Context, in *GetBranchWechatPaymentSettingRequest, opts ...grpc.CallOption) (*GetBranchWechatPaymentSettingResponse, error)
	CreateMemberBehavior(ctx context.Context, in *CreateMemberBehaviorRequest, opts ...grpc.CallOption) (*Response, error)
	GetMemberBehaviors(ctx context.Context, in *GetMemberBehaviorsRequest, opts ...grpc.CallOption) (*GetMemberBehaviorsResponse, error)
	GetBrands(ctx context.Context, in *GetBrandsRequest, opts ...grpc.CallOption) (*GetBrandsResponse, error)
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBrandStatus(ctx context.Context, in *UpdateBrandStatusRequest, opts ...grpc.CallOption) (*Response, error)
	CreateBranchBusinessSpecial(ctx context.Context, in *CreateBranchBusinessSpecialRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBranchBusinessSpecial(ctx context.Context, in *UpdateBranchBusinessSpecialRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBranchBusinessNormal(ctx context.Context, in *UpdateBranchBusinessNormalRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBranchBusinessStatus(ctx context.Context, in *UpdateBranchBusinessStatusRequest, opts ...grpc.CallOption) (*Response, error)
	GetBranchBusinesses(ctx context.Context, in *GetBranchBusinessesRequest, opts ...grpc.CallOption) (*GetBranchBusinessesResponse, error)
	CreateOrUpdateWechatUser(ctx context.Context, in *CreateOrUpdateWechatUserRequest, opts ...grpc.CallOption) (*CreateOrUpdateWechatUserResponse, error)
	ShowWechatUser(ctx context.Context, in *ShowWechatUserRequest, opts ...grpc.CallOption) (*ShowWechatUserResponse, error)
	GetWechatUsers(ctx context.Context, in *GetWechatUsersRequest, opts ...grpc.CallOption) (*GetWechatUsersResponse, error)
	// 获取门店指定时间最近一次营业日
	GetBranchLatelyBusiness(ctx context.Context, in *GetBranchLatelyBusinessRequest, opts ...grpc.CallOption) (*GetBranchLatelyBusinessResponse, error)
	ShowWechatUserByMember(ctx context.Context, in *ShowWechatUserByMemberRequest, opts ...grpc.CallOption) (*ShowWechatUserByMemberResponse, error)
	// CreateConsumeCategory 创建积分类型
	CreateConsumeCategory(ctx context.Context, in *CreateConsumeCategoryRequest, opts ...grpc.CallOption) (*Response, error)
	// ListConsumeCategory 积分类型列表
	ListConsumeCategory(ctx context.Context, in *ListConsumeCategoryRequest, opts ...grpc.CallOption) (*ListConsumeCategoryResponse, error)
	// UpdateConsumeCategory 修改积分类型
	UpdateConsumeCategory(ctx context.Context, in *UpdateConsumeCategoryRequest, opts ...grpc.CallOption) (*Response, error)
	// UpdateConsumeCategoryStatus 修改积分类型状态
	UpdateConsumeCategoryStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Response, error)
	// ShowConsumeCategory 积分类型详情
	ShowConsumeCategory(ctx context.Context, in *ShowConsumeCategoryRequest, opts ...grpc.CallOption) (*ShowConsumeCategoryResponse, error)
	// GetConsumeCategoryTypes 获取消费类型对应分组
	GetConsumeCategoryTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConsumeCategoryTypesResponse, error)
	// SetPointRuleDescribe 设置积分规则说明
	SetPointRuleDescribe(ctx context.Context, in *SetPointRuleDescribeRequest, opts ...grpc.CallOption) (*Response, error)
	// GetPointRuleDescribe 获取积分规则说明
	GetPointRuleDescribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPointRuleDescribeResponse, error)
	// CreatePointRule 创建积分规则
	CreatePointRule(ctx context.Context, in *CreatePointRuleRequest, opts ...grpc.CallOption) (*Response, error)
	// UpdatePointRule 修改积分规则
	UpdatePointRule(ctx context.Context, in *UpdatePointRuleRequest, opts ...grpc.CallOption) (*Response, error)
	// UpdatePointRuleStatus 修改积分规则状态
	UpdatePointRuleStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Response, error)
	// ListPointRuleRequest 积分规则列表
	ListPointRule(ctx context.Context, in *ListPointRuleRequest, opts ...grpc.CallOption) (*ListPointRuleResponse, error)
	// ShowPointRule 积分规则详情
	ShowPointRule(ctx context.Context, in *ShowPointRuleRequest, opts ...grpc.CallOption) (*ShowPointRuleResponse, error)
	// GetPointRuleAllBranch 获取所有已设置积分规则的门店
	GetPointRuleAllBranch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPointRuleAllBranchResponse, error)
	// GetBranchPointRule 获取门店积分规则
	GetBranchPointRule(ctx context.Context, in *GetBranchPointRuleRequest, opts ...grpc.CallOption) (*GetBranchPointRuleResponse, error)
	// GetBranchPointRules 获取门店所有类型的积分规则
	GetBranchPointRules(ctx context.Context, in *GetBranchPointRulesRequest, opts ...grpc.CallOption) (*GetBranchPointRulesResponse, error)
	// CreateMemberAddress 新增用户地址
	CreateMemberAddress(ctx context.Context, in *MemberAddress, opts ...grpc.CallOption) (*Response, error)
	// UpdateMemberAddress 修改用户地址
	UpdateMemberAddress(ctx context.Context, in *MemberAddress, opts ...grpc.CallOption) (*Response, error)
	// GetMemberAddress 获取用户地址
	GetMemberAddress(ctx context.Context, in *GetMemberAddressRequest, opts ...grpc.CallOption) (*GetMemberAddressResponse, error)
	// SetMemberAddressDefault 标记为默认地址
	SetMemberAddressDefault(ctx context.Context, in *SetMemberAddressDefaultRequest, opts ...grpc.CallOption) (*Response, error)
	// GetMemberDefaultAddress 获取默认地址
	GetMemberDefaultAddress(ctx context.Context, in *GetMemberDefaultAddressRequest, opts ...grpc.CallOption) (*GetMemberDefaultAddressResponse, error)
	// DeleteMemberAddress 删除地址
	DeleteMemberAddress(ctx context.Context, in *DeleteMemberAddressRequest, opts ...grpc.CallOption) (*Response, error)
	//成长值
	// ShowGrowthConfig 查询
	ShowGrowthConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowGrowthConfigResponse, error)
	// SaveGrowthConfig 保存
	SaveGrowthConfig(ctx context.Context, in *SaveGrowthConfigRequest, opts ...grpc.CallOption) (*Response, error)
	// CreateGrowthRule 新建
	CreateGrowthRule(ctx context.Context, in *CreateGrowthRuleRequest, opts ...grpc.CallOption) (*Response, error)
	// GetGrowthRules 列表
	GetGrowthRules(ctx context.Context, in *GetGrowthRulesRequest, opts ...grpc.CallOption) (*GetGrowthRulesResponse, error)
	// ShowGrowthRule 详情
	ShowGrowthRule(ctx context.Context, in *ShowGrowthRuleRequest, opts ...grpc.CallOption) (*ShowGrowthRuleResponse, error)
	// UpdateGrowthRule 更新
	UpdateGrowthRule(ctx context.Context, in *UpdateGrowthRuleRequest, opts ...grpc.CallOption) (*Response, error)
	// GetBranchesHasGrowthRule 已设置了规则的门店列表
	GetBranchesHasGrowthRule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBranchesHasGrowthRuleResponse, error)
	// GetBranchGrowthRule 获取门店的成长值规则
	GetBranchGrowthRule(ctx context.Context, in *GetBranchGrowthRuleRequest, opts ...grpc.CallOption) (*GetBranchGrowthRuleResponse, error)
	//消费奖励规则
	GetBranchConsumeRewardRule(ctx context.Context, in *GetBranchConsumeRewardRuleRequest, opts ...grpc.CallOption) (*GetBranchConsumeRewardRuleResponse, error)
	//operateType
	GetOperateTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetOperateTypesResponse, error)
	GetActiveTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetActiveTypesResponse, error)
	SearchGoodsAndPackage(ctx context.Context, in *SearchGoodsAndPackageRequest, opts ...grpc.CallOption) (*SearchGoodsAndPackageResponse, error)
	SearchGoodsOrPackage(ctx context.Context, in *SearchGoodsOrPackageRequest, opts ...grpc.CallOption) (*SearchGoodsOrPackageResponse, error)
	ShowGoods(ctx context.Context, in *ShowGoodsRequest, opts ...grpc.CallOption) (*ShowGoodsResponse, error)
	ShowPackage(ctx context.Context, in *ShowPackageRequest, opts ...grpc.CallOption) (*ShowPackageResponse, error)
	MultiGetGoodsAndPackages(ctx context.Context, in *MultiGetGoodsAndPackagesRequest, opts ...grpc.CallOption) (*MultiGetGoodsAndPackagesResponse, error)
	//roomTypeGroup
	GetRoomTypeGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRoomTypeGroupsResponse, error)
	GetRoomTypeGroupsByRoomTypeID(ctx context.Context, in *GetRoomTypeGroupsByRoomTypeIDRequest, opts ...grpc.CallOption) (*GetRoomTypeGroupsResponse, error)
	UpdateMerchantLogo(ctx context.Context, in *UpdateMerchantLogoRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateMerchantUserAgreement(ctx context.Context, in *UpdateMerchantUserAgreementRequest, opts ...grpc.CallOption) (*Response, error)
	ShowMerchant(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowMerchantResponse, error)
}

type merchantBasicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantBasicServiceClient(cc grpc.ClientConnInterface) MerchantBasicServiceClient {
	return &merchantBasicServiceClient{cc}
}

func (c *merchantBasicServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error) {
	out := new(UpdateBranchResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranches(ctx context.Context, in *GetBranchesRequest, opts ...grpc.CallOption) (*GetBranchesResponse, error) {
	out := new(GetBranchesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowBranch(ctx context.Context, in *ShowBranchRequest, opts ...grpc.CallOption) (*ShowBranchResponse, error) {
	out := new(ShowBranchResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchStatus(ctx context.Context, in *UpdateBranchStatusRequest, opts ...grpc.CallOption) (*UpdateBranchStatusResponse, error) {
	out := new(UpdateBranchStatusResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchAccount(ctx context.Context, in *UpdateBranchAccountRequest, opts ...grpc.CallOption) (*UpdateBranchAccountResponse, error) {
	out := new(UpdateBranchAccountResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchesByTagIDs(ctx context.Context, in *GetBranchesByTagIDsRequest, opts ...grpc.CallOption) (*GetBranchesByTagIDsResponse, error) {
	out := new(GetBranchesByTagIDsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchesByTagIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateStaff(ctx context.Context, in *CreateStaffRequest, opts ...grpc.CallOption) (*CreateStaffResponse, error) {
	out := new(CreateStaffResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffResponse, error) {
	out := new(UpdateStaffResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetStaffs(ctx context.Context, in *GetStaffsRequest, opts ...grpc.CallOption) (*GetStaffsResponse, error) {
	out := new(GetStaffsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetStaffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) DeleteStaff(ctx context.Context, in *DeleteStaffRequest, opts ...grpc.CallOption) (*DeleteStaffResponse, error) {
	out := new(DeleteStaffResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/DeleteStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowStaff(ctx context.Context, in *ShowStaffRequest, opts ...grpc.CallOption) (*ShowStaffResponse, error) {
	out := new(ShowStaffResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowStaffByPhone(ctx context.Context, in *ShowStaffByPhoneRequest, opts ...grpc.CallOption) (*ShowStaffByPhoneResponse, error) {
	out := new(ShowStaffByPhoneResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowStaffByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateStaffStatus(ctx context.Context, in *UpdateStaffStatusRequest, opts ...grpc.CallOption) (*UpdateStaffStatusResponse, error) {
	out := new(UpdateStaffStatusResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateStaffStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetStaffsByRoleID(ctx context.Context, in *GetStaffsByRoleIDRequest, opts ...grpc.CallOption) (*GetStaffsByRoleIDResponse, error) {
	out := new(GetStaffsByRoleIDResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetStaffsByRoleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusRequest, opts ...grpc.CallOption) (*UpdateRoleStatusResponse, error) {
	out := new(UpdateRoleStatusResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateRoleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoleHistories(ctx context.Context, in *GetRoleHistoriesRequest, opts ...grpc.CallOption) (*GetRoleHistoriesResponse, error) {
	out := new(GetRoleHistoriesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoleHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowRole(ctx context.Context, in *ShowRoleRequest, opts ...grpc.CallOption) (*ShowRoleResponse, error) {
	out := new(ShowRoleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreatePermissions(ctx context.Context, in *CreatePermissionsRequest, opts ...grpc.CallOption) (*CreatePermissionsResponse, error) {
	out := new(CreatePermissionsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreatePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetMembersByIDs(ctx context.Context, in *GetMembersByIDsRequest, opts ...grpc.CallOption) (*GetMembersByIDsResponse, error) {
	out := new(GetMembersByIDsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetMembersByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowMember(ctx context.Context, in *ShowMemberRequest, opts ...grpc.CallOption) (*ShowMemberResponse, error) {
	out := new(ShowMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowMemberByAccuratePhone(ctx context.Context, in *ShowMemberByAccuratePhoneRequest, opts ...grpc.CallOption) (*ShowMemberByAccuratePhoneResponse, error) {
	out := new(ShowMemberByAccuratePhoneResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowMemberByAccuratePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error) {
	out := new(UpdateMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBirthdayMembers(ctx context.Context, in *GetBirthdayMembersRequest, opts ...grpc.CallOption) (*GetBirthdayMembersResponse, error) {
	out := new(GetBirthdayMembersResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBirthdayMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateOrUpdateCallingMember(ctx context.Context, in *CreateOrUpdateCallingMemberRequest, opts ...grpc.CallOption) (*CreateOrUpdateCallingMemberResponse, error) {
	out := new(CreateOrUpdateCallingMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateOrUpdateCallingMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetMembersByPhoneSuffix(ctx context.Context, in *GetMembersByPhoneSuffixRequest, opts ...grpc.CallOption) (*GetMembersByPhoneSuffixResponse, error) {
	out := new(GetMembersByPhoneSuffixResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetMembersByPhoneSuffix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateWechatMember(ctx context.Context, in *CreateWechatMemberRequest, opts ...grpc.CallOption) (*CreateWechatMemberResponse, error) {
	out := new(CreateWechatMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateWechatMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateMemberBranchInfo(ctx context.Context, in *UpdateMemberBranchInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateMemberBranchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SearchMember(ctx context.Context, in *SearchMemberRequest, opts ...grpc.CallOption) (*SearchMemberResponse, error) {
	out := new(SearchMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SearchMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetCouponMemberIDs(ctx context.Context, in *GetCouponMemberIDsRequest, opts ...grpc.CallOption) (*GetCouponMemberIDsResponse, error) {
	out := new(GetCouponMemberIDsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetCouponMemberIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CountCouponMemberIDs(ctx context.Context, in *GetCouponMemberIDsRequest, opts ...grpc.CallOption) (*CountCouponMemberIDsResponse, error) {
	out := new(CountCouponMemberIDsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CountCouponMemberIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateBranchTag(ctx context.Context, in *CreateBranchTagRequest, opts ...grpc.CallOption) (*CreateBranchTagResponse, error) {
	out := new(CreateBranchTagResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateBranchTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchTags(ctx context.Context, in *GetBranchTagsRequest, opts ...grpc.CallOption) (*GetBranchTagsResponse, error) {
	out := new(GetBranchTagsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchTag(ctx context.Context, in *UpdateBranchTagRequest, opts ...grpc.CallOption) (*UpdateBranchTagResponse, error) {
	out := new(UpdateBranchTagResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchTagStatus(ctx context.Context, in *UpdateBranchTagStatusRequest, opts ...grpc.CallOption) (*UpdateBranchTagStatusResponse, error) {
	out := new(UpdateBranchTagStatusResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchTagStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchTagsByIDs(ctx context.Context, in *GetBranchTagsByIDsRequest, opts ...grpc.CallOption) (*GetBranchTagsByIDsResponse, error) {
	out := new(GetBranchTagsByIDsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchTagsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowBranchTag(ctx context.Context, in *ShowBranchTagRequest, opts ...grpc.CallOption) (*ShowBranchTagResponse, error) {
	out := new(ShowBranchTagResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowBranchTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SaveBranchAppointment(ctx context.Context, in *SaveBranchAppointmentRequest, opts ...grpc.CallOption) (*SaveBranchAppointmentResponse, error) {
	out := new(SaveBranchAppointmentResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SaveBranchAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowBranchAppointment(ctx context.Context, in *ShowBranchAppointmentRequest, opts ...grpc.CallOption) (*ShowBranchAppointmentResponse, error) {
	out := new(ShowBranchAppointmentResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowBranchAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchAppointmentRoomType(ctx context.Context, in *UpdateBranchAppointmentRoomTypeRequest, opts ...grpc.CallOption) (*UpdateBranchAppointmentRoomTypeResponse, error) {
	out := new(UpdateBranchAppointmentRoomTypeResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchAppointmentRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateRoomTypeCategory(ctx context.Context, in *CreateRoomTypeCategoryRequest, opts ...grpc.CallOption) (*CreateRoomTypeCategoryResponse, error) {
	out := new(CreateRoomTypeCategoryResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateRoomTypeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateRoomType(ctx context.Context, in *CreateRoomTypeRequest, opts ...grpc.CallOption) (*CreateRoomTypeResponse, error) {
	out := new(CreateRoomTypeResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoomTypeCategories(ctx context.Context, in *GetRoomTypeCategoriesRequest, opts ...grpc.CallOption) (*GetRoomTypeCategoriesResponse, error) {
	out := new(GetRoomTypeCategoriesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoomTypeCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoomTypes(ctx context.Context, in *GetRoomTypesRequest, opts ...grpc.CallOption) (*GetRoomTypesResponse, error) {
	out := new(GetRoomTypesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoomTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoomTypesByIDs(ctx context.Context, in *GetRoomTypesByIDsRequest, opts ...grpc.CallOption) (*GetRoomTypesByIDsResponse, error) {
	out := new(GetRoomTypesByIDsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoomTypesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateRoomTypeCategory(ctx context.Context, in *UpdateRoomTypeCategoryRequest, opts ...grpc.CallOption) (*UpdateRoomTypeCategoryResponse, error) {
	out := new(UpdateRoomTypeCategoryResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateRoomTypeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateRoomType(ctx context.Context, in *UpdateRoomTypeRequest, opts ...grpc.CallOption) (*UpdateRoomTypeResponse, error) {
	out := new(UpdateRoomTypeResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowBranchAppointmentBusinessTime(ctx context.Context, in *ShowBranchAppointmentBusinessTimeRequest, opts ...grpc.CallOption) (*ShowBranchAppointmentBusinessTimeResponse, error) {
	out := new(ShowBranchAppointmentBusinessTimeResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowBranchAppointmentBusinessTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowRoomType(ctx context.Context, in *ShowRoomTypeRequest, opts ...grpc.CallOption) (*ShowRoomTypeResponse, error) {
	out := new(ShowRoomTypeResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateRoomTypeStatus(ctx context.Context, in *UpdateRoomTypeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateRoomTypeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*CreateDistrictResponse, error) {
	out := new(CreateDistrictResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*UpdateDistrictResponse, error) {
	out := new(UpdateDistrictResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetDistricts(ctx context.Context, in *GetDistrictsRequest, opts ...grpc.CallOption) (*GetDistrictsResponse, error) {
	out := new(GetDistrictsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetDistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchWithSubMchID(ctx context.Context, in *GetBranchWithSubMchIDRequest, opts ...grpc.CallOption) (*GetBranchWithSubMchIDResponse, error) {
	out := new(GetBranchWithSubMchIDResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchWithSubMchID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SetBranchSubMchID(ctx context.Context, in *SetBranchSubMchIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SetBranchSubMchID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetWechatPaySetting(ctx context.Context, in *GetWechatPaySettingRequest, opts ...grpc.CallOption) (*GetWechatPaySettingResponse, error) {
	out := new(GetWechatPaySettingResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetWechatPaySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetWechatPaySettingByAppID(ctx context.Context, in *GetWechatPaySettingByAppIDRequest, opts ...grpc.CallOption) (*GetWechatPaySettingResponse, error) {
	out := new(GetWechatPaySettingResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetWechatPaySettingByAppID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SetWechatPaySetting(ctx context.Context, in *SetWechatPaySettingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SetWechatPaySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchWechatPaymentSetting(ctx context.Context, in *GetBranchWechatPaymentSettingRequest, opts ...grpc.CallOption) (*GetBranchWechatPaymentSettingResponse, error) {
	out := new(GetBranchWechatPaymentSettingResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchWechatPaymentSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateMemberBehavior(ctx context.Context, in *CreateMemberBehaviorRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateMemberBehavior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetMemberBehaviors(ctx context.Context, in *GetMemberBehaviorsRequest, opts ...grpc.CallOption) (*GetMemberBehaviorsResponse, error) {
	out := new(GetMemberBehaviorsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetMemberBehaviors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBrands(ctx context.Context, in *GetBrandsRequest, opts ...grpc.CallOption) (*GetBrandsResponse, error) {
	out := new(GetBrandsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBrandStatus(ctx context.Context, in *UpdateBrandStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBrandStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateBranchBusinessSpecial(ctx context.Context, in *CreateBranchBusinessSpecialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateBranchBusinessSpecial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchBusinessSpecial(ctx context.Context, in *UpdateBranchBusinessSpecialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchBusinessSpecial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchBusinessNormal(ctx context.Context, in *UpdateBranchBusinessNormalRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchBusinessNormal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateBranchBusinessStatus(ctx context.Context, in *UpdateBranchBusinessStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateBranchBusinessStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchBusinesses(ctx context.Context, in *GetBranchBusinessesRequest, opts ...grpc.CallOption) (*GetBranchBusinessesResponse, error) {
	out := new(GetBranchBusinessesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateOrUpdateWechatUser(ctx context.Context, in *CreateOrUpdateWechatUserRequest, opts ...grpc.CallOption) (*CreateOrUpdateWechatUserResponse, error) {
	out := new(CreateOrUpdateWechatUserResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateOrUpdateWechatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowWechatUser(ctx context.Context, in *ShowWechatUserRequest, opts ...grpc.CallOption) (*ShowWechatUserResponse, error) {
	out := new(ShowWechatUserResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowWechatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetWechatUsers(ctx context.Context, in *GetWechatUsersRequest, opts ...grpc.CallOption) (*GetWechatUsersResponse, error) {
	out := new(GetWechatUsersResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetWechatUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchLatelyBusiness(ctx context.Context, in *GetBranchLatelyBusinessRequest, opts ...grpc.CallOption) (*GetBranchLatelyBusinessResponse, error) {
	out := new(GetBranchLatelyBusinessResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchLatelyBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowWechatUserByMember(ctx context.Context, in *ShowWechatUserByMemberRequest, opts ...grpc.CallOption) (*ShowWechatUserByMemberResponse, error) {
	out := new(ShowWechatUserByMemberResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowWechatUserByMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateConsumeCategory(ctx context.Context, in *CreateConsumeCategoryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateConsumeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ListConsumeCategory(ctx context.Context, in *ListConsumeCategoryRequest, opts ...grpc.CallOption) (*ListConsumeCategoryResponse, error) {
	out := new(ListConsumeCategoryResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ListConsumeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateConsumeCategory(ctx context.Context, in *UpdateConsumeCategoryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateConsumeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateConsumeCategoryStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateConsumeCategoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowConsumeCategory(ctx context.Context, in *ShowConsumeCategoryRequest, opts ...grpc.CallOption) (*ShowConsumeCategoryResponse, error) {
	out := new(ShowConsumeCategoryResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowConsumeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetConsumeCategoryTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConsumeCategoryTypesResponse, error) {
	out := new(GetConsumeCategoryTypesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetConsumeCategoryTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SetPointRuleDescribe(ctx context.Context, in *SetPointRuleDescribeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SetPointRuleDescribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetPointRuleDescribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPointRuleDescribeResponse, error) {
	out := new(GetPointRuleDescribeResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetPointRuleDescribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreatePointRule(ctx context.Context, in *CreatePointRuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreatePointRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdatePointRule(ctx context.Context, in *UpdatePointRuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdatePointRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdatePointRuleStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdatePointRuleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ListPointRule(ctx context.Context, in *ListPointRuleRequest, opts ...grpc.CallOption) (*ListPointRuleResponse, error) {
	out := new(ListPointRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ListPointRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowPointRule(ctx context.Context, in *ShowPointRuleRequest, opts ...grpc.CallOption) (*ShowPointRuleResponse, error) {
	out := new(ShowPointRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowPointRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetPointRuleAllBranch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPointRuleAllBranchResponse, error) {
	out := new(GetPointRuleAllBranchResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetPointRuleAllBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchPointRule(ctx context.Context, in *GetBranchPointRuleRequest, opts ...grpc.CallOption) (*GetBranchPointRuleResponse, error) {
	out := new(GetBranchPointRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchPointRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchPointRules(ctx context.Context, in *GetBranchPointRulesRequest, opts ...grpc.CallOption) (*GetBranchPointRulesResponse, error) {
	out := new(GetBranchPointRulesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchPointRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateMemberAddress(ctx context.Context, in *MemberAddress, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateMemberAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateMemberAddress(ctx context.Context, in *MemberAddress, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateMemberAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetMemberAddress(ctx context.Context, in *GetMemberAddressRequest, opts ...grpc.CallOption) (*GetMemberAddressResponse, error) {
	out := new(GetMemberAddressResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetMemberAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SetMemberAddressDefault(ctx context.Context, in *SetMemberAddressDefaultRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SetMemberAddressDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetMemberDefaultAddress(ctx context.Context, in *GetMemberDefaultAddressRequest, opts ...grpc.CallOption) (*GetMemberDefaultAddressResponse, error) {
	out := new(GetMemberDefaultAddressResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetMemberDefaultAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) DeleteMemberAddress(ctx context.Context, in *DeleteMemberAddressRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/DeleteMemberAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowGrowthConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowGrowthConfigResponse, error) {
	out := new(ShowGrowthConfigResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowGrowthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SaveGrowthConfig(ctx context.Context, in *SaveGrowthConfigRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SaveGrowthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) CreateGrowthRule(ctx context.Context, in *CreateGrowthRuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/CreateGrowthRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetGrowthRules(ctx context.Context, in *GetGrowthRulesRequest, opts ...grpc.CallOption) (*GetGrowthRulesResponse, error) {
	out := new(GetGrowthRulesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetGrowthRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowGrowthRule(ctx context.Context, in *ShowGrowthRuleRequest, opts ...grpc.CallOption) (*ShowGrowthRuleResponse, error) {
	out := new(ShowGrowthRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowGrowthRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateGrowthRule(ctx context.Context, in *UpdateGrowthRuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateGrowthRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchesHasGrowthRule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBranchesHasGrowthRuleResponse, error) {
	out := new(GetBranchesHasGrowthRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchesHasGrowthRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchGrowthRule(ctx context.Context, in *GetBranchGrowthRuleRequest, opts ...grpc.CallOption) (*GetBranchGrowthRuleResponse, error) {
	out := new(GetBranchGrowthRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchGrowthRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetBranchConsumeRewardRule(ctx context.Context, in *GetBranchConsumeRewardRuleRequest, opts ...grpc.CallOption) (*GetBranchConsumeRewardRuleResponse, error) {
	out := new(GetBranchConsumeRewardRuleResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetBranchConsumeRewardRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetOperateTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetOperateTypesResponse, error) {
	out := new(GetOperateTypesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetOperateTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetActiveTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetActiveTypesResponse, error) {
	out := new(GetActiveTypesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetActiveTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SearchGoodsAndPackage(ctx context.Context, in *SearchGoodsAndPackageRequest, opts ...grpc.CallOption) (*SearchGoodsAndPackageResponse, error) {
	out := new(SearchGoodsAndPackageResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SearchGoodsAndPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) SearchGoodsOrPackage(ctx context.Context, in *SearchGoodsOrPackageRequest, opts ...grpc.CallOption) (*SearchGoodsOrPackageResponse, error) {
	out := new(SearchGoodsOrPackageResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/SearchGoodsOrPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowGoods(ctx context.Context, in *ShowGoodsRequest, opts ...grpc.CallOption) (*ShowGoodsResponse, error) {
	out := new(ShowGoodsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowPackage(ctx context.Context, in *ShowPackageRequest, opts ...grpc.CallOption) (*ShowPackageResponse, error) {
	out := new(ShowPackageResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) MultiGetGoodsAndPackages(ctx context.Context, in *MultiGetGoodsAndPackagesRequest, opts ...grpc.CallOption) (*MultiGetGoodsAndPackagesResponse, error) {
	out := new(MultiGetGoodsAndPackagesResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/MultiGetGoodsAndPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoomTypeGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRoomTypeGroupsResponse, error) {
	out := new(GetRoomTypeGroupsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoomTypeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) GetRoomTypeGroupsByRoomTypeID(ctx context.Context, in *GetRoomTypeGroupsByRoomTypeIDRequest, opts ...grpc.CallOption) (*GetRoomTypeGroupsResponse, error) {
	out := new(GetRoomTypeGroupsResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/GetRoomTypeGroupsByRoomTypeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateMerchantLogo(ctx context.Context, in *UpdateMerchantLogoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateMerchantLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) UpdateMerchantUserAgreement(ctx context.Context, in *UpdateMerchantUserAgreementRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/UpdateMerchantUserAgreement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBasicServiceClient) ShowMerchant(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowMerchantResponse, error) {
	out := new(ShowMerchantResponse)
	err := c.cc.Invoke(ctx, "/merchantBasic.MerchantBasicService/ShowMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantBasicServiceServer is the server API for MerchantBasicService service.
type MerchantBasicServiceServer interface {
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error)
	GetBranches(context.Context, *GetBranchesRequest) (*GetBranchesResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	ShowBranch(context.Context, *ShowBranchRequest) (*ShowBranchResponse, error)
	UpdateBranchStatus(context.Context, *UpdateBranchStatusRequest) (*UpdateBranchStatusResponse, error)
	UpdateBranchAccount(context.Context, *UpdateBranchAccountRequest) (*UpdateBranchAccountResponse, error)
	GetBranchesByTagIDs(context.Context, *GetBranchesByTagIDsRequest) (*GetBranchesByTagIDsResponse, error)
	CreateStaff(context.Context, *CreateStaffRequest) (*CreateStaffResponse, error)
	UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffResponse, error)
	GetStaffs(context.Context, *GetStaffsRequest) (*GetStaffsResponse, error)
	DeleteStaff(context.Context, *DeleteStaffRequest) (*DeleteStaffResponse, error)
	ShowStaff(context.Context, *ShowStaffRequest) (*ShowStaffResponse, error)
	ShowStaffByPhone(context.Context, *ShowStaffByPhoneRequest) (*ShowStaffByPhoneResponse, error)
	UpdateStaffStatus(context.Context, *UpdateStaffStatusRequest) (*UpdateStaffStatusResponse, error)
	GetStaffsByRoleID(context.Context, *GetStaffsByRoleIDRequest) (*GetStaffsByRoleIDResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	UpdateRoleStatus(context.Context, *UpdateRoleStatusRequest) (*UpdateRoleStatusResponse, error)
	GetRoleHistories(context.Context, *GetRoleHistoriesRequest) (*GetRoleHistoriesResponse, error)
	ShowRole(context.Context, *ShowRoleRequest) (*ShowRoleResponse, error)
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	CreatePermissions(context.Context, *CreatePermissionsRequest) (*CreatePermissionsResponse, error)
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	GetMembersByIDs(context.Context, *GetMembersByIDsRequest) (*GetMembersByIDsResponse, error)
	ShowMember(context.Context, *ShowMemberRequest) (*ShowMemberResponse, error)
	ShowMemberByAccuratePhone(context.Context, *ShowMemberByAccuratePhoneRequest) (*ShowMemberByAccuratePhoneResponse, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error)
	GetBirthdayMembers(context.Context, *GetBirthdayMembersRequest) (*GetBirthdayMembersResponse, error)
	CreateOrUpdateCallingMember(context.Context, *CreateOrUpdateCallingMemberRequest) (*CreateOrUpdateCallingMemberResponse, error)
	GetMembersByPhoneSuffix(context.Context, *GetMembersByPhoneSuffixRequest) (*GetMembersByPhoneSuffixResponse, error)
	CreateWechatMember(context.Context, *CreateWechatMemberRequest) (*CreateWechatMemberResponse, error)
	UpdateMemberBranchInfo(context.Context, *UpdateMemberBranchInfoRequest) (*Response, error)
	SearchMember(context.Context, *SearchMemberRequest) (*SearchMemberResponse, error)
	// 推送券对象
	GetCouponMemberIDs(context.Context, *GetCouponMemberIDsRequest) (*GetCouponMemberIDsResponse, error)
	// 推送券对象数量
	CountCouponMemberIDs(context.Context, *GetCouponMemberIDsRequest) (*CountCouponMemberIDsResponse, error)
	CreateBranchTag(context.Context, *CreateBranchTagRequest) (*CreateBranchTagResponse, error)
	GetBranchTags(context.Context, *GetBranchTagsRequest) (*GetBranchTagsResponse, error)
	UpdateBranchTag(context.Context, *UpdateBranchTagRequest) (*UpdateBranchTagResponse, error)
	UpdateBranchTagStatus(context.Context, *UpdateBranchTagStatusRequest) (*UpdateBranchTagStatusResponse, error)
	GetBranchTagsByIDs(context.Context, *GetBranchTagsByIDsRequest) (*GetBranchTagsByIDsResponse, error)
	ShowBranchTag(context.Context, *ShowBranchTagRequest) (*ShowBranchTagResponse, error)
	SaveBranchAppointment(context.Context, *SaveBranchAppointmentRequest) (*SaveBranchAppointmentResponse, error)
	ShowBranchAppointment(context.Context, *ShowBranchAppointmentRequest) (*ShowBranchAppointmentResponse, error)
	UpdateBranchAppointmentRoomType(context.Context, *UpdateBranchAppointmentRoomTypeRequest) (*UpdateBranchAppointmentRoomTypeResponse, error)
	CreateRoomTypeCategory(context.Context, *CreateRoomTypeCategoryRequest) (*CreateRoomTypeCategoryResponse, error)
	CreateRoomType(context.Context, *CreateRoomTypeRequest) (*CreateRoomTypeResponse, error)
	GetRoomTypeCategories(context.Context, *GetRoomTypeCategoriesRequest) (*GetRoomTypeCategoriesResponse, error)
	GetRoomTypes(context.Context, *GetRoomTypesRequest) (*GetRoomTypesResponse, error)
	GetRoomTypesByIDs(context.Context, *GetRoomTypesByIDsRequest) (*GetRoomTypesByIDsResponse, error)
	UpdateRoomTypeCategory(context.Context, *UpdateRoomTypeCategoryRequest) (*UpdateRoomTypeCategoryResponse, error)
	UpdateRoomType(context.Context, *UpdateRoomTypeRequest) (*UpdateRoomTypeResponse, error)
	ShowBranchAppointmentBusinessTime(context.Context, *ShowBranchAppointmentBusinessTimeRequest) (*ShowBranchAppointmentBusinessTimeResponse, error)
	ShowRoomType(context.Context, *ShowRoomTypeRequest) (*ShowRoomTypeResponse, error)
	UpdateRoomTypeStatus(context.Context, *UpdateRoomTypeStatusRequest) (*Response, error)
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	CreateDistrict(context.Context, *CreateDistrictRequest) (*CreateDistrictResponse, error)
	UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictResponse, error)
	GetDistricts(context.Context, *GetDistrictsRequest) (*GetDistrictsResponse, error)
	GetBranchWithSubMchID(context.Context, *GetBranchWithSubMchIDRequest) (*GetBranchWithSubMchIDResponse, error)
	SetBranchSubMchID(context.Context, *SetBranchSubMchIDRequest) (*Response, error)
	GetWechatPaySetting(context.Context, *GetWechatPaySettingRequest) (*GetWechatPaySettingResponse, error)
	GetWechatPaySettingByAppID(context.Context, *GetWechatPaySettingByAppIDRequest) (*GetWechatPaySettingResponse, error)
	SetWechatPaySetting(context.Context, *SetWechatPaySettingRequest) (*Response, error)
	GetBranchWechatPaymentSetting(context.Context, *GetBranchWechatPaymentSettingRequest) (*GetBranchWechatPaymentSettingResponse, error)
	CreateMemberBehavior(context.Context, *CreateMemberBehaviorRequest) (*Response, error)
	GetMemberBehaviors(context.Context, *GetMemberBehaviorsRequest) (*GetMemberBehaviorsResponse, error)
	GetBrands(context.Context, *GetBrandsRequest) (*GetBrandsResponse, error)
	CreateBrand(context.Context, *CreateBrandRequest) (*Response, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*Response, error)
	UpdateBrandStatus(context.Context, *UpdateBrandStatusRequest) (*Response, error)
	CreateBranchBusinessSpecial(context.Context, *CreateBranchBusinessSpecialRequest) (*Response, error)
	UpdateBranchBusinessSpecial(context.Context, *UpdateBranchBusinessSpecialRequest) (*Response, error)
	UpdateBranchBusinessNormal(context.Context, *UpdateBranchBusinessNormalRequest) (*Response, error)
	UpdateBranchBusinessStatus(context.Context, *UpdateBranchBusinessStatusRequest) (*Response, error)
	GetBranchBusinesses(context.Context, *GetBranchBusinessesRequest) (*GetBranchBusinessesResponse, error)
	CreateOrUpdateWechatUser(context.Context, *CreateOrUpdateWechatUserRequest) (*CreateOrUpdateWechatUserResponse, error)
	ShowWechatUser(context.Context, *ShowWechatUserRequest) (*ShowWechatUserResponse, error)
	GetWechatUsers(context.Context, *GetWechatUsersRequest) (*GetWechatUsersResponse, error)
	// 获取门店指定时间最近一次营业日
	GetBranchLatelyBusiness(context.Context, *GetBranchLatelyBusinessRequest) (*GetBranchLatelyBusinessResponse, error)
	ShowWechatUserByMember(context.Context, *ShowWechatUserByMemberRequest) (*ShowWechatUserByMemberResponse, error)
	// CreateConsumeCategory 创建积分类型
	CreateConsumeCategory(context.Context, *CreateConsumeCategoryRequest) (*Response, error)
	// ListConsumeCategory 积分类型列表
	ListConsumeCategory(context.Context, *ListConsumeCategoryRequest) (*ListConsumeCategoryResponse, error)
	// UpdateConsumeCategory 修改积分类型
	UpdateConsumeCategory(context.Context, *UpdateConsumeCategoryRequest) (*Response, error)
	// UpdateConsumeCategoryStatus 修改积分类型状态
	UpdateConsumeCategoryStatus(context.Context, *UpdateStatusRequest) (*Response, error)
	// ShowConsumeCategory 积分类型详情
	ShowConsumeCategory(context.Context, *ShowConsumeCategoryRequest) (*ShowConsumeCategoryResponse, error)
	// GetConsumeCategoryTypes 获取消费类型对应分组
	GetConsumeCategoryTypes(context.Context, *Empty) (*GetConsumeCategoryTypesResponse, error)
	// SetPointRuleDescribe 设置积分规则说明
	SetPointRuleDescribe(context.Context, *SetPointRuleDescribeRequest) (*Response, error)
	// GetPointRuleDescribe 获取积分规则说明
	GetPointRuleDescribe(context.Context, *Empty) (*GetPointRuleDescribeResponse, error)
	// CreatePointRule 创建积分规则
	CreatePointRule(context.Context, *CreatePointRuleRequest) (*Response, error)
	// UpdatePointRule 修改积分规则
	UpdatePointRule(context.Context, *UpdatePointRuleRequest) (*Response, error)
	// UpdatePointRuleStatus 修改积分规则状态
	UpdatePointRuleStatus(context.Context, *UpdateStatusRequest) (*Response, error)
	// ListPointRuleRequest 积分规则列表
	ListPointRule(context.Context, *ListPointRuleRequest) (*ListPointRuleResponse, error)
	// ShowPointRule 积分规则详情
	ShowPointRule(context.Context, *ShowPointRuleRequest) (*ShowPointRuleResponse, error)
	// GetPointRuleAllBranch 获取所有已设置积分规则的门店
	GetPointRuleAllBranch(context.Context, *Empty) (*GetPointRuleAllBranchResponse, error)
	// GetBranchPointRule 获取门店积分规则
	GetBranchPointRule(context.Context, *GetBranchPointRuleRequest) (*GetBranchPointRuleResponse, error)
	// GetBranchPointRules 获取门店所有类型的积分规则
	GetBranchPointRules(context.Context, *GetBranchPointRulesRequest) (*GetBranchPointRulesResponse, error)
	// CreateMemberAddress 新增用户地址
	CreateMemberAddress(context.Context, *MemberAddress) (*Response, error)
	// UpdateMemberAddress 修改用户地址
	UpdateMemberAddress(context.Context, *MemberAddress) (*Response, error)
	// GetMemberAddress 获取用户地址
	GetMemberAddress(context.Context, *GetMemberAddressRequest) (*GetMemberAddressResponse, error)
	// SetMemberAddressDefault 标记为默认地址
	SetMemberAddressDefault(context.Context, *SetMemberAddressDefaultRequest) (*Response, error)
	// GetMemberDefaultAddress 获取默认地址
	GetMemberDefaultAddress(context.Context, *GetMemberDefaultAddressRequest) (*GetMemberDefaultAddressResponse, error)
	// DeleteMemberAddress 删除地址
	DeleteMemberAddress(context.Context, *DeleteMemberAddressRequest) (*Response, error)
	//成长值
	// ShowGrowthConfig 查询
	ShowGrowthConfig(context.Context, *Empty) (*ShowGrowthConfigResponse, error)
	// SaveGrowthConfig 保存
	SaveGrowthConfig(context.Context, *SaveGrowthConfigRequest) (*Response, error)
	// CreateGrowthRule 新建
	CreateGrowthRule(context.Context, *CreateGrowthRuleRequest) (*Response, error)
	// GetGrowthRules 列表
	GetGrowthRules(context.Context, *GetGrowthRulesRequest) (*GetGrowthRulesResponse, error)
	// ShowGrowthRule 详情
	ShowGrowthRule(context.Context, *ShowGrowthRuleRequest) (*ShowGrowthRuleResponse, error)
	// UpdateGrowthRule 更新
	UpdateGrowthRule(context.Context, *UpdateGrowthRuleRequest) (*Response, error)
	// GetBranchesHasGrowthRule 已设置了规则的门店列表
	GetBranchesHasGrowthRule(context.Context, *Empty) (*GetBranchesHasGrowthRuleResponse, error)
	// GetBranchGrowthRule 获取门店的成长值规则
	GetBranchGrowthRule(context.Context, *GetBranchGrowthRuleRequest) (*GetBranchGrowthRuleResponse, error)
	//消费奖励规则
	GetBranchConsumeRewardRule(context.Context, *GetBranchConsumeRewardRuleRequest) (*GetBranchConsumeRewardRuleResponse, error)
	//operateType
	GetOperateTypes(context.Context, *Empty) (*GetOperateTypesResponse, error)
	GetActiveTypes(context.Context, *Empty) (*GetActiveTypesResponse, error)
	SearchGoodsAndPackage(context.Context, *SearchGoodsAndPackageRequest) (*SearchGoodsAndPackageResponse, error)
	SearchGoodsOrPackage(context.Context, *SearchGoodsOrPackageRequest) (*SearchGoodsOrPackageResponse, error)
	ShowGoods(context.Context, *ShowGoodsRequest) (*ShowGoodsResponse, error)
	ShowPackage(context.Context, *ShowPackageRequest) (*ShowPackageResponse, error)
	MultiGetGoodsAndPackages(context.Context, *MultiGetGoodsAndPackagesRequest) (*MultiGetGoodsAndPackagesResponse, error)
	//roomTypeGroup
	GetRoomTypeGroups(context.Context, *Empty) (*GetRoomTypeGroupsResponse, error)
	GetRoomTypeGroupsByRoomTypeID(context.Context, *GetRoomTypeGroupsByRoomTypeIDRequest) (*GetRoomTypeGroupsResponse, error)
	UpdateMerchantLogo(context.Context, *UpdateMerchantLogoRequest) (*Response, error)
	UpdateMerchantUserAgreement(context.Context, *UpdateMerchantUserAgreementRequest) (*Response, error)
	ShowMerchant(context.Context, *Empty) (*ShowMerchantResponse, error)
}

// UnimplementedMerchantBasicServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantBasicServiceServer struct {
}

func (*UnimplementedMerchantBasicServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranch not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranches(context.Context, *GetBranchesRequest) (*GetBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranches not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowBranch(context.Context, *ShowBranchRequest) (*ShowBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBranch not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchStatus(context.Context, *UpdateBranchStatusRequest) (*UpdateBranchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchAccount(context.Context, *UpdateBranchAccountRequest) (*UpdateBranchAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchAccount not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchesByTagIDs(context.Context, *GetBranchesByTagIDsRequest) (*GetBranchesByTagIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchesByTagIDs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateStaff(context.Context, *CreateStaffRequest) (*CreateStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaff not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetStaffs(context.Context, *GetStaffsRequest) (*GetStaffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) DeleteStaff(context.Context, *DeleteStaffRequest) (*DeleteStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowStaff(context.Context, *ShowStaffRequest) (*ShowStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStaff not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowStaffByPhone(context.Context, *ShowStaffByPhoneRequest) (*ShowStaffByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStaffByPhone not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateStaffStatus(context.Context, *UpdateStaffStatusRequest) (*UpdateStaffStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaffStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetStaffsByRoleID(context.Context, *GetStaffsByRoleIDRequest) (*GetStaffsByRoleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffsByRoleID not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateRoleStatus(context.Context, *UpdateRoleStatusRequest) (*UpdateRoleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoleHistories(context.Context, *GetRoleHistoriesRequest) (*GetRoleHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleHistories not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowRole(context.Context, *ShowRoleRequest) (*ShowRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRole not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreatePermissions(context.Context, *CreatePermissionsRequest) (*CreatePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissions not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetMembersByIDs(context.Context, *GetMembersByIDsRequest) (*GetMembersByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersByIDs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowMember(context.Context, *ShowMemberRequest) (*ShowMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowMemberByAccuratePhone(context.Context, *ShowMemberByAccuratePhoneRequest) (*ShowMemberByAccuratePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMemberByAccuratePhone not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBirthdayMembers(context.Context, *GetBirthdayMembersRequest) (*GetBirthdayMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirthdayMembers not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateOrUpdateCallingMember(context.Context, *CreateOrUpdateCallingMemberRequest) (*CreateOrUpdateCallingMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCallingMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetMembersByPhoneSuffix(context.Context, *GetMembersByPhoneSuffixRequest) (*GetMembersByPhoneSuffixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersByPhoneSuffix not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateWechatMember(context.Context, *CreateWechatMemberRequest) (*CreateWechatMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWechatMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateMemberBranchInfo(context.Context, *UpdateMemberBranchInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberBranchInfo not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SearchMember(context.Context, *SearchMemberRequest) (*SearchMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetCouponMemberIDs(context.Context, *GetCouponMemberIDsRequest) (*GetCouponMemberIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponMemberIDs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CountCouponMemberIDs(context.Context, *GetCouponMemberIDsRequest) (*CountCouponMemberIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCouponMemberIDs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateBranchTag(context.Context, *CreateBranchTagRequest) (*CreateBranchTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranchTag not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchTags(context.Context, *GetBranchTagsRequest) (*GetBranchTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchTags not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchTag(context.Context, *UpdateBranchTagRequest) (*UpdateBranchTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchTag not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchTagStatus(context.Context, *UpdateBranchTagStatusRequest) (*UpdateBranchTagStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchTagStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchTagsByIDs(context.Context, *GetBranchTagsByIDsRequest) (*GetBranchTagsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchTagsByIDs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowBranchTag(context.Context, *ShowBranchTagRequest) (*ShowBranchTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBranchTag not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SaveBranchAppointment(context.Context, *SaveBranchAppointmentRequest) (*SaveBranchAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBranchAppointment not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowBranchAppointment(context.Context, *ShowBranchAppointmentRequest) (*ShowBranchAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBranchAppointment not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchAppointmentRoomType(context.Context, *UpdateBranchAppointmentRoomTypeRequest) (*UpdateBranchAppointmentRoomTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchAppointmentRoomType not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateRoomTypeCategory(context.Context, *CreateRoomTypeCategoryRequest) (*CreateRoomTypeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomTypeCategory not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateRoomType(context.Context, *CreateRoomTypeRequest) (*CreateRoomTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomType not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoomTypeCategories(context.Context, *GetRoomTypeCategoriesRequest) (*GetRoomTypeCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomTypeCategories not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoomTypes(context.Context, *GetRoomTypesRequest) (*GetRoomTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomTypes not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoomTypesByIDs(context.Context, *GetRoomTypesByIDsRequest) (*GetRoomTypesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomTypesByIDs not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateRoomTypeCategory(context.Context, *UpdateRoomTypeCategoryRequest) (*UpdateRoomTypeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomTypeCategory not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateRoomType(context.Context, *UpdateRoomTypeRequest) (*UpdateRoomTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomType not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowBranchAppointmentBusinessTime(context.Context, *ShowBranchAppointmentBusinessTimeRequest) (*ShowBranchAppointmentBusinessTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBranchAppointmentBusinessTime not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowRoomType(context.Context, *ShowRoomTypeRequest) (*ShowRoomTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRoomType not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateRoomTypeStatus(context.Context, *UpdateRoomTypeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomTypeStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateDistrict(context.Context, *CreateDistrictRequest) (*CreateDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistrict not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateDistrict(context.Context, *UpdateDistrictRequest) (*UpdateDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistrict not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetDistricts(context.Context, *GetDistrictsRequest) (*GetDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistricts not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchWithSubMchID(context.Context, *GetBranchWithSubMchIDRequest) (*GetBranchWithSubMchIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchWithSubMchID not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SetBranchSubMchID(context.Context, *SetBranchSubMchIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBranchSubMchID not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetWechatPaySetting(context.Context, *GetWechatPaySettingRequest) (*GetWechatPaySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatPaySetting not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetWechatPaySettingByAppID(context.Context, *GetWechatPaySettingByAppIDRequest) (*GetWechatPaySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatPaySettingByAppID not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SetWechatPaySetting(context.Context, *SetWechatPaySettingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWechatPaySetting not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchWechatPaymentSetting(context.Context, *GetBranchWechatPaymentSettingRequest) (*GetBranchWechatPaymentSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchWechatPaymentSetting not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateMemberBehavior(context.Context, *CreateMemberBehaviorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberBehavior not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetMemberBehaviors(context.Context, *GetMemberBehaviorsRequest) (*GetMemberBehaviorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberBehaviors not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBrands(context.Context, *GetBrandsRequest) (*GetBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrands not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateBrand(context.Context, *CreateBrandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBrandStatus(context.Context, *UpdateBrandStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateBranchBusinessSpecial(context.Context, *CreateBranchBusinessSpecialRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranchBusinessSpecial not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchBusinessSpecial(context.Context, *UpdateBranchBusinessSpecialRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchBusinessSpecial not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchBusinessNormal(context.Context, *UpdateBranchBusinessNormalRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchBusinessNormal not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateBranchBusinessStatus(context.Context, *UpdateBranchBusinessStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchBusinessStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchBusinesses(context.Context, *GetBranchBusinessesRequest) (*GetBranchBusinessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchBusinesses not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateOrUpdateWechatUser(context.Context, *CreateOrUpdateWechatUserRequest) (*CreateOrUpdateWechatUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateWechatUser not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowWechatUser(context.Context, *ShowWechatUserRequest) (*ShowWechatUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowWechatUser not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetWechatUsers(context.Context, *GetWechatUsersRequest) (*GetWechatUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatUsers not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchLatelyBusiness(context.Context, *GetBranchLatelyBusinessRequest) (*GetBranchLatelyBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchLatelyBusiness not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowWechatUserByMember(context.Context, *ShowWechatUserByMemberRequest) (*ShowWechatUserByMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowWechatUserByMember not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateConsumeCategory(context.Context, *CreateConsumeCategoryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumeCategory not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ListConsumeCategory(context.Context, *ListConsumeCategoryRequest) (*ListConsumeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumeCategory not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateConsumeCategory(context.Context, *UpdateConsumeCategoryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumeCategory not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateConsumeCategoryStatus(context.Context, *UpdateStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumeCategoryStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowConsumeCategory(context.Context, *ShowConsumeCategoryRequest) (*ShowConsumeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConsumeCategory not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetConsumeCategoryTypes(context.Context, *Empty) (*GetConsumeCategoryTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumeCategoryTypes not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SetPointRuleDescribe(context.Context, *SetPointRuleDescribeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPointRuleDescribe not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetPointRuleDescribe(context.Context, *Empty) (*GetPointRuleDescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointRuleDescribe not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreatePointRule(context.Context, *CreatePointRuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePointRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdatePointRule(context.Context, *UpdatePointRuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePointRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdatePointRuleStatus(context.Context, *UpdateStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePointRuleStatus not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ListPointRule(context.Context, *ListPointRuleRequest) (*ListPointRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPointRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowPointRule(context.Context, *ShowPointRuleRequest) (*ShowPointRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPointRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetPointRuleAllBranch(context.Context, *Empty) (*GetPointRuleAllBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointRuleAllBranch not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchPointRule(context.Context, *GetBranchPointRuleRequest) (*GetBranchPointRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchPointRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchPointRules(context.Context, *GetBranchPointRulesRequest) (*GetBranchPointRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchPointRules not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateMemberAddress(context.Context, *MemberAddress) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberAddress not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateMemberAddress(context.Context, *MemberAddress) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberAddress not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetMemberAddress(context.Context, *GetMemberAddressRequest) (*GetMemberAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberAddress not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SetMemberAddressDefault(context.Context, *SetMemberAddressDefaultRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemberAddressDefault not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetMemberDefaultAddress(context.Context, *GetMemberDefaultAddressRequest) (*GetMemberDefaultAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberDefaultAddress not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) DeleteMemberAddress(context.Context, *DeleteMemberAddressRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberAddress not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowGrowthConfig(context.Context, *Empty) (*ShowGrowthConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowGrowthConfig not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SaveGrowthConfig(context.Context, *SaveGrowthConfigRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGrowthConfig not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) CreateGrowthRule(context.Context, *CreateGrowthRuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrowthRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetGrowthRules(context.Context, *GetGrowthRulesRequest) (*GetGrowthRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrowthRules not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowGrowthRule(context.Context, *ShowGrowthRuleRequest) (*ShowGrowthRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowGrowthRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateGrowthRule(context.Context, *UpdateGrowthRuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrowthRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchesHasGrowthRule(context.Context, *Empty) (*GetBranchesHasGrowthRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchesHasGrowthRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchGrowthRule(context.Context, *GetBranchGrowthRuleRequest) (*GetBranchGrowthRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchGrowthRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetBranchConsumeRewardRule(context.Context, *GetBranchConsumeRewardRuleRequest) (*GetBranchConsumeRewardRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchConsumeRewardRule not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetOperateTypes(context.Context, *Empty) (*GetOperateTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperateTypes not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetActiveTypes(context.Context, *Empty) (*GetActiveTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTypes not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SearchGoodsAndPackage(context.Context, *SearchGoodsAndPackageRequest) (*SearchGoodsAndPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoodsAndPackage not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) SearchGoodsOrPackage(context.Context, *SearchGoodsOrPackageRequest) (*SearchGoodsOrPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoodsOrPackage not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowGoods(context.Context, *ShowGoodsRequest) (*ShowGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowGoods not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowPackage(context.Context, *ShowPackageRequest) (*ShowPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPackage not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) MultiGetGoodsAndPackages(context.Context, *MultiGetGoodsAndPackagesRequest) (*MultiGetGoodsAndPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetGoodsAndPackages not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoomTypeGroups(context.Context, *Empty) (*GetRoomTypeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomTypeGroups not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) GetRoomTypeGroupsByRoomTypeID(context.Context, *GetRoomTypeGroupsByRoomTypeIDRequest) (*GetRoomTypeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomTypeGroupsByRoomTypeID not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateMerchantLogo(context.Context, *UpdateMerchantLogoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantLogo not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) UpdateMerchantUserAgreement(context.Context, *UpdateMerchantUserAgreementRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantUserAgreement not implemented")
}
func (*UnimplementedMerchantBasicServiceServer) ShowMerchant(context.Context, *Empty) (*ShowMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMerchant not implemented")
}

func RegisterMerchantBasicServiceServer(s *grpc.Server, srv MerchantBasicServiceServer) {
	s.RegisterService(&_MerchantBasicService_serviceDesc, srv)
}

func _MerchantBasicService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranch(ctx, req.(*UpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranches(ctx, req.(*GetBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowBranch(ctx, req.(*ShowBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchStatus(ctx, req.(*UpdateBranchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchAccount(ctx, req.(*UpdateBranchAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchesByTagIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchesByTagIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchesByTagIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchesByTagIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchesByTagIDs(ctx, req.(*GetBranchesByTagIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateStaff(ctx, req.(*CreateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateStaff(ctx, req.(*UpdateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetStaffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetStaffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetStaffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetStaffs(ctx, req.(*GetStaffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/DeleteStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).DeleteStaff(ctx, req.(*DeleteStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowStaff(ctx, req.(*ShowStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowStaffByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowStaffByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowStaffByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowStaffByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowStaffByPhone(ctx, req.(*ShowStaffByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateStaffStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateStaffStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateStaffStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateStaffStatus(ctx, req.(*UpdateStaffStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetStaffsByRoleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffsByRoleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetStaffsByRoleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetStaffsByRoleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetStaffsByRoleID(ctx, req.(*GetStaffsByRoleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateRoleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateRoleStatus(ctx, req.(*UpdateRoleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoleHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoleHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoleHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoleHistories(ctx, req.(*GetRoleHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowRole(ctx, req.(*ShowRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreatePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreatePermissions(ctx, req.(*CreatePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetMembersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetMembersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetMembersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetMembersByIDs(ctx, req.(*GetMembersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowMember(ctx, req.(*ShowMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowMemberByAccuratePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMemberByAccuratePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowMemberByAccuratePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowMemberByAccuratePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowMemberByAccuratePhone(ctx, req.(*ShowMemberByAccuratePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBirthdayMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirthdayMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBirthdayMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBirthdayMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBirthdayMembers(ctx, req.(*GetBirthdayMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateOrUpdateCallingMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateCallingMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateOrUpdateCallingMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateOrUpdateCallingMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateOrUpdateCallingMember(ctx, req.(*CreateOrUpdateCallingMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetMembersByPhoneSuffix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersByPhoneSuffixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetMembersByPhoneSuffix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetMembersByPhoneSuffix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetMembersByPhoneSuffix(ctx, req.(*GetMembersByPhoneSuffixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateWechatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWechatMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateWechatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateWechatMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateWechatMember(ctx, req.(*CreateWechatMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateMemberBranchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberBranchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateMemberBranchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateMemberBranchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateMemberBranchInfo(ctx, req.(*UpdateMemberBranchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SearchMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SearchMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SearchMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SearchMember(ctx, req.(*SearchMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetCouponMemberIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponMemberIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetCouponMemberIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetCouponMemberIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetCouponMemberIDs(ctx, req.(*GetCouponMemberIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CountCouponMemberIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponMemberIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CountCouponMemberIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CountCouponMemberIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CountCouponMemberIDs(ctx, req.(*GetCouponMemberIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateBranchTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateBranchTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateBranchTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateBranchTag(ctx, req.(*CreateBranchTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchTags(ctx, req.(*GetBranchTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchTag(ctx, req.(*UpdateBranchTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchTagStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchTagStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchTagStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchTagStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchTagStatus(ctx, req.(*UpdateBranchTagStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchTagsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchTagsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchTagsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchTagsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchTagsByIDs(ctx, req.(*GetBranchTagsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowBranchTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBranchTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowBranchTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowBranchTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowBranchTag(ctx, req.(*ShowBranchTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SaveBranchAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBranchAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SaveBranchAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SaveBranchAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SaveBranchAppointment(ctx, req.(*SaveBranchAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowBranchAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBranchAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowBranchAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowBranchAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowBranchAppointment(ctx, req.(*ShowBranchAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchAppointmentRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchAppointmentRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchAppointmentRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchAppointmentRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchAppointmentRoomType(ctx, req.(*UpdateBranchAppointmentRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateRoomTypeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomTypeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateRoomTypeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateRoomTypeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateRoomTypeCategory(ctx, req.(*CreateRoomTypeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateRoomType(ctx, req.(*CreateRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoomTypeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomTypeCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoomTypeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoomTypeCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoomTypeCategories(ctx, req.(*GetRoomTypeCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoomTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoomTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoomTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoomTypes(ctx, req.(*GetRoomTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoomTypesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomTypesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoomTypesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoomTypesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoomTypesByIDs(ctx, req.(*GetRoomTypesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateRoomTypeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomTypeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateRoomTypeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateRoomTypeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateRoomTypeCategory(ctx, req.(*UpdateRoomTypeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateRoomType(ctx, req.(*UpdateRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowBranchAppointmentBusinessTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBranchAppointmentBusinessTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowBranchAppointmentBusinessTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowBranchAppointmentBusinessTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowBranchAppointmentBusinessTime(ctx, req.(*ShowBranchAppointmentBusinessTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowRoomType(ctx, req.(*ShowRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateRoomTypeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomTypeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateRoomTypeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateRoomTypeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateRoomTypeStatus(ctx, req.(*UpdateRoomTypeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateDistrict(ctx, req.(*CreateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateDistrict(ctx, req.(*UpdateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetDistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetDistricts(ctx, req.(*GetDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchWithSubMchID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchWithSubMchIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchWithSubMchID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchWithSubMchID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchWithSubMchID(ctx, req.(*GetBranchWithSubMchIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SetBranchSubMchID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchSubMchIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SetBranchSubMchID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SetBranchSubMchID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SetBranchSubMchID(ctx, req.(*SetBranchSubMchIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetWechatPaySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatPaySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetWechatPaySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetWechatPaySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetWechatPaySetting(ctx, req.(*GetWechatPaySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetWechatPaySettingByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatPaySettingByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetWechatPaySettingByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetWechatPaySettingByAppID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetWechatPaySettingByAppID(ctx, req.(*GetWechatPaySettingByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SetWechatPaySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWechatPaySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SetWechatPaySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SetWechatPaySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SetWechatPaySetting(ctx, req.(*SetWechatPaySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchWechatPaymentSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchWechatPaymentSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchWechatPaymentSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchWechatPaymentSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchWechatPaymentSetting(ctx, req.(*GetBranchWechatPaymentSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateMemberBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateMemberBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateMemberBehavior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateMemberBehavior(ctx, req.(*CreateMemberBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetMemberBehaviors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberBehaviorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetMemberBehaviors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetMemberBehaviors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetMemberBehaviors(ctx, req.(*GetMemberBehaviorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBrands(ctx, req.(*GetBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBrandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBrandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBrandStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBrandStatus(ctx, req.(*UpdateBrandStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateBranchBusinessSpecial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchBusinessSpecialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateBranchBusinessSpecial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateBranchBusinessSpecial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateBranchBusinessSpecial(ctx, req.(*CreateBranchBusinessSpecialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchBusinessSpecial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchBusinessSpecialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchBusinessSpecial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchBusinessSpecial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchBusinessSpecial(ctx, req.(*UpdateBranchBusinessSpecialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchBusinessNormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchBusinessNormalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchBusinessNormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchBusinessNormal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchBusinessNormal(ctx, req.(*UpdateBranchBusinessNormalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateBranchBusinessStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchBusinessStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateBranchBusinessStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateBranchBusinessStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateBranchBusinessStatus(ctx, req.(*UpdateBranchBusinessStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchBusinessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchBusinesses(ctx, req.(*GetBranchBusinessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateOrUpdateWechatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateWechatUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateOrUpdateWechatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateOrUpdateWechatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateOrUpdateWechatUser(ctx, req.(*CreateOrUpdateWechatUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowWechatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowWechatUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowWechatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowWechatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowWechatUser(ctx, req.(*ShowWechatUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetWechatUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetWechatUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetWechatUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetWechatUsers(ctx, req.(*GetWechatUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchLatelyBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchLatelyBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchLatelyBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchLatelyBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchLatelyBusiness(ctx, req.(*GetBranchLatelyBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowWechatUserByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowWechatUserByMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowWechatUserByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowWechatUserByMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowWechatUserByMember(ctx, req.(*ShowWechatUserByMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateConsumeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateConsumeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateConsumeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateConsumeCategory(ctx, req.(*CreateConsumeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ListConsumeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ListConsumeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ListConsumeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ListConsumeCategory(ctx, req.(*ListConsumeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateConsumeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateConsumeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateConsumeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateConsumeCategory(ctx, req.(*UpdateConsumeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateConsumeCategoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateConsumeCategoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateConsumeCategoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateConsumeCategoryStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowConsumeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowConsumeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowConsumeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowConsumeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowConsumeCategory(ctx, req.(*ShowConsumeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetConsumeCategoryTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetConsumeCategoryTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetConsumeCategoryTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetConsumeCategoryTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SetPointRuleDescribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPointRuleDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SetPointRuleDescribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SetPointRuleDescribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SetPointRuleDescribe(ctx, req.(*SetPointRuleDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetPointRuleDescribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetPointRuleDescribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetPointRuleDescribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetPointRuleDescribe(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreatePointRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePointRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreatePointRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreatePointRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreatePointRule(ctx, req.(*CreatePointRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdatePointRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdatePointRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdatePointRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdatePointRule(ctx, req.(*UpdatePointRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdatePointRuleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdatePointRuleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdatePointRuleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdatePointRuleStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ListPointRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPointRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ListPointRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ListPointRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ListPointRule(ctx, req.(*ListPointRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowPointRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPointRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowPointRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowPointRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowPointRule(ctx, req.(*ShowPointRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetPointRuleAllBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetPointRuleAllBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetPointRuleAllBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetPointRuleAllBranch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchPointRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchPointRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchPointRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchPointRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchPointRule(ctx, req.(*GetBranchPointRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchPointRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchPointRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchPointRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchPointRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchPointRules(ctx, req.(*GetBranchPointRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateMemberAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateMemberAddress(ctx, req.(*MemberAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateMemberAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateMemberAddress(ctx, req.(*MemberAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetMemberAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetMemberAddress(ctx, req.(*GetMemberAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SetMemberAddressDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemberAddressDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SetMemberAddressDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SetMemberAddressDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SetMemberAddressDefault(ctx, req.(*SetMemberAddressDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetMemberDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberDefaultAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetMemberDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetMemberDefaultAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetMemberDefaultAddress(ctx, req.(*GetMemberDefaultAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_DeleteMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).DeleteMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/DeleteMemberAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).DeleteMemberAddress(ctx, req.(*DeleteMemberAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowGrowthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowGrowthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowGrowthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowGrowthConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SaveGrowthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGrowthConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SaveGrowthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SaveGrowthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SaveGrowthConfig(ctx, req.(*SaveGrowthConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_CreateGrowthRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGrowthRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).CreateGrowthRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/CreateGrowthRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).CreateGrowthRule(ctx, req.(*CreateGrowthRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetGrowthRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrowthRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetGrowthRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetGrowthRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetGrowthRules(ctx, req.(*GetGrowthRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowGrowthRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGrowthRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowGrowthRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowGrowthRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowGrowthRule(ctx, req.(*ShowGrowthRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateGrowthRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGrowthRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateGrowthRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateGrowthRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateGrowthRule(ctx, req.(*UpdateGrowthRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchesHasGrowthRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchesHasGrowthRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchesHasGrowthRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchesHasGrowthRule(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchGrowthRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchGrowthRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchGrowthRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchGrowthRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchGrowthRule(ctx, req.(*GetBranchGrowthRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetBranchConsumeRewardRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchConsumeRewardRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetBranchConsumeRewardRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetBranchConsumeRewardRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetBranchConsumeRewardRule(ctx, req.(*GetBranchConsumeRewardRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetOperateTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetOperateTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetOperateTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetOperateTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetActiveTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetActiveTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetActiveTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetActiveTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SearchGoodsAndPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGoodsAndPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SearchGoodsAndPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SearchGoodsAndPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SearchGoodsAndPackage(ctx, req.(*SearchGoodsAndPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_SearchGoodsOrPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGoodsOrPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).SearchGoodsOrPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/SearchGoodsOrPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).SearchGoodsOrPackage(ctx, req.(*SearchGoodsOrPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowGoods(ctx, req.(*ShowGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowPackage(ctx, req.(*ShowPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_MultiGetGoodsAndPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetGoodsAndPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).MultiGetGoodsAndPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/MultiGetGoodsAndPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).MultiGetGoodsAndPackages(ctx, req.(*MultiGetGoodsAndPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoomTypeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoomTypeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoomTypeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoomTypeGroups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_GetRoomTypeGroupsByRoomTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomTypeGroupsByRoomTypeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).GetRoomTypeGroupsByRoomTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/GetRoomTypeGroupsByRoomTypeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).GetRoomTypeGroupsByRoomTypeID(ctx, req.(*GetRoomTypeGroupsByRoomTypeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateMerchantLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateMerchantLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateMerchantLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateMerchantLogo(ctx, req.(*UpdateMerchantLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_UpdateMerchantUserAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantUserAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).UpdateMerchantUserAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/UpdateMerchantUserAgreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).UpdateMerchantUserAgreement(ctx, req.(*UpdateMerchantUserAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBasicService_ShowMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBasicServiceServer).ShowMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchantBasic.MerchantBasicService/ShowMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBasicServiceServer).ShowMerchant(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantBasicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merchantBasic.MerchantBasicService",
	HandlerType: (*MerchantBasicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBranch",
			Handler:    _MerchantBasicService_CreateBranch_Handler,
		},
		{
			MethodName: "UpdateBranch",
			Handler:    _MerchantBasicService_UpdateBranch_Handler,
		},
		{
			MethodName: "GetBranches",
			Handler:    _MerchantBasicService_GetBranches_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _MerchantBasicService_DeleteBranch_Handler,
		},
		{
			MethodName: "ShowBranch",
			Handler:    _MerchantBasicService_ShowBranch_Handler,
		},
		{
			MethodName: "UpdateBranchStatus",
			Handler:    _MerchantBasicService_UpdateBranchStatus_Handler,
		},
		{
			MethodName: "UpdateBranchAccount",
			Handler:    _MerchantBasicService_UpdateBranchAccount_Handler,
		},
		{
			MethodName: "GetBranchesByTagIDs",
			Handler:    _MerchantBasicService_GetBranchesByTagIDs_Handler,
		},
		{
			MethodName: "CreateStaff",
			Handler:    _MerchantBasicService_CreateStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _MerchantBasicService_UpdateStaff_Handler,
		},
		{
			MethodName: "GetStaffs",
			Handler:    _MerchantBasicService_GetStaffs_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _MerchantBasicService_DeleteStaff_Handler,
		},
		{
			MethodName: "ShowStaff",
			Handler:    _MerchantBasicService_ShowStaff_Handler,
		},
		{
			MethodName: "ShowStaffByPhone",
			Handler:    _MerchantBasicService_ShowStaffByPhone_Handler,
		},
		{
			MethodName: "UpdateStaffStatus",
			Handler:    _MerchantBasicService_UpdateStaffStatus_Handler,
		},
		{
			MethodName: "GetStaffsByRoleID",
			Handler:    _MerchantBasicService_GetStaffsByRoleID_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _MerchantBasicService_SignIn_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _MerchantBasicService_UpdatePassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _MerchantBasicService_ResetPassword_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _MerchantBasicService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _MerchantBasicService_UpdateRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _MerchantBasicService_GetRoles_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _MerchantBasicService_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRoleStatus",
			Handler:    _MerchantBasicService_UpdateRoleStatus_Handler,
		},
		{
			MethodName: "GetRoleHistories",
			Handler:    _MerchantBasicService_GetRoleHistories_Handler,
		},
		{
			MethodName: "ShowRole",
			Handler:    _MerchantBasicService_ShowRole_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _MerchantBasicService_GetPermissions_Handler,
		},
		{
			MethodName: "CreatePermissions",
			Handler:    _MerchantBasicService_CreatePermissions_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _MerchantBasicService_CreateMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _MerchantBasicService_GetMembers_Handler,
		},
		{
			MethodName: "GetMembersByIDs",
			Handler:    _MerchantBasicService_GetMembersByIDs_Handler,
		},
		{
			MethodName: "ShowMember",
			Handler:    _MerchantBasicService_ShowMember_Handler,
		},
		{
			MethodName: "ShowMemberByAccuratePhone",
			Handler:    _MerchantBasicService_ShowMemberByAccuratePhone_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _MerchantBasicService_UpdateMember_Handler,
		},
		{
			MethodName: "GetBirthdayMembers",
			Handler:    _MerchantBasicService_GetBirthdayMembers_Handler,
		},
		{
			MethodName: "CreateOrUpdateCallingMember",
			Handler:    _MerchantBasicService_CreateOrUpdateCallingMember_Handler,
		},
		{
			MethodName: "GetMembersByPhoneSuffix",
			Handler:    _MerchantBasicService_GetMembersByPhoneSuffix_Handler,
		},
		{
			MethodName: "CreateWechatMember",
			Handler:    _MerchantBasicService_CreateWechatMember_Handler,
		},
		{
			MethodName: "UpdateMemberBranchInfo",
			Handler:    _MerchantBasicService_UpdateMemberBranchInfo_Handler,
		},
		{
			MethodName: "SearchMember",
			Handler:    _MerchantBasicService_SearchMember_Handler,
		},
		{
			MethodName: "GetCouponMemberIDs",
			Handler:    _MerchantBasicService_GetCouponMemberIDs_Handler,
		},
		{
			MethodName: "CountCouponMemberIDs",
			Handler:    _MerchantBasicService_CountCouponMemberIDs_Handler,
		},
		{
			MethodName: "CreateBranchTag",
			Handler:    _MerchantBasicService_CreateBranchTag_Handler,
		},
		{
			MethodName: "GetBranchTags",
			Handler:    _MerchantBasicService_GetBranchTags_Handler,
		},
		{
			MethodName: "UpdateBranchTag",
			Handler:    _MerchantBasicService_UpdateBranchTag_Handler,
		},
		{
			MethodName: "UpdateBranchTagStatus",
			Handler:    _MerchantBasicService_UpdateBranchTagStatus_Handler,
		},
		{
			MethodName: "GetBranchTagsByIDs",
			Handler:    _MerchantBasicService_GetBranchTagsByIDs_Handler,
		},
		{
			MethodName: "ShowBranchTag",
			Handler:    _MerchantBasicService_ShowBranchTag_Handler,
		},
		{
			MethodName: "SaveBranchAppointment",
			Handler:    _MerchantBasicService_SaveBranchAppointment_Handler,
		},
		{
			MethodName: "ShowBranchAppointment",
			Handler:    _MerchantBasicService_ShowBranchAppointment_Handler,
		},
		{
			MethodName: "UpdateBranchAppointmentRoomType",
			Handler:    _MerchantBasicService_UpdateBranchAppointmentRoomType_Handler,
		},
		{
			MethodName: "CreateRoomTypeCategory",
			Handler:    _MerchantBasicService_CreateRoomTypeCategory_Handler,
		},
		{
			MethodName: "CreateRoomType",
			Handler:    _MerchantBasicService_CreateRoomType_Handler,
		},
		{
			MethodName: "GetRoomTypeCategories",
			Handler:    _MerchantBasicService_GetRoomTypeCategories_Handler,
		},
		{
			MethodName: "GetRoomTypes",
			Handler:    _MerchantBasicService_GetRoomTypes_Handler,
		},
		{
			MethodName: "GetRoomTypesByIDs",
			Handler:    _MerchantBasicService_GetRoomTypesByIDs_Handler,
		},
		{
			MethodName: "UpdateRoomTypeCategory",
			Handler:    _MerchantBasicService_UpdateRoomTypeCategory_Handler,
		},
		{
			MethodName: "UpdateRoomType",
			Handler:    _MerchantBasicService_UpdateRoomType_Handler,
		},
		{
			MethodName: "ShowBranchAppointmentBusinessTime",
			Handler:    _MerchantBasicService_ShowBranchAppointmentBusinessTime_Handler,
		},
		{
			MethodName: "ShowRoomType",
			Handler:    _MerchantBasicService_ShowRoomType_Handler,
		},
		{
			MethodName: "UpdateRoomTypeStatus",
			Handler:    _MerchantBasicService_UpdateRoomTypeStatus_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _MerchantBasicService_CreateInvoice_Handler,
		},
		{
			MethodName: "CreateDistrict",
			Handler:    _MerchantBasicService_CreateDistrict_Handler,
		},
		{
			MethodName: "UpdateDistrict",
			Handler:    _MerchantBasicService_UpdateDistrict_Handler,
		},
		{
			MethodName: "GetDistricts",
			Handler:    _MerchantBasicService_GetDistricts_Handler,
		},
		{
			MethodName: "GetBranchWithSubMchID",
			Handler:    _MerchantBasicService_GetBranchWithSubMchID_Handler,
		},
		{
			MethodName: "SetBranchSubMchID",
			Handler:    _MerchantBasicService_SetBranchSubMchID_Handler,
		},
		{
			MethodName: "GetWechatPaySetting",
			Handler:    _MerchantBasicService_GetWechatPaySetting_Handler,
		},
		{
			MethodName: "GetWechatPaySettingByAppID",
			Handler:    _MerchantBasicService_GetWechatPaySettingByAppID_Handler,
		},
		{
			MethodName: "SetWechatPaySetting",
			Handler:    _MerchantBasicService_SetWechatPaySetting_Handler,
		},
		{
			MethodName: "GetBranchWechatPaymentSetting",
			Handler:    _MerchantBasicService_GetBranchWechatPaymentSetting_Handler,
		},
		{
			MethodName: "CreateMemberBehavior",
			Handler:    _MerchantBasicService_CreateMemberBehavior_Handler,
		},
		{
			MethodName: "GetMemberBehaviors",
			Handler:    _MerchantBasicService_GetMemberBehaviors_Handler,
		},
		{
			MethodName: "GetBrands",
			Handler:    _MerchantBasicService_GetBrands_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _MerchantBasicService_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _MerchantBasicService_UpdateBrand_Handler,
		},
		{
			MethodName: "UpdateBrandStatus",
			Handler:    _MerchantBasicService_UpdateBrandStatus_Handler,
		},
		{
			MethodName: "CreateBranchBusinessSpecial",
			Handler:    _MerchantBasicService_CreateBranchBusinessSpecial_Handler,
		},
		{
			MethodName: "UpdateBranchBusinessSpecial",
			Handler:    _MerchantBasicService_UpdateBranchBusinessSpecial_Handler,
		},
		{
			MethodName: "UpdateBranchBusinessNormal",
			Handler:    _MerchantBasicService_UpdateBranchBusinessNormal_Handler,
		},
		{
			MethodName: "UpdateBranchBusinessStatus",
			Handler:    _MerchantBasicService_UpdateBranchBusinessStatus_Handler,
		},
		{
			MethodName: "GetBranchBusinesses",
			Handler:    _MerchantBasicService_GetBranchBusinesses_Handler,
		},
		{
			MethodName: "CreateOrUpdateWechatUser",
			Handler:    _MerchantBasicService_CreateOrUpdateWechatUser_Handler,
		},
		{
			MethodName: "ShowWechatUser",
			Handler:    _MerchantBasicService_ShowWechatUser_Handler,
		},
		{
			MethodName: "GetWechatUsers",
			Handler:    _MerchantBasicService_GetWechatUsers_Handler,
		},
		{
			MethodName: "GetBranchLatelyBusiness",
			Handler:    _MerchantBasicService_GetBranchLatelyBusiness_Handler,
		},
		{
			MethodName: "ShowWechatUserByMember",
			Handler:    _MerchantBasicService_ShowWechatUserByMember_Handler,
		},
		{
			MethodName: "CreateConsumeCategory",
			Handler:    _MerchantBasicService_CreateConsumeCategory_Handler,
		},
		{
			MethodName: "ListConsumeCategory",
			Handler:    _MerchantBasicService_ListConsumeCategory_Handler,
		},
		{
			MethodName: "UpdateConsumeCategory",
			Handler:    _MerchantBasicService_UpdateConsumeCategory_Handler,
		},
		{
			MethodName: "UpdateConsumeCategoryStatus",
			Handler:    _MerchantBasicService_UpdateConsumeCategoryStatus_Handler,
		},
		{
			MethodName: "ShowConsumeCategory",
			Handler:    _MerchantBasicService_ShowConsumeCategory_Handler,
		},
		{
			MethodName: "GetConsumeCategoryTypes",
			Handler:    _MerchantBasicService_GetConsumeCategoryTypes_Handler,
		},
		{
			MethodName: "SetPointRuleDescribe",
			Handler:    _MerchantBasicService_SetPointRuleDescribe_Handler,
		},
		{
			MethodName: "GetPointRuleDescribe",
			Handler:    _MerchantBasicService_GetPointRuleDescribe_Handler,
		},
		{
			MethodName: "CreatePointRule",
			Handler:    _MerchantBasicService_CreatePointRule_Handler,
		},
		{
			MethodName: "UpdatePointRule",
			Handler:    _MerchantBasicService_UpdatePointRule_Handler,
		},
		{
			MethodName: "UpdatePointRuleStatus",
			Handler:    _MerchantBasicService_UpdatePointRuleStatus_Handler,
		},
		{
			MethodName: "ListPointRule",
			Handler:    _MerchantBasicService_ListPointRule_Handler,
		},
		{
			MethodName: "ShowPointRule",
			Handler:    _MerchantBasicService_ShowPointRule_Handler,
		},
		{
			MethodName: "GetPointRuleAllBranch",
			Handler:    _MerchantBasicService_GetPointRuleAllBranch_Handler,
		},
		{
			MethodName: "GetBranchPointRule",
			Handler:    _MerchantBasicService_GetBranchPointRule_Handler,
		},
		{
			MethodName: "GetBranchPointRules",
			Handler:    _MerchantBasicService_GetBranchPointRules_Handler,
		},
		{
			MethodName: "CreateMemberAddress",
			Handler:    _MerchantBasicService_CreateMemberAddress_Handler,
		},
		{
			MethodName: "UpdateMemberAddress",
			Handler:    _MerchantBasicService_UpdateMemberAddress_Handler,
		},
		{
			MethodName: "GetMemberAddress",
			Handler:    _MerchantBasicService_GetMemberAddress_Handler,
		},
		{
			MethodName: "SetMemberAddressDefault",
			Handler:    _MerchantBasicService_SetMemberAddressDefault_Handler,
		},
		{
			MethodName: "GetMemberDefaultAddress",
			Handler:    _MerchantBasicService_GetMemberDefaultAddress_Handler,
		},
		{
			MethodName: "DeleteMemberAddress",
			Handler:    _MerchantBasicService_DeleteMemberAddress_Handler,
		},
		{
			MethodName: "ShowGrowthConfig",
			Handler:    _MerchantBasicService_ShowGrowthConfig_Handler,
		},
		{
			MethodName: "SaveGrowthConfig",
			Handler:    _MerchantBasicService_SaveGrowthConfig_Handler,
		},
		{
			MethodName: "CreateGrowthRule",
			Handler:    _MerchantBasicService_CreateGrowthRule_Handler,
		},
		{
			MethodName: "GetGrowthRules",
			Handler:    _MerchantBasicService_GetGrowthRules_Handler,
		},
		{
			MethodName: "ShowGrowthRule",
			Handler:    _MerchantBasicService_ShowGrowthRule_Handler,
		},
		{
			MethodName: "UpdateGrowthRule",
			Handler:    _MerchantBasicService_UpdateGrowthRule_Handler,
		},
		{
			MethodName: "GetBranchesHasGrowthRule",
			Handler:    _MerchantBasicService_GetBranchesHasGrowthRule_Handler,
		},
		{
			MethodName: "GetBranchGrowthRule",
			Handler:    _MerchantBasicService_GetBranchGrowthRule_Handler,
		},
		{
			MethodName: "GetBranchConsumeRewardRule",
			Handler:    _MerchantBasicService_GetBranchConsumeRewardRule_Handler,
		},
		{
			MethodName: "GetOperateTypes",
			Handler:    _MerchantBasicService_GetOperateTypes_Handler,
		},
		{
			MethodName: "GetActiveTypes",
			Handler:    _MerchantBasicService_GetActiveTypes_Handler,
		},
		{
			MethodName: "SearchGoodsAndPackage",
			Handler:    _MerchantBasicService_SearchGoodsAndPackage_Handler,
		},
		{
			MethodName: "SearchGoodsOrPackage",
			Handler:    _MerchantBasicService_SearchGoodsOrPackage_Handler,
		},
		{
			MethodName: "ShowGoods",
			Handler:    _MerchantBasicService_ShowGoods_Handler,
		},
		{
			MethodName: "ShowPackage",
			Handler:    _MerchantBasicService_ShowPackage_Handler,
		},
		{
			MethodName: "MultiGetGoodsAndPackages",
			Handler:    _MerchantBasicService_MultiGetGoodsAndPackages_Handler,
		},
		{
			MethodName: "GetRoomTypeGroups",
			Handler:    _MerchantBasicService_GetRoomTypeGroups_Handler,
		},
		{
			MethodName: "GetRoomTypeGroupsByRoomTypeID",
			Handler:    _MerchantBasicService_GetRoomTypeGroupsByRoomTypeID_Handler,
		},
		{
			MethodName: "UpdateMerchantLogo",
			Handler:    _MerchantBasicService_UpdateMerchantLogo_Handler,
		},
		{
			MethodName: "UpdateMerchantUserAgreement",
			Handler:    _MerchantBasicService_UpdateMerchantUserAgreement_Handler,
		},
		{
			MethodName: "ShowMerchant",
			Handler:    _MerchantBasicService_ShowMerchant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merchant-basic/merchant_basic.proto",
}
