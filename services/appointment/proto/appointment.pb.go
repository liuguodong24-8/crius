// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/appointment/appointment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type Appointment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CalledCode       string                  `protobuf:"bytes,2,opt,name=called_code,json=calledCode,proto3" json:"called_code,omitempty"`
	CalledPhone      string                  `protobuf:"bytes,3,opt,name=called_phone,json=calledPhone,proto3" json:"called_phone,omitempty"`
	AppointmentCode  string                  `protobuf:"bytes,4,opt,name=appointment_code,json=appointmentCode,proto3" json:"appointment_code,omitempty"`
	AppointmentPhone string                  `protobuf:"bytes,5,opt,name=appointment_phone,json=appointmentPhone,proto3" json:"appointment_phone,omitempty"`
	Name             string                  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Gender           int32                   `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Way              int32                   `protobuf:"varint,8,opt,name=way,proto3" json:"way,omitempty"`
	CustomerNum      int32                   `protobuf:"varint,9,opt,name=customer_num,json=customerNum,proto3" json:"customer_num,omitempty"`
	BranchId         string                  `protobuf:"bytes,10,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	AppointmentAt    int32                   `protobuf:"varint,11,opt,name=appointment_at,json=appointmentAt,proto3" json:"appointment_at,omitempty"`
	AppointmentDate  int32                   `protobuf:"varint,12,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date,omitempty"`
	ExpireAt         int32                   `protobuf:"varint,13,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	RoomTypeId       string                  `protobuf:"bytes,14,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"`
	DepositFee       int32                   `protobuf:"varint,15,opt,name=deposit_fee,json=depositFee,proto3" json:"deposit_fee,omitempty"`
	FlowerCake       bool                    `protobuf:"varint,16,opt,name=flower_cake,json=flowerCake,proto3" json:"flower_cake,omitempty"`
	FlowerCakeRemark string                  `protobuf:"bytes,17,opt,name=flower_cake_remark,json=flowerCakeRemark,proto3" json:"flower_cake_remark,omitempty"`
	Remark           string                  `protobuf:"bytes,18,opt,name=remark,proto3" json:"remark,omitempty"`
	Operator         string                  `protobuf:"bytes,19,opt,name=operator,proto3" json:"operator,omitempty"`
	Status           string                  `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	CancelledReason  string                  `protobuf:"bytes,21,opt,name=cancelled_reason,json=cancelledReason,proto3" json:"cancelled_reason,omitempty"`
	ChargingWay      int32                   `protobuf:"varint,22,opt,name=charging_way,json=chargingWay,proto3" json:"charging_way,omitempty"`
	TradeId          string                  `protobuf:"bytes,23,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	RefundId         string                  `protobuf:"bytes,24,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty"`
	KeepAt           int32                   `protobuf:"varint,25,opt,name=keep_at,json=keepAt,proto3" json:"keep_at,omitempty"`
	CancelAt         int32                   `protobuf:"varint,26,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
	TradeType        string                  `protobuf:"bytes,27,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ArrivedAt        int32                   `protobuf:"varint,28,opt,name=arrived_at,json=arrivedAt,proto3" json:"arrived_at,omitempty"`
	RefundingAt      int32                   `protobuf:"varint,29,opt,name=refunding_at,json=refundingAt,proto3" json:"refunding_at,omitempty"`
	RefundedAt       int32                   `protobuf:"varint,30,opt,name=refunded_at,json=refundedAt,proto3" json:"refunded_at,omitempty"`
	MemberId         string                  `protobuf:"bytes,31,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	RefundAmount     int32                   `protobuf:"varint,32,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	CreatedAt        int32                   `protobuf:"varint,33,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ShareMessage     string                  `protobuf:"bytes,34,opt,name=share_message,json=shareMessage,proto3" json:"share_message,omitempty"`
	WechatIds        []*Appointment_WechatID `protobuf:"bytes,35,rep,name=wechat_ids,json=wechatIds,proto3" json:"wechat_ids,omitempty"`
	Code             string                  `protobuf:"bytes,36,opt,name=code,proto3" json:"code,omitempty"`
	Breach           bool                    `protobuf:"varint,37,opt,name=breach,proto3" json:"breach,omitempty"`
	BreachReason     string                  `protobuf:"bytes,38,opt,name=breach_reason,json=breachReason,proto3" json:"breach_reason,omitempty"`
}

func (x *Appointment) Reset() {
	*x = Appointment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appointment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appointment) ProtoMessage() {}

func (x *Appointment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appointment.ProtoReflect.Descriptor instead.
func (*Appointment) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{1}
}

func (x *Appointment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Appointment) GetCalledCode() string {
	if x != nil {
		return x.CalledCode
	}
	return ""
}

func (x *Appointment) GetCalledPhone() string {
	if x != nil {
		return x.CalledPhone
	}
	return ""
}

func (x *Appointment) GetAppointmentCode() string {
	if x != nil {
		return x.AppointmentCode
	}
	return ""
}

func (x *Appointment) GetAppointmentPhone() string {
	if x != nil {
		return x.AppointmentPhone
	}
	return ""
}

func (x *Appointment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Appointment) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *Appointment) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

func (x *Appointment) GetCustomerNum() int32 {
	if x != nil {
		return x.CustomerNum
	}
	return 0
}

func (x *Appointment) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *Appointment) GetAppointmentAt() int32 {
	if x != nil {
		return x.AppointmentAt
	}
	return 0
}

func (x *Appointment) GetAppointmentDate() int32 {
	if x != nil {
		return x.AppointmentDate
	}
	return 0
}

func (x *Appointment) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *Appointment) GetRoomTypeId() string {
	if x != nil {
		return x.RoomTypeId
	}
	return ""
}

func (x *Appointment) GetDepositFee() int32 {
	if x != nil {
		return x.DepositFee
	}
	return 0
}

func (x *Appointment) GetFlowerCake() bool {
	if x != nil {
		return x.FlowerCake
	}
	return false
}

func (x *Appointment) GetFlowerCakeRemark() string {
	if x != nil {
		return x.FlowerCakeRemark
	}
	return ""
}

func (x *Appointment) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Appointment) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Appointment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Appointment) GetCancelledReason() string {
	if x != nil {
		return x.CancelledReason
	}
	return ""
}

func (x *Appointment) GetChargingWay() int32 {
	if x != nil {
		return x.ChargingWay
	}
	return 0
}

func (x *Appointment) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Appointment) GetRefundId() string {
	if x != nil {
		return x.RefundId
	}
	return ""
}

func (x *Appointment) GetKeepAt() int32 {
	if x != nil {
		return x.KeepAt
	}
	return 0
}

func (x *Appointment) GetCancelAt() int32 {
	if x != nil {
		return x.CancelAt
	}
	return 0
}

func (x *Appointment) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *Appointment) GetArrivedAt() int32 {
	if x != nil {
		return x.ArrivedAt
	}
	return 0
}

func (x *Appointment) GetRefundingAt() int32 {
	if x != nil {
		return x.RefundingAt
	}
	return 0
}

func (x *Appointment) GetRefundedAt() int32 {
	if x != nil {
		return x.RefundedAt
	}
	return 0
}

func (x *Appointment) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *Appointment) GetRefundAmount() int32 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *Appointment) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Appointment) GetShareMessage() string {
	if x != nil {
		return x.ShareMessage
	}
	return ""
}

func (x *Appointment) GetWechatIds() []*Appointment_WechatID {
	if x != nil {
		return x.WechatIds
	}
	return nil
}

func (x *Appointment) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Appointment) GetBreach() bool {
	if x != nil {
		return x.Breach
	}
	return false
}

func (x *Appointment) GetBreachReason() string {
	if x != nil {
		return x.BreachReason
	}
	return ""
}

type CreateAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointment    *Appointment `protobuf:"bytes,1,opt,name=appointment,proto3" json:"appointment,omitempty"`
	LockId         string       `protobuf:"bytes,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	ThemePackageId string       `protobuf:"bytes,3,opt,name=theme_package_id,json=themePackageId,proto3" json:"theme_package_id,omitempty"`
}

func (x *CreateAppointmentRequest) Reset() {
	*x = CreateAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppointmentRequest) ProtoMessage() {}

func (x *CreateAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppointmentRequest.ProtoReflect.Descriptor instead.
func (*CreateAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAppointmentRequest) GetAppointment() *Appointment {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *CreateAppointmentRequest) GetLockId() string {
	if x != nil {
		return x.LockId
	}
	return ""
}

func (x *CreateAppointmentRequest) GetThemePackageId() string {
	if x != nil {
		return x.ThemePackageId
	}
	return ""
}

type CreateAppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateAppointmentResponse) Reset() {
	*x = CreateAppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppointmentResponse) ProtoMessage() {}

func (x *CreateAppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppointmentResponse.ProtoReflect.Descriptor instead.
func (*CreateAppointmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAppointmentResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreateAppointmentResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateAppointmentResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CancelAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OperateMessage string `protobuf:"bytes,2,opt,name=operate_message,json=operateMessage,proto3" json:"operate_message,omitempty"`
}

func (x *CancelAppointmentRequest) Reset() {
	*x = CancelAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAppointmentRequest) ProtoMessage() {}

func (x *CancelAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAppointmentRequest.ProtoReflect.Descriptor instead.
func (*CancelAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{4}
}

func (x *CancelAppointmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CancelAppointmentRequest) GetOperateMessage() string {
	if x != nil {
		return x.OperateMessage
	}
	return ""
}

type CancelAppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CancelAppointmentResponse) Reset() {
	*x = CancelAppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAppointmentResponse) ProtoMessage() {}

func (x *CancelAppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAppointmentResponse.ProtoReflect.Descriptor instead.
func (*CancelAppointmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{5}
}

func (x *CancelAppointmentResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CancelAppointmentResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CancelAppointmentResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type PayAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PayAppointmentRequest) Reset() {
	*x = PayAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAppointmentRequest) ProtoMessage() {}

func (x *PayAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAppointmentRequest.ProtoReflect.Descriptor instead.
func (*PayAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{6}
}

func (x *PayAppointmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RefundAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RefundAppointmentRequest) Reset() {
	*x = RefundAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundAppointmentRequest) ProtoMessage() {}

func (x *RefundAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundAppointmentRequest.ProtoReflect.Descriptor instead.
func (*RefundAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{7}
}

func (x *RefundAppointmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArriveAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ArrivedAt int32  `protobuf:"varint,2,opt,name=arrived_at,json=arrivedAt,proto3" json:"arrived_at,omitempty"`
}

func (x *ArriveAppointmentRequest) Reset() {
	*x = ArriveAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArriveAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArriveAppointmentRequest) ProtoMessage() {}

func (x *ArriveAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArriveAppointmentRequest.ProtoReflect.Descriptor instead.
func (*ArriveAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{8}
}

func (x *ArriveAppointmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArriveAppointmentRequest) GetArrivedAt() int32 {
	if x != nil {
		return x.ArrivedAt
	}
	return 0
}

type GetAppointmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId       string   `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	PhoneTail      string   `protobuf:"bytes,2,opt,name=phone_tail,json=phoneTail,proto3" json:"phone_tail,omitempty"`
	Phone          string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	DateStart      int32    `protobuf:"varint,4,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	DateEnd        int32    `protobuf:"varint,5,opt,name=date_end,json=dateEnd,proto3" json:"date_end,omitempty"`
	Way            int32    `protobuf:"varint,6,opt,name=way,proto3" json:"way,omitempty"`
	IsDepositPayed int32    `protobuf:"varint,7,opt,name=is_deposit_payed,json=isDepositPayed,proto3" json:"is_deposit_payed,omitempty"`
	FlowerCake     int32    `protobuf:"varint,8,opt,name=flower_cake,json=flowerCake,proto3" json:"flower_cake,omitempty"`
	RoomTypeId     []string `protobuf:"bytes,9,rep,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"`
	Status         []string `protobuf:"bytes,10,rep,name=status,proto3" json:"status,omitempty"`
	Offset         int32    `protobuf:"varint,11,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32    `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	CalledPhone    string   `protobuf:"bytes,13,opt,name=called_phone,json=calledPhone,proto3" json:"called_phone,omitempty"`
	AnyPhone       string   `protobuf:"bytes,14,opt,name=any_phone,json=anyPhone,proto3" json:"any_phone,omitempty"`
	MemberId       string   `protobuf:"bytes,15,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	WechatId       string   `protobuf:"bytes,16,opt,name=wechat_id,json=wechatId,proto3" json:"wechat_id,omitempty"`
	ThemeId        string   `protobuf:"bytes,17,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	PackageId      string   `protobuf:"bytes,18,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	CalledCode     string   `protobuf:"bytes,19,opt,name=called_code,json=calledCode,proto3" json:"called_code,omitempty"`
}

func (x *GetAppointmentsRequest) Reset() {
	*x = GetAppointmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentsRequest) ProtoMessage() {}

func (x *GetAppointmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentsRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{9}
}

func (x *GetAppointmentsRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *GetAppointmentsRequest) GetPhoneTail() string {
	if x != nil {
		return x.PhoneTail
	}
	return ""
}

func (x *GetAppointmentsRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetAppointmentsRequest) GetDateStart() int32 {
	if x != nil {
		return x.DateStart
	}
	return 0
}

func (x *GetAppointmentsRequest) GetDateEnd() int32 {
	if x != nil {
		return x.DateEnd
	}
	return 0
}

func (x *GetAppointmentsRequest) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

func (x *GetAppointmentsRequest) GetIsDepositPayed() int32 {
	if x != nil {
		return x.IsDepositPayed
	}
	return 0
}

func (x *GetAppointmentsRequest) GetFlowerCake() int32 {
	if x != nil {
		return x.FlowerCake
	}
	return 0
}

func (x *GetAppointmentsRequest) GetRoomTypeId() []string {
	if x != nil {
		return x.RoomTypeId
	}
	return nil
}

func (x *GetAppointmentsRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAppointmentsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppointmentsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAppointmentsRequest) GetCalledPhone() string {
	if x != nil {
		return x.CalledPhone
	}
	return ""
}

func (x *GetAppointmentsRequest) GetAnyPhone() string {
	if x != nil {
		return x.AnyPhone
	}
	return ""
}

func (x *GetAppointmentsRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *GetAppointmentsRequest) GetWechatId() string {
	if x != nil {
		return x.WechatId
	}
	return ""
}

func (x *GetAppointmentsRequest) GetThemeId() string {
	if x != nil {
		return x.ThemeId
	}
	return ""
}

func (x *GetAppointmentsRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *GetAppointmentsRequest) GetCalledCode() string {
	if x != nil {
		return x.CalledCode
	}
	return ""
}

type GetAppointmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string               `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *GetAppointmentsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppointmentsResponse) Reset() {
	*x = GetAppointmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentsResponse) ProtoMessage() {}

func (x *GetAppointmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentsResponse.ProtoReflect.Descriptor instead.
func (*GetAppointmentsResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{10}
}

func (x *GetAppointmentsResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAppointmentsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetAppointmentsResponse) GetData() *GetAppointmentsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAppointmentsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointments []*GetAppointmentsData_Data `protobuf:"bytes,1,rep,name=appointments,proto3" json:"appointments,omitempty"`
	Total        int32                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetAppointmentsData) Reset() {
	*x = GetAppointmentsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentsData) ProtoMessage() {}

func (x *GetAppointmentsData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentsData.ProtoReflect.Descriptor instead.
func (*GetAppointmentsData) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{11}
}

func (x *GetAppointmentsData) GetAppointments() []*GetAppointmentsData_Data {
	if x != nil {
		return x.Appointments
	}
	return nil
}

func (x *GetAppointmentsData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointment    *Appointment `protobuf:"bytes,1,opt,name=appointment,proto3" json:"appointment,omitempty"`
	LockId         string       `protobuf:"bytes,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	ThemePackageId string       `protobuf:"bytes,3,opt,name=theme_package_id,json=themePackageId,proto3" json:"theme_package_id,omitempty"`
}

func (x *UpdateAppointmentRequest) Reset() {
	*x = UpdateAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppointmentRequest) ProtoMessage() {}

func (x *UpdateAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppointmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateAppointmentRequest) GetAppointment() *Appointment {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *UpdateAppointmentRequest) GetLockId() string {
	if x != nil {
		return x.LockId
	}
	return ""
}

func (x *UpdateAppointmentRequest) GetThemePackageId() string {
	if x != nil {
		return x.ThemePackageId
	}
	return ""
}

type UpdateAppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *UpdateAppointmentData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateAppointmentResponse) Reset() {
	*x = UpdateAppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppointmentResponse) ProtoMessage() {}

func (x *UpdateAppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppointmentResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppointmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateAppointmentResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateAppointmentResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *UpdateAppointmentResponse) GetData() *UpdateAppointmentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAppointmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppointmentId    string `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	NewAppointmentId string `protobuf:"bytes,2,opt,name=new_appointment_id,json=newAppointmentId,proto3" json:"new_appointment_id,omitempty"`
}

func (x *UpdateAppointmentData) Reset() {
	*x = UpdateAppointmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppointmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppointmentData) ProtoMessage() {}

func (x *UpdateAppointmentData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppointmentData.ProtoReflect.Descriptor instead.
func (*UpdateAppointmentData) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAppointmentData) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *UpdateAppointmentData) GetNewAppointmentId() string {
	if x != nil {
		return x.NewAppointmentId
	}
	return ""
}

type GetAppointmentRemainingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId     string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	BusinessDate int32  `protobuf:"varint,2,opt,name=business_date,json=businessDate,proto3" json:"business_date,omitempty"`
	Way          int32  `protobuf:"varint,3,opt,name=way,proto3" json:"way,omitempty"`
}

func (x *GetAppointmentRemainingRequest) Reset() {
	*x = GetAppointmentRemainingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRemainingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRemainingRequest) ProtoMessage() {}

func (x *GetAppointmentRemainingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRemainingRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentRemainingRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{15}
}

func (x *GetAppointmentRemainingRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *GetAppointmentRemainingRequest) GetBusinessDate() int32 {
	if x != nil {
		return x.BusinessDate
	}
	return 0
}

func (x *GetAppointmentRemainingRequest) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

type GetAppointmentRemainingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                   `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         []*AppointmentRemaining `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppointmentRemainingResponse) Reset() {
	*x = GetAppointmentRemainingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRemainingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRemainingResponse) ProtoMessage() {}

func (x *GetAppointmentRemainingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRemainingResponse.ProtoReflect.Descriptor instead.
func (*GetAppointmentRemainingResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{16}
}

func (x *GetAppointmentRemainingResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAppointmentRemainingResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetAppointmentRemainingResponse) GetData() []*AppointmentRemaining {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppointmentRemaining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomTypeId  string         `protobuf:"bytes,1,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"`
	RoomTypeNum []*RoomTypeNum `protobuf:"bytes,2,rep,name=room_type_num,json=roomTypeNum,proto3" json:"room_type_num,omitempty"`
	DepositFee  int32          `protobuf:"varint,3,opt,name=deposit_fee,json=depositFee,proto3" json:"deposit_fee,omitempty"`
}

func (x *AppointmentRemaining) Reset() {
	*x = AppointmentRemaining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentRemaining) ProtoMessage() {}

func (x *AppointmentRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentRemaining.ProtoReflect.Descriptor instead.
func (*AppointmentRemaining) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{17}
}

func (x *AppointmentRemaining) GetRoomTypeId() string {
	if x != nil {
		return x.RoomTypeId
	}
	return ""
}

func (x *AppointmentRemaining) GetRoomTypeNum() []*RoomTypeNum {
	if x != nil {
		return x.RoomTypeNum
	}
	return nil
}

func (x *AppointmentRemaining) GetDepositFee() int32 {
	if x != nil {
		return x.DepositFee
	}
	return 0
}

type RoomTypeNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Way       int32  `protobuf:"varint,1,opt,name=way,proto3" json:"way,omitempty"`
	Num       int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Time      string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Total     int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	IsNextDay bool   `protobuf:"varint,5,opt,name=is_next_day,json=isNextDay,proto3" json:"is_next_day,omitempty"`
}

func (x *RoomTypeNum) Reset() {
	*x = RoomTypeNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTypeNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTypeNum) ProtoMessage() {}

func (x *RoomTypeNum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTypeNum.ProtoReflect.Descriptor instead.
func (*RoomTypeNum) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{18}
}

func (x *RoomTypeNum) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

func (x *RoomTypeNum) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RoomTypeNum) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *RoomTypeNum) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RoomTypeNum) GetIsNextDay() bool {
	if x != nil {
		return x.IsNextDay
	}
	return false
}

type GetAppointmentRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAppointmentRecordRequest) Reset() {
	*x = GetAppointmentRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRecordRequest) ProtoMessage() {}

func (x *GetAppointmentRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRecordRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentRecordRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{19}
}

func (x *GetAppointmentRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAppointmentRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string               `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         []*AppointmentRecord `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppointmentRecordResponse) Reset() {
	*x = GetAppointmentRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRecordResponse) ProtoMessage() {}

func (x *GetAppointmentRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRecordResponse.ProtoReflect.Descriptor instead.
func (*GetAppointmentRecordResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{20}
}

func (x *GetAppointmentRecordResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAppointmentRecordResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetAppointmentRecordResponse) GetData() []*AppointmentRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppointmentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operate    string `protobuf:"bytes,1,opt,name=operate,proto3" json:"operate,omitempty"`
	OperatorId string `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	CreatedAt  int32  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Before     string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	After      string `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *AppointmentRecord) Reset() {
	*x = AppointmentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentRecord) ProtoMessage() {}

func (x *AppointmentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentRecord.ProtoReflect.Descriptor instead.
func (*AppointmentRecord) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{21}
}

func (x *AppointmentRecord) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *AppointmentRecord) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *AppointmentRecord) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppointmentRecord) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *AppointmentRecord) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

type SaveAppointmentTempNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId        string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Num             int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	AppointmentAt   int32  `protobuf:"varint,3,opt,name=appointment_at,json=appointmentAt,proto3" json:"appointment_at,omitempty"`
	Way             int32  `protobuf:"varint,4,opt,name=way,proto3" json:"way,omitempty"`
	RoomTypeId      string `protobuf:"bytes,5,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"`
	AppointmentDate int32  `protobuf:"varint,6,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date,omitempty"`
}

func (x *SaveAppointmentTempNumberRequest) Reset() {
	*x = SaveAppointmentTempNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAppointmentTempNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAppointmentTempNumberRequest) ProtoMessage() {}

func (x *SaveAppointmentTempNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAppointmentTempNumberRequest.ProtoReflect.Descriptor instead.
func (*SaveAppointmentTempNumberRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{22}
}

func (x *SaveAppointmentTempNumberRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *SaveAppointmentTempNumberRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SaveAppointmentTempNumberRequest) GetAppointmentAt() int32 {
	if x != nil {
		return x.AppointmentAt
	}
	return 0
}

func (x *SaveAppointmentTempNumberRequest) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

func (x *SaveAppointmentTempNumberRequest) GetRoomTypeId() string {
	if x != nil {
		return x.RoomTypeId
	}
	return ""
}

func (x *SaveAppointmentTempNumberRequest) GetAppointmentDate() int32 {
	if x != nil {
		return x.AppointmentDate
	}
	return 0
}

type ShowAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ShowAppointmentRequest) Reset() {
	*x = ShowAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAppointmentRequest) ProtoMessage() {}

func (x *ShowAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAppointmentRequest.ProtoReflect.Descriptor instead.
func (*ShowAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{23}
}

func (x *ShowAppointmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ShowAppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                         `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                        `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *ShowAppointmentResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ShowAppointmentResponse) Reset() {
	*x = ShowAppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAppointmentResponse) ProtoMessage() {}

func (x *ShowAppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAppointmentResponse.ProtoReflect.Descriptor instead.
func (*ShowAppointmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{24}
}

func (x *ShowAppointmentResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ShowAppointmentResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ShowAppointmentResponse) GetData() *ShowAppointmentResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAppointmentTradeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeId   string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	RefundId  string `protobuf:"bytes,3,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	TradeType string `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
}

func (x *UpdateAppointmentTradeInfoRequest) Reset() {
	*x = UpdateAppointmentTradeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppointmentTradeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppointmentTradeInfoRequest) ProtoMessage() {}

func (x *UpdateAppointmentTradeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppointmentTradeInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppointmentTradeInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateAppointmentTradeInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAppointmentTradeInfoRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *UpdateAppointmentTradeInfoRequest) GetRefundId() string {
	if x != nil {
		return x.RefundId
	}
	return ""
}

func (x *UpdateAppointmentTradeInfoRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateAppointmentTradeInfoRequest) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

type GetAppointmentLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneCode string `protobuf:"bytes,1,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	Phone     string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	DateStart int32  `protobuf:"varint,4,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	DateEnd   int32  `protobuf:"varint,5,opt,name=date_end,json=dateEnd,proto3" json:"date_end,omitempty"`
	AnyPhone  string `protobuf:"bytes,6,opt,name=any_phone,json=anyPhone,proto3" json:"any_phone,omitempty"`
	MemberId  string `protobuf:"bytes,7,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *GetAppointmentLimitRequest) Reset() {
	*x = GetAppointmentLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentLimitRequest) ProtoMessage() {}

func (x *GetAppointmentLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentLimitRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentLimitRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{26}
}

func (x *GetAppointmentLimitRequest) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *GetAppointmentLimitRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetAppointmentLimitRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetAppointmentLimitRequest) GetDateStart() int32 {
	if x != nil {
		return x.DateStart
	}
	return 0
}

func (x *GetAppointmentLimitRequest) GetDateEnd() int32 {
	if x != nil {
		return x.DateEnd
	}
	return 0
}

func (x *GetAppointmentLimitRequest) GetAnyPhone() string {
	if x != nil {
		return x.AnyPhone
	}
	return ""
}

func (x *GetAppointmentLimitRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GetAppointmentLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *GetAppointmentLimitData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppointmentLimitResponse) Reset() {
	*x = GetAppointmentLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentLimitResponse) ProtoMessage() {}

func (x *GetAppointmentLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentLimitResponse.ProtoReflect.Descriptor instead.
func (*GetAppointmentLimitResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{27}
}

func (x *GetAppointmentLimitResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAppointmentLimitResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetAppointmentLimitResponse) GetData() *GetAppointmentLimitData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAppointmentLimitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchNum []*BranchAppointmentNum `protobuf:"bytes,1,rep,name=branch_num,json=branchNum,proto3" json:"branch_num,omitempty"`
	WayNum    []*WayAppointmentNum    `protobuf:"bytes,2,rep,name=way_num,json=wayNum,proto3" json:"way_num,omitempty"`
	Limit     int32                   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAppointmentLimitData) Reset() {
	*x = GetAppointmentLimitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentLimitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentLimitData) ProtoMessage() {}

func (x *GetAppointmentLimitData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentLimitData.ProtoReflect.Descriptor instead.
func (*GetAppointmentLimitData) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{28}
}

func (x *GetAppointmentLimitData) GetBranchNum() []*BranchAppointmentNum {
	if x != nil {
		return x.BranchNum
	}
	return nil
}

func (x *GetAppointmentLimitData) GetWayNum() []*WayAppointmentNum {
	if x != nil {
		return x.WayNum
	}
	return nil
}

func (x *GetAppointmentLimitData) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BranchAppointmentNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num      int32  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	BranchId string `protobuf:"bytes,2,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *BranchAppointmentNum) Reset() {
	*x = BranchAppointmentNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchAppointmentNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchAppointmentNum) ProtoMessage() {}

func (x *BranchAppointmentNum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchAppointmentNum.ProtoReflect.Descriptor instead.
func (*BranchAppointmentNum) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{29}
}

func (x *BranchAppointmentNum) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BranchAppointmentNum) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

type WayAppointmentNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Way int32 `protobuf:"varint,2,opt,name=way,proto3" json:"way,omitempty"`
}

func (x *WayAppointmentNum) Reset() {
	*x = WayAppointmentNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WayAppointmentNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WayAppointmentNum) ProtoMessage() {}

func (x *WayAppointmentNum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WayAppointmentNum.ProtoReflect.Descriptor instead.
func (*WayAppointmentNum) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{30}
}

func (x *WayAppointmentNum) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WayAppointmentNum) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

type GetAppointmentRemainingFastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessDate int32                                  `protobuf:"varint,1,opt,name=business_date,json=businessDate,proto3" json:"business_date,omitempty"`
	Time         string                                 `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Num          int32                                  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Branches     []*GetAppointmentRemainingFastBranches `protobuf:"bytes,4,rep,name=branches,proto3" json:"branches,omitempty"`
	Way          int32                                  `protobuf:"varint,5,opt,name=way,proto3" json:"way,omitempty"`
	Limit        int32                                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAppointmentRemainingFastRequest) Reset() {
	*x = GetAppointmentRemainingFastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRemainingFastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRemainingFastRequest) ProtoMessage() {}

func (x *GetAppointmentRemainingFastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRemainingFastRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentRemainingFastRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{31}
}

func (x *GetAppointmentRemainingFastRequest) GetBusinessDate() int32 {
	if x != nil {
		return x.BusinessDate
	}
	return 0
}

func (x *GetAppointmentRemainingFastRequest) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetAppointmentRemainingFastRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetAppointmentRemainingFastRequest) GetBranches() []*GetAppointmentRemainingFastBranches {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *GetAppointmentRemainingFastRequest) GetWay() int32 {
	if x != nil {
		return x.Way
	}
	return 0
}

func (x *GetAppointmentRemainingFastRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppointmentRemainingFastBranches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Distance int32  `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *GetAppointmentRemainingFastBranches) Reset() {
	*x = GetAppointmentRemainingFastBranches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRemainingFastBranches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRemainingFastBranches) ProtoMessage() {}

func (x *GetAppointmentRemainingFastBranches) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRemainingFastBranches.ProtoReflect.Descriptor instead.
func (*GetAppointmentRemainingFastBranches) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{32}
}

func (x *GetAppointmentRemainingFastBranches) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *GetAppointmentRemainingFastBranches) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type GetAppointmentRemainingFastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                            `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                           `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *GetAppointmentRemainingFastData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppointmentRemainingFastResponse) Reset() {
	*x = GetAppointmentRemainingFastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRemainingFastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRemainingFastResponse) ProtoMessage() {}

func (x *GetAppointmentRemainingFastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRemainingFastResponse.ProtoReflect.Descriptor instead.
func (*GetAppointmentRemainingFastResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{33}
}

func (x *GetAppointmentRemainingFastResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAppointmentRemainingFastResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetAppointmentRemainingFastResponse) GetData() *GetAppointmentRemainingFastData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAppointmentRemainingFastData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recommends []*Recommend `protobuf:"bytes,1,rep,name=recommends,proto3" json:"recommends,omitempty"`
}

func (x *GetAppointmentRemainingFastData) Reset() {
	*x = GetAppointmentRemainingFastData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRemainingFastData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRemainingFastData) ProtoMessage() {}

func (x *GetAppointmentRemainingFastData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRemainingFastData.ProtoReflect.Descriptor instead.
func (*GetAppointmentRemainingFastData) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{34}
}

func (x *GetAppointmentRemainingFastData) GetRecommends() []*Recommend {
	if x != nil {
		return x.Recommends
	}
	return nil
}

type Recommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId    string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Time        string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	IsNextDay   bool   `protobuf:"varint,3,opt,name=is_next_day,json=isNextDay,proto3" json:"is_next_day,omitempty"`
	RoomTypeId  string `protobuf:"bytes,4,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"`
	RoomName    string `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Distance    int32  `protobuf:"varint,6,opt,name=distance,proto3" json:"distance,omitempty"`
	CustomerMax int32  `protobuf:"varint,7,opt,name=customer_max,json=customerMax,proto3" json:"customer_max,omitempty"`
	CustomerMin int32  `protobuf:"varint,8,opt,name=customer_min,json=customerMin,proto3" json:"customer_min,omitempty"`
	DepositFee  int32  `protobuf:"varint,9,opt,name=deposit_fee,json=depositFee,proto3" json:"deposit_fee,omitempty"`
}

func (x *Recommend) Reset() {
	*x = Recommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recommend) ProtoMessage() {}

func (x *Recommend) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recommend.ProtoReflect.Descriptor instead.
func (*Recommend) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{35}
}

func (x *Recommend) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *Recommend) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Recommend) GetIsNextDay() bool {
	if x != nil {
		return x.IsNextDay
	}
	return false
}

func (x *Recommend) GetRoomTypeId() string {
	if x != nil {
		return x.RoomTypeId
	}
	return ""
}

func (x *Recommend) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Recommend) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Recommend) GetCustomerMax() int32 {
	if x != nil {
		return x.CustomerMax
	}
	return 0
}

func (x *Recommend) GetCustomerMin() int32 {
	if x != nil {
		return x.CustomerMin
	}
	return 0
}

func (x *Recommend) GetDepositFee() int32 {
	if x != nil {
		return x.DepositFee
	}
	return 0
}

type DeleteAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAppointmentRequest) Reset() {
	*x = DeleteAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppointmentRequest) ProtoMessage() {}

func (x *DeleteAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppointmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAppointmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAppointmentBreachLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone     string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneCode string `protobuf:"bytes,2,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
}

func (x *GetAppointmentBreachLimitRequest) Reset() {
	*x = GetAppointmentBreachLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentBreachLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentBreachLimitRequest) ProtoMessage() {}

func (x *GetAppointmentBreachLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentBreachLimitRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentBreachLimitRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{37}
}

func (x *GetAppointmentBreachLimitRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetAppointmentBreachLimitRequest) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

type GetAppointmentBreachLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32                          `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                         `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Data         *GetAppointmentBreachLimitData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppointmentBreachLimitResponse) Reset() {
	*x = GetAppointmentBreachLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentBreachLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentBreachLimitResponse) ProtoMessage() {}

func (x *GetAppointmentBreachLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentBreachLimitResponse.ProtoReflect.Descriptor instead.
func (*GetAppointmentBreachLimitResponse) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{38}
}

func (x *GetAppointmentBreachLimitResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAppointmentBreachLimitResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetAppointmentBreachLimitResponse) GetData() *GetAppointmentBreachLimitData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAppointmentBreachLimitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num   int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAppointmentBreachLimitData) Reset() {
	*x = GetAppointmentBreachLimitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentBreachLimitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentBreachLimitData) ProtoMessage() {}

func (x *GetAppointmentBreachLimitData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentBreachLimitData.ProtoReflect.Descriptor instead.
func (*GetAppointmentBreachLimitData) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{39}
}

func (x *GetAppointmentBreachLimitData) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetAppointmentBreachLimitData) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AppointmentOpenRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RoomId string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OpenAt int32  `protobuf:"varint,3,opt,name=open_at,json=openAt,proto3" json:"open_at,omitempty"`
}

func (x *AppointmentOpenRoomRequest) Reset() {
	*x = AppointmentOpenRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentOpenRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentOpenRoomRequest) ProtoMessage() {}

func (x *AppointmentOpenRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentOpenRoomRequest.ProtoReflect.Descriptor instead.
func (*AppointmentOpenRoomRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{40}
}

func (x *AppointmentOpenRoomRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppointmentOpenRoomRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *AppointmentOpenRoomRequest) GetOpenAt() int32 {
	if x != nil {
		return x.OpenAt
	}
	return 0
}

type AppointmentCancelOpenRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AppointmentCancelOpenRoomRequest) Reset() {
	*x = AppointmentCancelOpenRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentCancelOpenRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentCancelOpenRoomRequest) ProtoMessage() {}

func (x *AppointmentCancelOpenRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentCancelOpenRoomRequest.ProtoReflect.Descriptor instead.
func (*AppointmentCancelOpenRoomRequest) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{41}
}

func (x *AppointmentCancelOpenRoomRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Appointment_WechatID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time int32  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Appointment_WechatID) Reset() {
	*x = Appointment_WechatID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appointment_WechatID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appointment_WechatID) ProtoMessage() {}

func (x *Appointment_WechatID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appointment_WechatID.ProtoReflect.Descriptor instead.
func (*Appointment_WechatID) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Appointment_WechatID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Appointment_WechatID) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GetAppointmentsData_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointment *Appointment   `protobuf:"bytes,1,opt,name=appointment,proto3" json:"appointment,omitempty"`
	Theme       *ThemeRoomType `protobuf:"bytes,2,opt,name=theme,proto3" json:"theme,omitempty"`
}

func (x *GetAppointmentsData_Data) Reset() {
	*x = GetAppointmentsData_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentsData_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentsData_Data) ProtoMessage() {}

func (x *GetAppointmentsData_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentsData_Data.ProtoReflect.Descriptor instead.
func (*GetAppointmentsData_Data) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetAppointmentsData_Data) GetAppointment() *Appointment {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *GetAppointmentsData_Data) GetTheme() *ThemeRoomType {
	if x != nil {
		return x.Theme
	}
	return nil
}

type ShowAppointmentResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointment *Appointment   `protobuf:"bytes,1,opt,name=appointment,proto3" json:"appointment,omitempty"`
	Theme       *ThemeRoomType `protobuf:"bytes,2,opt,name=theme,proto3" json:"theme,omitempty"`
}

func (x *ShowAppointmentResponse_Data) Reset() {
	*x = ShowAppointmentResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_appointment_appointment_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAppointmentResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAppointmentResponse_Data) ProtoMessage() {}

func (x *ShowAppointmentResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_appointment_appointment_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAppointmentResponse_Data.ProtoReflect.Descriptor instead.
func (*ShowAppointmentResponse_Data) Descriptor() ([]byte, []int) {
	return file_proto_appointment_appointment_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ShowAppointmentResponse_Data) GetAppointment() *Appointment {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *ShowAppointmentResponse_Data) GetTheme() *ThemeRoomType {
	if x != nil {
		return x.Theme
	}
	return nil
}

var File_proto_appointment_appointment_proto protoreflect.FileDescriptor

var file_proto_appointment_appointment_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x0a, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77,
	0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6b, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x52, 0x09, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x2e, 0x0a, 0x08, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x19,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x27, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x18, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xbe, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x49, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x1a, 0x74, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x61,
	0x79, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x97, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x0b, 0x72, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x22, 0x7b, 0x0a, 0x0b, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x9b, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xd7, 0x01,
	0x0a, 0x20, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x92, 0x02, 0x0a, 0x17, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x74, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x09, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x77, 0x61, 0x79, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x79, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x06, 0x77, 0x61, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x14, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x37, 0x0a,
	0x11, 0x57, 0x61, 0x79, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x77, 0x61, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x73, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x5e, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x74,
	0x22, 0x32, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x32, 0xf8, 0x2c, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x27, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x76, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x17, 0x53, 0x68,
	0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0f, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x41, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x1c,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1b,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x19, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x2d, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0xca, 0x02, 0x1b, 0x4f, 0x6d, 0x79, 0x5c, 0x43, 0x72, 0x69, 0x75, 0x73, 0x5c, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_appointment_appointment_proto_rawDescOnce sync.Once
	file_proto_appointment_appointment_proto_rawDescData = file_proto_appointment_appointment_proto_rawDesc
)

func file_proto_appointment_appointment_proto_rawDescGZIP() []byte {
	file_proto_appointment_appointment_proto_rawDescOnce.Do(func() {
		file_proto_appointment_appointment_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_appointment_appointment_proto_rawDescData)
	})
	return file_proto_appointment_appointment_proto_rawDescData
}

var file_proto_appointment_appointment_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_proto_appointment_appointment_proto_goTypes = []interface{}{
	(*Response)(nil),                                    // 0: appointment.Response
	(*Appointment)(nil),                                 // 1: appointment.Appointment
	(*CreateAppointmentRequest)(nil),                    // 2: appointment.CreateAppointmentRequest
	(*CreateAppointmentResponse)(nil),                   // 3: appointment.CreateAppointmentResponse
	(*CancelAppointmentRequest)(nil),                    // 4: appointment.CancelAppointmentRequest
	(*CancelAppointmentResponse)(nil),                   // 5: appointment.CancelAppointmentResponse
	(*PayAppointmentRequest)(nil),                       // 6: appointment.PayAppointmentRequest
	(*RefundAppointmentRequest)(nil),                    // 7: appointment.RefundAppointmentRequest
	(*ArriveAppointmentRequest)(nil),                    // 8: appointment.ArriveAppointmentRequest
	(*GetAppointmentsRequest)(nil),                      // 9: appointment.GetAppointmentsRequest
	(*GetAppointmentsResponse)(nil),                     // 10: appointment.GetAppointmentsResponse
	(*GetAppointmentsData)(nil),                         // 11: appointment.GetAppointmentsData
	(*UpdateAppointmentRequest)(nil),                    // 12: appointment.UpdateAppointmentRequest
	(*UpdateAppointmentResponse)(nil),                   // 13: appointment.UpdateAppointmentResponse
	(*UpdateAppointmentData)(nil),                       // 14: appointment.UpdateAppointmentData
	(*GetAppointmentRemainingRequest)(nil),              // 15: appointment.GetAppointmentRemainingRequest
	(*GetAppointmentRemainingResponse)(nil),             // 16: appointment.GetAppointmentRemainingResponse
	(*AppointmentRemaining)(nil),                        // 17: appointment.AppointmentRemaining
	(*RoomTypeNum)(nil),                                 // 18: appointment.RoomTypeNum
	(*GetAppointmentRecordRequest)(nil),                 // 19: appointment.GetAppointmentRecordRequest
	(*GetAppointmentRecordResponse)(nil),                // 20: appointment.GetAppointmentRecordResponse
	(*AppointmentRecord)(nil),                           // 21: appointment.AppointmentRecord
	(*SaveAppointmentTempNumberRequest)(nil),            // 22: appointment.SaveAppointmentTempNumberRequest
	(*ShowAppointmentRequest)(nil),                      // 23: appointment.ShowAppointmentRequest
	(*ShowAppointmentResponse)(nil),                     // 24: appointment.ShowAppointmentResponse
	(*UpdateAppointmentTradeInfoRequest)(nil),           // 25: appointment.UpdateAppointmentTradeInfoRequest
	(*GetAppointmentLimitRequest)(nil),                  // 26: appointment.GetAppointmentLimitRequest
	(*GetAppointmentLimitResponse)(nil),                 // 27: appointment.GetAppointmentLimitResponse
	(*GetAppointmentLimitData)(nil),                     // 28: appointment.GetAppointmentLimitData
	(*BranchAppointmentNum)(nil),                        // 29: appointment.BranchAppointmentNum
	(*WayAppointmentNum)(nil),                           // 30: appointment.WayAppointmentNum
	(*GetAppointmentRemainingFastRequest)(nil),          // 31: appointment.GetAppointmentRemainingFastRequest
	(*GetAppointmentRemainingFastBranches)(nil),         // 32: appointment.GetAppointmentRemainingFastBranches
	(*GetAppointmentRemainingFastResponse)(nil),         // 33: appointment.GetAppointmentRemainingFastResponse
	(*GetAppointmentRemainingFastData)(nil),             // 34: appointment.GetAppointmentRemainingFastData
	(*Recommend)(nil),                                   // 35: appointment.Recommend
	(*DeleteAppointmentRequest)(nil),                    // 36: appointment.DeleteAppointmentRequest
	(*GetAppointmentBreachLimitRequest)(nil),            // 37: appointment.GetAppointmentBreachLimitRequest
	(*GetAppointmentBreachLimitResponse)(nil),           // 38: appointment.GetAppointmentBreachLimitResponse
	(*GetAppointmentBreachLimitData)(nil),               // 39: appointment.GetAppointmentBreachLimitData
	(*AppointmentOpenRoomRequest)(nil),                  // 40: appointment.AppointmentOpenRoomRequest
	(*AppointmentCancelOpenRoomRequest)(nil),            // 41: appointment.AppointmentCancelOpenRoomRequest
	(*Appointment_WechatID)(nil),                        // 42: appointment.Appointment.WechatID
	(*GetAppointmentsData_Data)(nil),                    // 43: appointment.GetAppointmentsData.Data
	(*ShowAppointmentResponse_Data)(nil),                // 44: appointment.ShowAppointmentResponse.Data
	(*ThemeRoomType)(nil),                               // 45: appointment.ThemeRoomType
	(*AppointmentConfig)(nil),                           // 46: appointment.AppointmentConfig
	(*Empty)(nil),                                       // 47: appointment.Empty
	(*UpdateTemplateCalendarRequest)(nil),               // 48: appointment.UpdateTemplateCalendarRequest
	(*GetTemplateCalendarRequest)(nil),                  // 49: appointment.GetTemplateCalendarRequest
	(*SaveAppointmentTemplateRequest)(nil),              // 50: appointment.SaveAppointmentTemplateRequest
	(*ShowAppointmentTemplateRequest)(nil),              // 51: appointment.ShowAppointmentTemplateRequest
	(*GetAppointmentTemplateConfigsRequest)(nil),        // 52: appointment.GetAppointmentTemplateConfigsRequest
	(*UpdateAppointmentTemplateStatusRequest)(nil),      // 53: appointment.UpdateAppointmentTemplateStatusRequest
	(*SaveAppointmentLockRequest)(nil),                  // 54: appointment.SaveAppointmentLockRequest
	(*DeleteAppointmentLockRequest)(nil),                // 55: appointment.DeleteAppointmentLockRequest
	(*GetAppointmentTemplatesRequest)(nil),              // 56: appointment.GetAppointmentTemplatesRequest
	(*GetCallersRequest)(nil),                           // 57: appointment.GetCallersRequest
	(*GetCallerRecordsRequest)(nil),                     // 58: appointment.GetCallerRecordsRequest
	(*UpdateCallerRequest)(nil),                         // 59: appointment.UpdateCallerRequest
	(*CreateCallerRecordRequest)(nil),                   // 60: appointment.CreateCallerRecordRequest
	(*UpdateCallerBlackRequest)(nil),                    // 61: appointment.UpdateCallerBlackRequest
	(*UpdateCallerRecordActionRequest)(nil),             // 62: appointment.UpdateCallerRecordActionRequest
	(*ShowCallerByPhoneRequest)(nil),                    // 63: appointment.ShowCallerByPhoneRequest
	(*CreateAppointmentThemeCategoryRequest)(nil),       // 64: appointment.CreateAppointmentThemeCategoryRequest
	(*UpdateAppointmentThemeCategoryRequest)(nil),       // 65: appointment.UpdateAppointmentThemeCategoryRequest
	(*UpdateAppointmentThemeCategoryStatusRequest)(nil), // 66: appointment.UpdateAppointmentThemeCategoryStatusRequest
	(*GetAppointmentThemeCategoriesRequest)(nil),        // 67: appointment.GetAppointmentThemeCategoriesRequest
	(*ShowAppointmentThemeCategoryRequest)(nil),         // 68: appointment.ShowAppointmentThemeCategoryRequest
	(*CreateAppointmentThemeFeatureRequest)(nil),        // 69: appointment.CreateAppointmentThemeFeatureRequest
	(*UpdateAppointmentThemeFeatureRequest)(nil),        // 70: appointment.UpdateAppointmentThemeFeatureRequest
	(*UpdateAppointmentThemeFeatureStatusRequest)(nil),  // 71: appointment.UpdateAppointmentThemeFeatureStatusRequest
	(*GetAppointmentThemeFeaturesRequest)(nil),          // 72: appointment.GetAppointmentThemeFeaturesRequest
	(*ShowAppointmentThemeFeatureRequest)(nil),          // 73: appointment.ShowAppointmentThemeFeatureRequest
	(*CreateAppointmentThemeRequest)(nil),               // 74: appointment.CreateAppointmentThemeRequest
	(*UpdateAppointmentThemeRequest)(nil),               // 75: appointment.UpdateAppointmentThemeRequest
	(*UpdateAppointmentThemeStatusRequest)(nil),         // 76: appointment.UpdateAppointmentThemeStatusRequest
	(*GetAppointmentThemesRequest)(nil),                 // 77: appointment.GetAppointmentThemesRequest
	(*ShowAppointmentThemeRequest)(nil),                 // 78: appointment.ShowAppointmentThemeRequest
	(*GetAppointmentThemesByRoomTypeRequest)(nil),       // 79: appointment.GetAppointmentThemesByRoomTypeRequest
	(*JoinSharedAppointmentRequest)(nil),                // 80: appointment.JoinSharedAppointmentRequest
	(*UpdateAppointmentShareRequest)(nil),               // 81: appointment.UpdateAppointmentShareRequest
	(*GetAppointmentConfigResponse)(nil),                // 82: appointment.GetAppointmentConfigResponse
	(*GetTemplateCalendarResponse)(nil),                 // 83: appointment.GetTemplateCalendarResponse
	(*SaveAppointmentTemplateResponse)(nil),             // 84: appointment.SaveAppointmentTemplateResponse
	(*ShowAppointmentTemplateResponse)(nil),             // 85: appointment.ShowAppointmentTemplateResponse
	(*GetAppointmentTemplateConfigsResponse)(nil),       // 86: appointment.GetAppointmentTemplateConfigsResponse
	(*SaveAppointmentLockResponse)(nil),                 // 87: appointment.SaveAppointmentLockResponse
	(*GetAppointmentTemplatesResponse)(nil),             // 88: appointment.GetAppointmentTemplatesResponse
	(*GetCallersResponse)(nil),                          // 89: appointment.GetCallersResponse
	(*GetCallerRecordsResponse)(nil),                    // 90: appointment.GetCallerRecordsResponse
	(*CreateCallerRecordResponse)(nil),                  // 91: appointment.CreateCallerRecordResponse
	(*ShowCallerByPhoneResponse)(nil),                   // 92: appointment.ShowCallerByPhoneResponse
	(*GetAppointmentThemeCategoriesResponse)(nil),       // 93: appointment.GetAppointmentThemeCategoriesResponse
	(*ShowAppointmentThemeCategoryResponse)(nil),        // 94: appointment.ShowAppointmentThemeCategoryResponse
	(*GetAppointmentThemeFeaturesResponse)(nil),         // 95: appointment.GetAppointmentThemeFeaturesResponse
	(*ShowAppointmentThemeFeatureResponse)(nil),         // 96: appointment.ShowAppointmentThemeFeatureResponse
	(*GetAppointmentThemesResponse)(nil),                // 97: appointment.GetAppointmentThemesResponse
	(*ShowAppointmentThemeResponse)(nil),                // 98: appointment.ShowAppointmentThemeResponse
	(*GetAppointmentThemesByRoomTypeResponse)(nil),      // 99: appointment.GetAppointmentThemesByRoomTypeResponse
}
var file_proto_appointment_appointment_proto_depIdxs = []int32{
	42, // 0: appointment.Appointment.wechat_ids:type_name -> appointment.Appointment.WechatID
	1,  // 1: appointment.CreateAppointmentRequest.appointment:type_name -> appointment.Appointment
	11, // 2: appointment.GetAppointmentsResponse.data:type_name -> appointment.GetAppointmentsData
	43, // 3: appointment.GetAppointmentsData.appointments:type_name -> appointment.GetAppointmentsData.Data
	1,  // 4: appointment.UpdateAppointmentRequest.appointment:type_name -> appointment.Appointment
	14, // 5: appointment.UpdateAppointmentResponse.data:type_name -> appointment.UpdateAppointmentData
	17, // 6: appointment.GetAppointmentRemainingResponse.data:type_name -> appointment.AppointmentRemaining
	18, // 7: appointment.AppointmentRemaining.room_type_num:type_name -> appointment.RoomTypeNum
	21, // 8: appointment.GetAppointmentRecordResponse.data:type_name -> appointment.AppointmentRecord
	44, // 9: appointment.ShowAppointmentResponse.data:type_name -> appointment.ShowAppointmentResponse.Data
	28, // 10: appointment.GetAppointmentLimitResponse.data:type_name -> appointment.GetAppointmentLimitData
	29, // 11: appointment.GetAppointmentLimitData.branch_num:type_name -> appointment.BranchAppointmentNum
	30, // 12: appointment.GetAppointmentLimitData.way_num:type_name -> appointment.WayAppointmentNum
	32, // 13: appointment.GetAppointmentRemainingFastRequest.branches:type_name -> appointment.GetAppointmentRemainingFastBranches
	34, // 14: appointment.GetAppointmentRemainingFastResponse.data:type_name -> appointment.GetAppointmentRemainingFastData
	35, // 15: appointment.GetAppointmentRemainingFastData.recommends:type_name -> appointment.Recommend
	39, // 16: appointment.GetAppointmentBreachLimitResponse.data:type_name -> appointment.GetAppointmentBreachLimitData
	1,  // 17: appointment.GetAppointmentsData.Data.appointment:type_name -> appointment.Appointment
	45, // 18: appointment.GetAppointmentsData.Data.theme:type_name -> appointment.ThemeRoomType
	1,  // 19: appointment.ShowAppointmentResponse.Data.appointment:type_name -> appointment.Appointment
	45, // 20: appointment.ShowAppointmentResponse.Data.theme:type_name -> appointment.ThemeRoomType
	46, // 21: appointment.AppointmentServer.UpdateAppointmentConfig:input_type -> appointment.AppointmentConfig
	47, // 22: appointment.AppointmentServer.GetAppointmentConfig:input_type -> appointment.Empty
	48, // 23: appointment.AppointmentServer.UpdateTemplateCalendar:input_type -> appointment.UpdateTemplateCalendarRequest
	49, // 24: appointment.AppointmentServer.GetTemplateCalendar:input_type -> appointment.GetTemplateCalendarRequest
	50, // 25: appointment.AppointmentServer.SaveAppointmentTemplate:input_type -> appointment.SaveAppointmentTemplateRequest
	51, // 26: appointment.AppointmentServer.ShowAppointmentTemplate:input_type -> appointment.ShowAppointmentTemplateRequest
	52, // 27: appointment.AppointmentServer.GetAppointmentTemplateConfigs:input_type -> appointment.GetAppointmentTemplateConfigsRequest
	53, // 28: appointment.AppointmentServer.UpdateAppointmentTemplateStatus:input_type -> appointment.UpdateAppointmentTemplateStatusRequest
	2,  // 29: appointment.AppointmentServer.CreateAppointment:input_type -> appointment.CreateAppointmentRequest
	54, // 30: appointment.AppointmentServer.SaveAppointmentLock:input_type -> appointment.SaveAppointmentLockRequest
	55, // 31: appointment.AppointmentServer.DeleteAppointmentLock:input_type -> appointment.DeleteAppointmentLockRequest
	9,  // 32: appointment.AppointmentServer.GetAppointments:input_type -> appointment.GetAppointmentsRequest
	23, // 33: appointment.AppointmentServer.ShowAppointment:input_type -> appointment.ShowAppointmentRequest
	12, // 34: appointment.AppointmentServer.UpdateAppointment:input_type -> appointment.UpdateAppointmentRequest
	56, // 35: appointment.AppointmentServer.GetAppointmentTemplates:input_type -> appointment.GetAppointmentTemplatesRequest
	36, // 36: appointment.AppointmentServer.DeleteAppointment:input_type -> appointment.DeleteAppointmentRequest
	4,  // 37: appointment.AppointmentServer.CancelAppointment:input_type -> appointment.CancelAppointmentRequest
	6,  // 38: appointment.AppointmentServer.PayAppointment:input_type -> appointment.PayAppointmentRequest
	7,  // 39: appointment.AppointmentServer.RefundAppointment:input_type -> appointment.RefundAppointmentRequest
	8,  // 40: appointment.AppointmentServer.ArriveAppointment:input_type -> appointment.ArriveAppointmentRequest
	15, // 41: appointment.AppointmentServer.GetAppointmentRemaining:input_type -> appointment.GetAppointmentRemainingRequest
	31, // 42: appointment.AppointmentServer.GetAppointmentRemainingFast:input_type -> appointment.GetAppointmentRemainingFastRequest
	26, // 43: appointment.AppointmentServer.GetAppointmentLimit:input_type -> appointment.GetAppointmentLimitRequest
	19, // 44: appointment.AppointmentServer.GetAppointmentRecord:input_type -> appointment.GetAppointmentRecordRequest
	37, // 45: appointment.AppointmentServer.GetAppointmentBreachLimit:input_type -> appointment.GetAppointmentBreachLimitRequest
	22, // 46: appointment.AppointmentServer.SaveAppointmentTempNumber:input_type -> appointment.SaveAppointmentTempNumberRequest
	25, // 47: appointment.AppointmentServer.UpdateAppointmentTradeInfo:input_type -> appointment.UpdateAppointmentTradeInfoRequest
	57, // 48: appointment.AppointmentServer.GetCallers:input_type -> appointment.GetCallersRequest
	58, // 49: appointment.AppointmentServer.GetCallerRecords:input_type -> appointment.GetCallerRecordsRequest
	59, // 50: appointment.AppointmentServer.UpdateCaller:input_type -> appointment.UpdateCallerRequest
	60, // 51: appointment.AppointmentServer.CreateCallerRecord:input_type -> appointment.CreateCallerRecordRequest
	61, // 52: appointment.AppointmentServer.UpdateCallerBlack:input_type -> appointment.UpdateCallerBlackRequest
	62, // 53: appointment.AppointmentServer.UpdateCallerRecordAction:input_type -> appointment.UpdateCallerRecordActionRequest
	63, // 54: appointment.AppointmentServer.ShowCallerByPhone:input_type -> appointment.ShowCallerByPhoneRequest
	64, // 55: appointment.AppointmentServer.CreateAppointmentThemeCategory:input_type -> appointment.CreateAppointmentThemeCategoryRequest
	65, // 56: appointment.AppointmentServer.UpdateAppointmentThemeCategory:input_type -> appointment.UpdateAppointmentThemeCategoryRequest
	66, // 57: appointment.AppointmentServer.UpdateAppointmentThemeCategoryStatus:input_type -> appointment.UpdateAppointmentThemeCategoryStatusRequest
	67, // 58: appointment.AppointmentServer.GetAppointmentThemeCategories:input_type -> appointment.GetAppointmentThemeCategoriesRequest
	68, // 59: appointment.AppointmentServer.ShowAppointmentThemeCategory:input_type -> appointment.ShowAppointmentThemeCategoryRequest
	69, // 60: appointment.AppointmentServer.CreateAppointmentThemeFeature:input_type -> appointment.CreateAppointmentThemeFeatureRequest
	70, // 61: appointment.AppointmentServer.UpdateAppointmentThemeFeature:input_type -> appointment.UpdateAppointmentThemeFeatureRequest
	71, // 62: appointment.AppointmentServer.UpdateAppointmentThemeFeatureStatus:input_type -> appointment.UpdateAppointmentThemeFeatureStatusRequest
	72, // 63: appointment.AppointmentServer.GetAppointmentThemeFeatures:input_type -> appointment.GetAppointmentThemeFeaturesRequest
	73, // 64: appointment.AppointmentServer.ShowAppointmentThemeFeature:input_type -> appointment.ShowAppointmentThemeFeatureRequest
	74, // 65: appointment.AppointmentServer.CreateAppointmentTheme:input_type -> appointment.CreateAppointmentThemeRequest
	75, // 66: appointment.AppointmentServer.UpdateAppointmentTheme:input_type -> appointment.UpdateAppointmentThemeRequest
	76, // 67: appointment.AppointmentServer.UpdateAppointmentThemeStatus:input_type -> appointment.UpdateAppointmentThemeStatusRequest
	77, // 68: appointment.AppointmentServer.GetAppointmentThemes:input_type -> appointment.GetAppointmentThemesRequest
	78, // 69: appointment.AppointmentServer.ShowAppointmentTheme:input_type -> appointment.ShowAppointmentThemeRequest
	79, // 70: appointment.AppointmentServer.GetAppointmentThemesByRoomType:input_type -> appointment.GetAppointmentThemesByRoomTypeRequest
	80, // 71: appointment.AppointmentServer.JoinSharedAppointment:input_type -> appointment.JoinSharedAppointmentRequest
	81, // 72: appointment.AppointmentServer.UpdateAppointmentShare:input_type -> appointment.UpdateAppointmentShareRequest
	40, // 73: appointment.AppointmentServer.AppointmentOpenRoom:input_type -> appointment.AppointmentOpenRoomRequest
	41, // 74: appointment.AppointmentServer.AppointmentCancelOpenRoom:input_type -> appointment.AppointmentCancelOpenRoomRequest
	0,  // 75: appointment.AppointmentServer.UpdateAppointmentConfig:output_type -> appointment.Response
	82, // 76: appointment.AppointmentServer.GetAppointmentConfig:output_type -> appointment.GetAppointmentConfigResponse
	0,  // 77: appointment.AppointmentServer.UpdateTemplateCalendar:output_type -> appointment.Response
	83, // 78: appointment.AppointmentServer.GetTemplateCalendar:output_type -> appointment.GetTemplateCalendarResponse
	84, // 79: appointment.AppointmentServer.SaveAppointmentTemplate:output_type -> appointment.SaveAppointmentTemplateResponse
	85, // 80: appointment.AppointmentServer.ShowAppointmentTemplate:output_type -> appointment.ShowAppointmentTemplateResponse
	86, // 81: appointment.AppointmentServer.GetAppointmentTemplateConfigs:output_type -> appointment.GetAppointmentTemplateConfigsResponse
	0,  // 82: appointment.AppointmentServer.UpdateAppointmentTemplateStatus:output_type -> appointment.Response
	3,  // 83: appointment.AppointmentServer.CreateAppointment:output_type -> appointment.CreateAppointmentResponse
	87, // 84: appointment.AppointmentServer.SaveAppointmentLock:output_type -> appointment.SaveAppointmentLockResponse
	0,  // 85: appointment.AppointmentServer.DeleteAppointmentLock:output_type -> appointment.Response
	10, // 86: appointment.AppointmentServer.GetAppointments:output_type -> appointment.GetAppointmentsResponse
	24, // 87: appointment.AppointmentServer.ShowAppointment:output_type -> appointment.ShowAppointmentResponse
	13, // 88: appointment.AppointmentServer.UpdateAppointment:output_type -> appointment.UpdateAppointmentResponse
	88, // 89: appointment.AppointmentServer.GetAppointmentTemplates:output_type -> appointment.GetAppointmentTemplatesResponse
	0,  // 90: appointment.AppointmentServer.DeleteAppointment:output_type -> appointment.Response
	5,  // 91: appointment.AppointmentServer.CancelAppointment:output_type -> appointment.CancelAppointmentResponse
	0,  // 92: appointment.AppointmentServer.PayAppointment:output_type -> appointment.Response
	0,  // 93: appointment.AppointmentServer.RefundAppointment:output_type -> appointment.Response
	0,  // 94: appointment.AppointmentServer.ArriveAppointment:output_type -> appointment.Response
	16, // 95: appointment.AppointmentServer.GetAppointmentRemaining:output_type -> appointment.GetAppointmentRemainingResponse
	33, // 96: appointment.AppointmentServer.GetAppointmentRemainingFast:output_type -> appointment.GetAppointmentRemainingFastResponse
	27, // 97: appointment.AppointmentServer.GetAppointmentLimit:output_type -> appointment.GetAppointmentLimitResponse
	20, // 98: appointment.AppointmentServer.GetAppointmentRecord:output_type -> appointment.GetAppointmentRecordResponse
	38, // 99: appointment.AppointmentServer.GetAppointmentBreachLimit:output_type -> appointment.GetAppointmentBreachLimitResponse
	0,  // 100: appointment.AppointmentServer.SaveAppointmentTempNumber:output_type -> appointment.Response
	0,  // 101: appointment.AppointmentServer.UpdateAppointmentTradeInfo:output_type -> appointment.Response
	89, // 102: appointment.AppointmentServer.GetCallers:output_type -> appointment.GetCallersResponse
	90, // 103: appointment.AppointmentServer.GetCallerRecords:output_type -> appointment.GetCallerRecordsResponse
	0,  // 104: appointment.AppointmentServer.UpdateCaller:output_type -> appointment.Response
	91, // 105: appointment.AppointmentServer.CreateCallerRecord:output_type -> appointment.CreateCallerRecordResponse
	0,  // 106: appointment.AppointmentServer.UpdateCallerBlack:output_type -> appointment.Response
	0,  // 107: appointment.AppointmentServer.UpdateCallerRecordAction:output_type -> appointment.Response
	92, // 108: appointment.AppointmentServer.ShowCallerByPhone:output_type -> appointment.ShowCallerByPhoneResponse
	0,  // 109: appointment.AppointmentServer.CreateAppointmentThemeCategory:output_type -> appointment.Response
	0,  // 110: appointment.AppointmentServer.UpdateAppointmentThemeCategory:output_type -> appointment.Response
	0,  // 111: appointment.AppointmentServer.UpdateAppointmentThemeCategoryStatus:output_type -> appointment.Response
	93, // 112: appointment.AppointmentServer.GetAppointmentThemeCategories:output_type -> appointment.GetAppointmentThemeCategoriesResponse
	94, // 113: appointment.AppointmentServer.ShowAppointmentThemeCategory:output_type -> appointment.ShowAppointmentThemeCategoryResponse
	0,  // 114: appointment.AppointmentServer.CreateAppointmentThemeFeature:output_type -> appointment.Response
	0,  // 115: appointment.AppointmentServer.UpdateAppointmentThemeFeature:output_type -> appointment.Response
	0,  // 116: appointment.AppointmentServer.UpdateAppointmentThemeFeatureStatus:output_type -> appointment.Response
	95, // 117: appointment.AppointmentServer.GetAppointmentThemeFeatures:output_type -> appointment.GetAppointmentThemeFeaturesResponse
	96, // 118: appointment.AppointmentServer.ShowAppointmentThemeFeature:output_type -> appointment.ShowAppointmentThemeFeatureResponse
	0,  // 119: appointment.AppointmentServer.CreateAppointmentTheme:output_type -> appointment.Response
	0,  // 120: appointment.AppointmentServer.UpdateAppointmentTheme:output_type -> appointment.Response
	0,  // 121: appointment.AppointmentServer.UpdateAppointmentThemeStatus:output_type -> appointment.Response
	97, // 122: appointment.AppointmentServer.GetAppointmentThemes:output_type -> appointment.GetAppointmentThemesResponse
	98, // 123: appointment.AppointmentServer.ShowAppointmentTheme:output_type -> appointment.ShowAppointmentThemeResponse
	99, // 124: appointment.AppointmentServer.GetAppointmentThemesByRoomType:output_type -> appointment.GetAppointmentThemesByRoomTypeResponse
	0,  // 125: appointment.AppointmentServer.JoinSharedAppointment:output_type -> appointment.Response
	0,  // 126: appointment.AppointmentServer.UpdateAppointmentShare:output_type -> appointment.Response
	0,  // 127: appointment.AppointmentServer.AppointmentOpenRoom:output_type -> appointment.Response
	0,  // 128: appointment.AppointmentServer.AppointmentCancelOpenRoom:output_type -> appointment.Response
	75, // [75:129] is the sub-list for method output_type
	21, // [21:75] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_appointment_appointment_proto_init() }
func file_proto_appointment_appointment_proto_init() {
	if File_proto_appointment_appointment_proto != nil {
		return
	}
	file_proto_appointment_appointment_template_proto_init()
	file_proto_appointment_appointment_config_proto_init()
	file_proto_appointment_appointment_calendar_proto_init()
	file_proto_appointment_caller_proto_init()
	file_proto_appointment_caller_record_proto_init()
	file_proto_appointment_appointment_lock_proto_init()
	file_proto_appointment_appointment_theme_category_proto_init()
	file_proto_appointment_appointment_theme_feature_proto_init()
	file_proto_appointment_appointment_theme_proto_init()
	file_proto_appointment_appointment_share_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_appointment_appointment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appointment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArriveAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppointmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRemainingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRemainingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentRemaining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomTypeNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAppointmentTempNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppointmentTradeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentLimitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchAppointmentNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WayAppointmentNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRemainingFastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRemainingFastBranches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRemainingFastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRemainingFastData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentBreachLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentBreachLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentBreachLimitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentOpenRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentCancelOpenRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appointment_WechatID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentsData_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_appointment_appointment_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAppointmentResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_appointment_appointment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_appointment_appointment_proto_goTypes,
		DependencyIndexes: file_proto_appointment_appointment_proto_depIdxs,
		MessageInfos:      file_proto_appointment_appointment_proto_msgTypes,
	}.Build()
	File_proto_appointment_appointment_proto = out.File
	file_proto_appointment_appointment_proto_rawDesc = nil
	file_proto_appointment_appointment_proto_goTypes = nil
	file_proto_appointment_appointment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppointmentServerClient is the client API for AppointmentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppointmentServerClient interface {
	UpdateAppointmentConfig(ctx context.Context, in *AppointmentConfig, opts ...grpc.CallOption) (*Response, error)
	GetAppointmentConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAppointmentConfigResponse, error)
	UpdateTemplateCalendar(ctx context.Context, in *UpdateTemplateCalendarRequest, opts ...grpc.CallOption) (*Response, error)
	GetTemplateCalendar(ctx context.Context, in *GetTemplateCalendarRequest, opts ...grpc.CallOption) (*GetTemplateCalendarResponse, error)
	SaveAppointmentTemplate(ctx context.Context, in *SaveAppointmentTemplateRequest, opts ...grpc.CallOption) (*SaveAppointmentTemplateResponse, error)
	ShowAppointmentTemplate(ctx context.Context, in *ShowAppointmentTemplateRequest, opts ...grpc.CallOption) (*ShowAppointmentTemplateResponse, error)
	GetAppointmentTemplateConfigs(ctx context.Context, in *GetAppointmentTemplateConfigsRequest, opts ...grpc.CallOption) (*GetAppointmentTemplateConfigsResponse, error)
	UpdateAppointmentTemplateStatus(ctx context.Context, in *UpdateAppointmentTemplateStatusRequest, opts ...grpc.CallOption) (*Response, error)
	CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error)
	SaveAppointmentLock(ctx context.Context, in *SaveAppointmentLockRequest, opts ...grpc.CallOption) (*SaveAppointmentLockResponse, error)
	DeleteAppointmentLock(ctx context.Context, in *DeleteAppointmentLockRequest, opts ...grpc.CallOption) (*Response, error)
	GetAppointments(ctx context.Context, in *GetAppointmentsRequest, opts ...grpc.CallOption) (*GetAppointmentsResponse, error)
	ShowAppointment(ctx context.Context, in *ShowAppointmentRequest, opts ...grpc.CallOption) (*ShowAppointmentResponse, error)
	UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*UpdateAppointmentResponse, error)
	GetAppointmentTemplates(ctx context.Context, in *GetAppointmentTemplatesRequest, opts ...grpc.CallOption) (*GetAppointmentTemplatesResponse, error)
	DeleteAppointment(ctx context.Context, in *DeleteAppointmentRequest, opts ...grpc.CallOption) (*Response, error)
	CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*CancelAppointmentResponse, error)
	PayAppointment(ctx context.Context, in *PayAppointmentRequest, opts ...grpc.CallOption) (*Response, error)
	RefundAppointment(ctx context.Context, in *RefundAppointmentRequest, opts ...grpc.CallOption) (*Response, error)
	ArriveAppointment(ctx context.Context, in *ArriveAppointmentRequest, opts ...grpc.CallOption) (*Response, error)
	GetAppointmentRemaining(ctx context.Context, in *GetAppointmentRemainingRequest, opts ...grpc.CallOption) (*GetAppointmentRemainingResponse, error)
	GetAppointmentRemainingFast(ctx context.Context, in *GetAppointmentRemainingFastRequest, opts ...grpc.CallOption) (*GetAppointmentRemainingFastResponse, error)
	GetAppointmentLimit(ctx context.Context, in *GetAppointmentLimitRequest, opts ...grpc.CallOption) (*GetAppointmentLimitResponse, error)
	GetAppointmentRecord(ctx context.Context, in *GetAppointmentRecordRequest, opts ...grpc.CallOption) (*GetAppointmentRecordResponse, error)
	GetAppointmentBreachLimit(ctx context.Context, in *GetAppointmentBreachLimitRequest, opts ...grpc.CallOption) (*GetAppointmentBreachLimitResponse, error)
	SaveAppointmentTempNumber(ctx context.Context, in *SaveAppointmentTempNumberRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentTradeInfo(ctx context.Context, in *UpdateAppointmentTradeInfoRequest, opts ...grpc.CallOption) (*Response, error)
	GetCallers(ctx context.Context, in *GetCallersRequest, opts ...grpc.CallOption) (*GetCallersResponse, error)
	GetCallerRecords(ctx context.Context, in *GetCallerRecordsRequest, opts ...grpc.CallOption) (*GetCallerRecordsResponse, error)
	UpdateCaller(ctx context.Context, in *UpdateCallerRequest, opts ...grpc.CallOption) (*Response, error)
	CreateCallerRecord(ctx context.Context, in *CreateCallerRecordRequest, opts ...grpc.CallOption) (*CreateCallerRecordResponse, error)
	UpdateCallerBlack(ctx context.Context, in *UpdateCallerBlackRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateCallerRecordAction(ctx context.Context, in *UpdateCallerRecordActionRequest, opts ...grpc.CallOption) (*Response, error)
	ShowCallerByPhone(ctx context.Context, in *ShowCallerByPhoneRequest, opts ...grpc.CallOption) (*ShowCallerByPhoneResponse, error)
	// 主题分类
	CreateAppointmentThemeCategory(ctx context.Context, in *CreateAppointmentThemeCategoryRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentThemeCategory(ctx context.Context, in *UpdateAppointmentThemeCategoryRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentThemeCategoryStatus(ctx context.Context, in *UpdateAppointmentThemeCategoryStatusRequest, opts ...grpc.CallOption) (*Response, error)
	GetAppointmentThemeCategories(ctx context.Context, in *GetAppointmentThemeCategoriesRequest, opts ...grpc.CallOption) (*GetAppointmentThemeCategoriesResponse, error)
	ShowAppointmentThemeCategory(ctx context.Context, in *ShowAppointmentThemeCategoryRequest, opts ...grpc.CallOption) (*ShowAppointmentThemeCategoryResponse, error)
	// 主题特色
	CreateAppointmentThemeFeature(ctx context.Context, in *CreateAppointmentThemeFeatureRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentThemeFeature(ctx context.Context, in *UpdateAppointmentThemeFeatureRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentThemeFeatureStatus(ctx context.Context, in *UpdateAppointmentThemeFeatureStatusRequest, opts ...grpc.CallOption) (*Response, error)
	GetAppointmentThemeFeatures(ctx context.Context, in *GetAppointmentThemeFeaturesRequest, opts ...grpc.CallOption) (*GetAppointmentThemeFeaturesResponse, error)
	ShowAppointmentThemeFeature(ctx context.Context, in *ShowAppointmentThemeFeatureRequest, opts ...grpc.CallOption) (*ShowAppointmentThemeFeatureResponse, error)
	// 主题
	CreateAppointmentTheme(ctx context.Context, in *CreateAppointmentThemeRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentTheme(ctx context.Context, in *UpdateAppointmentThemeRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentThemeStatus(ctx context.Context, in *UpdateAppointmentThemeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	GetAppointmentThemes(ctx context.Context, in *GetAppointmentThemesRequest, opts ...grpc.CallOption) (*GetAppointmentThemesResponse, error)
	ShowAppointmentTheme(ctx context.Context, in *ShowAppointmentThemeRequest, opts ...grpc.CallOption) (*ShowAppointmentThemeResponse, error)
	GetAppointmentThemesByRoomType(ctx context.Context, in *GetAppointmentThemesByRoomTypeRequest, opts ...grpc.CallOption) (*GetAppointmentThemesByRoomTypeResponse, error)
	JoinSharedAppointment(ctx context.Context, in *JoinSharedAppointmentRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAppointmentShare(ctx context.Context, in *UpdateAppointmentShareRequest, opts ...grpc.CallOption) (*Response, error)
	AppointmentOpenRoom(ctx context.Context, in *AppointmentOpenRoomRequest, opts ...grpc.CallOption) (*Response, error)
	AppointmentCancelOpenRoom(ctx context.Context, in *AppointmentCancelOpenRoomRequest, opts ...grpc.CallOption) (*Response, error)
}

type appointmentServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServerClient(cc grpc.ClientConnInterface) AppointmentServerClient {
	return &appointmentServerClient{cc}
}

func (c *appointmentServerClient) UpdateAppointmentConfig(ctx context.Context, in *AppointmentConfig, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAppointmentConfigResponse, error) {
	out := new(GetAppointmentConfigResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateTemplateCalendar(ctx context.Context, in *UpdateTemplateCalendarRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateTemplateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetTemplateCalendar(ctx context.Context, in *GetTemplateCalendarRequest, opts ...grpc.CallOption) (*GetTemplateCalendarResponse, error) {
	out := new(GetTemplateCalendarResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetTemplateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) SaveAppointmentTemplate(ctx context.Context, in *SaveAppointmentTemplateRequest, opts ...grpc.CallOption) (*SaveAppointmentTemplateResponse, error) {
	out := new(SaveAppointmentTemplateResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/SaveAppointmentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ShowAppointmentTemplate(ctx context.Context, in *ShowAppointmentTemplateRequest, opts ...grpc.CallOption) (*ShowAppointmentTemplateResponse, error) {
	out := new(ShowAppointmentTemplateResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ShowAppointmentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentTemplateConfigs(ctx context.Context, in *GetAppointmentTemplateConfigsRequest, opts ...grpc.CallOption) (*GetAppointmentTemplateConfigsResponse, error) {
	out := new(GetAppointmentTemplateConfigsResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentTemplateConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentTemplateStatus(ctx context.Context, in *UpdateAppointmentTemplateStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentTemplateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error) {
	out := new(CreateAppointmentResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/CreateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) SaveAppointmentLock(ctx context.Context, in *SaveAppointmentLockRequest, opts ...grpc.CallOption) (*SaveAppointmentLockResponse, error) {
	out := new(SaveAppointmentLockResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/SaveAppointmentLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) DeleteAppointmentLock(ctx context.Context, in *DeleteAppointmentLockRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/DeleteAppointmentLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointments(ctx context.Context, in *GetAppointmentsRequest, opts ...grpc.CallOption) (*GetAppointmentsResponse, error) {
	out := new(GetAppointmentsResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ShowAppointment(ctx context.Context, in *ShowAppointmentRequest, opts ...grpc.CallOption) (*ShowAppointmentResponse, error) {
	out := new(ShowAppointmentResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ShowAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*UpdateAppointmentResponse, error) {
	out := new(UpdateAppointmentResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentTemplates(ctx context.Context, in *GetAppointmentTemplatesRequest, opts ...grpc.CallOption) (*GetAppointmentTemplatesResponse, error) {
	out := new(GetAppointmentTemplatesResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) DeleteAppointment(ctx context.Context, in *DeleteAppointmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/DeleteAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*CancelAppointmentResponse, error) {
	out := new(CancelAppointmentResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/CancelAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) PayAppointment(ctx context.Context, in *PayAppointmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/PayAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) RefundAppointment(ctx context.Context, in *RefundAppointmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/RefundAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ArriveAppointment(ctx context.Context, in *ArriveAppointmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ArriveAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentRemaining(ctx context.Context, in *GetAppointmentRemainingRequest, opts ...grpc.CallOption) (*GetAppointmentRemainingResponse, error) {
	out := new(GetAppointmentRemainingResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentRemaining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentRemainingFast(ctx context.Context, in *GetAppointmentRemainingFastRequest, opts ...grpc.CallOption) (*GetAppointmentRemainingFastResponse, error) {
	out := new(GetAppointmentRemainingFastResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentRemainingFast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentLimit(ctx context.Context, in *GetAppointmentLimitRequest, opts ...grpc.CallOption) (*GetAppointmentLimitResponse, error) {
	out := new(GetAppointmentLimitResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentRecord(ctx context.Context, in *GetAppointmentRecordRequest, opts ...grpc.CallOption) (*GetAppointmentRecordResponse, error) {
	out := new(GetAppointmentRecordResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentBreachLimit(ctx context.Context, in *GetAppointmentBreachLimitRequest, opts ...grpc.CallOption) (*GetAppointmentBreachLimitResponse, error) {
	out := new(GetAppointmentBreachLimitResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentBreachLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) SaveAppointmentTempNumber(ctx context.Context, in *SaveAppointmentTempNumberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/SaveAppointmentTempNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentTradeInfo(ctx context.Context, in *UpdateAppointmentTradeInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentTradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetCallers(ctx context.Context, in *GetCallersRequest, opts ...grpc.CallOption) (*GetCallersResponse, error) {
	out := new(GetCallersResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetCallers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetCallerRecords(ctx context.Context, in *GetCallerRecordsRequest, opts ...grpc.CallOption) (*GetCallerRecordsResponse, error) {
	out := new(GetCallerRecordsResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetCallerRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateCaller(ctx context.Context, in *UpdateCallerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) CreateCallerRecord(ctx context.Context, in *CreateCallerRecordRequest, opts ...grpc.CallOption) (*CreateCallerRecordResponse, error) {
	out := new(CreateCallerRecordResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/CreateCallerRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateCallerBlack(ctx context.Context, in *UpdateCallerBlackRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateCallerBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateCallerRecordAction(ctx context.Context, in *UpdateCallerRecordActionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateCallerRecordAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ShowCallerByPhone(ctx context.Context, in *ShowCallerByPhoneRequest, opts ...grpc.CallOption) (*ShowCallerByPhoneResponse, error) {
	out := new(ShowCallerByPhoneResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ShowCallerByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) CreateAppointmentThemeCategory(ctx context.Context, in *CreateAppointmentThemeCategoryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/CreateAppointmentThemeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentThemeCategory(ctx context.Context, in *UpdateAppointmentThemeCategoryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentThemeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentThemeCategoryStatus(ctx context.Context, in *UpdateAppointmentThemeCategoryStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentThemeCategoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentThemeCategories(ctx context.Context, in *GetAppointmentThemeCategoriesRequest, opts ...grpc.CallOption) (*GetAppointmentThemeCategoriesResponse, error) {
	out := new(GetAppointmentThemeCategoriesResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentThemeCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ShowAppointmentThemeCategory(ctx context.Context, in *ShowAppointmentThemeCategoryRequest, opts ...grpc.CallOption) (*ShowAppointmentThemeCategoryResponse, error) {
	out := new(ShowAppointmentThemeCategoryResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ShowAppointmentThemeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) CreateAppointmentThemeFeature(ctx context.Context, in *CreateAppointmentThemeFeatureRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/CreateAppointmentThemeFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentThemeFeature(ctx context.Context, in *UpdateAppointmentThemeFeatureRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentThemeFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentThemeFeatureStatus(ctx context.Context, in *UpdateAppointmentThemeFeatureStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentThemeFeatureStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentThemeFeatures(ctx context.Context, in *GetAppointmentThemeFeaturesRequest, opts ...grpc.CallOption) (*GetAppointmentThemeFeaturesResponse, error) {
	out := new(GetAppointmentThemeFeaturesResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentThemeFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ShowAppointmentThemeFeature(ctx context.Context, in *ShowAppointmentThemeFeatureRequest, opts ...grpc.CallOption) (*ShowAppointmentThemeFeatureResponse, error) {
	out := new(ShowAppointmentThemeFeatureResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ShowAppointmentThemeFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) CreateAppointmentTheme(ctx context.Context, in *CreateAppointmentThemeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/CreateAppointmentTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentTheme(ctx context.Context, in *UpdateAppointmentThemeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentThemeStatus(ctx context.Context, in *UpdateAppointmentThemeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentThemeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentThemes(ctx context.Context, in *GetAppointmentThemesRequest, opts ...grpc.CallOption) (*GetAppointmentThemesResponse, error) {
	out := new(GetAppointmentThemesResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentThemes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) ShowAppointmentTheme(ctx context.Context, in *ShowAppointmentThemeRequest, opts ...grpc.CallOption) (*ShowAppointmentThemeResponse, error) {
	out := new(ShowAppointmentThemeResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/ShowAppointmentTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) GetAppointmentThemesByRoomType(ctx context.Context, in *GetAppointmentThemesByRoomTypeRequest, opts ...grpc.CallOption) (*GetAppointmentThemesByRoomTypeResponse, error) {
	out := new(GetAppointmentThemesByRoomTypeResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/GetAppointmentThemesByRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) JoinSharedAppointment(ctx context.Context, in *JoinSharedAppointmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/JoinSharedAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) UpdateAppointmentShare(ctx context.Context, in *UpdateAppointmentShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/UpdateAppointmentShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) AppointmentOpenRoom(ctx context.Context, in *AppointmentOpenRoomRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/AppointmentOpenRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServerClient) AppointmentCancelOpenRoom(ctx context.Context, in *AppointmentCancelOpenRoomRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentServer/AppointmentCancelOpenRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServerServer is the server API for AppointmentServer service.
type AppointmentServerServer interface {
	UpdateAppointmentConfig(context.Context, *AppointmentConfig) (*Response, error)
	GetAppointmentConfig(context.Context, *Empty) (*GetAppointmentConfigResponse, error)
	UpdateTemplateCalendar(context.Context, *UpdateTemplateCalendarRequest) (*Response, error)
	GetTemplateCalendar(context.Context, *GetTemplateCalendarRequest) (*GetTemplateCalendarResponse, error)
	SaveAppointmentTemplate(context.Context, *SaveAppointmentTemplateRequest) (*SaveAppointmentTemplateResponse, error)
	ShowAppointmentTemplate(context.Context, *ShowAppointmentTemplateRequest) (*ShowAppointmentTemplateResponse, error)
	GetAppointmentTemplateConfigs(context.Context, *GetAppointmentTemplateConfigsRequest) (*GetAppointmentTemplateConfigsResponse, error)
	UpdateAppointmentTemplateStatus(context.Context, *UpdateAppointmentTemplateStatusRequest) (*Response, error)
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error)
	SaveAppointmentLock(context.Context, *SaveAppointmentLockRequest) (*SaveAppointmentLockResponse, error)
	DeleteAppointmentLock(context.Context, *DeleteAppointmentLockRequest) (*Response, error)
	GetAppointments(context.Context, *GetAppointmentsRequest) (*GetAppointmentsResponse, error)
	ShowAppointment(context.Context, *ShowAppointmentRequest) (*ShowAppointmentResponse, error)
	UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*UpdateAppointmentResponse, error)
	GetAppointmentTemplates(context.Context, *GetAppointmentTemplatesRequest) (*GetAppointmentTemplatesResponse, error)
	DeleteAppointment(context.Context, *DeleteAppointmentRequest) (*Response, error)
	CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error)
	PayAppointment(context.Context, *PayAppointmentRequest) (*Response, error)
	RefundAppointment(context.Context, *RefundAppointmentRequest) (*Response, error)
	ArriveAppointment(context.Context, *ArriveAppointmentRequest) (*Response, error)
	GetAppointmentRemaining(context.Context, *GetAppointmentRemainingRequest) (*GetAppointmentRemainingResponse, error)
	GetAppointmentRemainingFast(context.Context, *GetAppointmentRemainingFastRequest) (*GetAppointmentRemainingFastResponse, error)
	GetAppointmentLimit(context.Context, *GetAppointmentLimitRequest) (*GetAppointmentLimitResponse, error)
	GetAppointmentRecord(context.Context, *GetAppointmentRecordRequest) (*GetAppointmentRecordResponse, error)
	GetAppointmentBreachLimit(context.Context, *GetAppointmentBreachLimitRequest) (*GetAppointmentBreachLimitResponse, error)
	SaveAppointmentTempNumber(context.Context, *SaveAppointmentTempNumberRequest) (*Response, error)
	UpdateAppointmentTradeInfo(context.Context, *UpdateAppointmentTradeInfoRequest) (*Response, error)
	GetCallers(context.Context, *GetCallersRequest) (*GetCallersResponse, error)
	GetCallerRecords(context.Context, *GetCallerRecordsRequest) (*GetCallerRecordsResponse, error)
	UpdateCaller(context.Context, *UpdateCallerRequest) (*Response, error)
	CreateCallerRecord(context.Context, *CreateCallerRecordRequest) (*CreateCallerRecordResponse, error)
	UpdateCallerBlack(context.Context, *UpdateCallerBlackRequest) (*Response, error)
	UpdateCallerRecordAction(context.Context, *UpdateCallerRecordActionRequest) (*Response, error)
	ShowCallerByPhone(context.Context, *ShowCallerByPhoneRequest) (*ShowCallerByPhoneResponse, error)
	// 主题分类
	CreateAppointmentThemeCategory(context.Context, *CreateAppointmentThemeCategoryRequest) (*Response, error)
	UpdateAppointmentThemeCategory(context.Context, *UpdateAppointmentThemeCategoryRequest) (*Response, error)
	UpdateAppointmentThemeCategoryStatus(context.Context, *UpdateAppointmentThemeCategoryStatusRequest) (*Response, error)
	GetAppointmentThemeCategories(context.Context, *GetAppointmentThemeCategoriesRequest) (*GetAppointmentThemeCategoriesResponse, error)
	ShowAppointmentThemeCategory(context.Context, *ShowAppointmentThemeCategoryRequest) (*ShowAppointmentThemeCategoryResponse, error)
	// 主题特色
	CreateAppointmentThemeFeature(context.Context, *CreateAppointmentThemeFeatureRequest) (*Response, error)
	UpdateAppointmentThemeFeature(context.Context, *UpdateAppointmentThemeFeatureRequest) (*Response, error)
	UpdateAppointmentThemeFeatureStatus(context.Context, *UpdateAppointmentThemeFeatureStatusRequest) (*Response, error)
	GetAppointmentThemeFeatures(context.Context, *GetAppointmentThemeFeaturesRequest) (*GetAppointmentThemeFeaturesResponse, error)
	ShowAppointmentThemeFeature(context.Context, *ShowAppointmentThemeFeatureRequest) (*ShowAppointmentThemeFeatureResponse, error)
	// 主题
	CreateAppointmentTheme(context.Context, *CreateAppointmentThemeRequest) (*Response, error)
	UpdateAppointmentTheme(context.Context, *UpdateAppointmentThemeRequest) (*Response, error)
	UpdateAppointmentThemeStatus(context.Context, *UpdateAppointmentThemeStatusRequest) (*Response, error)
	GetAppointmentThemes(context.Context, *GetAppointmentThemesRequest) (*GetAppointmentThemesResponse, error)
	ShowAppointmentTheme(context.Context, *ShowAppointmentThemeRequest) (*ShowAppointmentThemeResponse, error)
	GetAppointmentThemesByRoomType(context.Context, *GetAppointmentThemesByRoomTypeRequest) (*GetAppointmentThemesByRoomTypeResponse, error)
	JoinSharedAppointment(context.Context, *JoinSharedAppointmentRequest) (*Response, error)
	UpdateAppointmentShare(context.Context, *UpdateAppointmentShareRequest) (*Response, error)
	AppointmentOpenRoom(context.Context, *AppointmentOpenRoomRequest) (*Response, error)
	AppointmentCancelOpenRoom(context.Context, *AppointmentCancelOpenRoomRequest) (*Response, error)
}

// UnimplementedAppointmentServerServer can be embedded to have forward compatible implementations.
type UnimplementedAppointmentServerServer struct {
}

func (*UnimplementedAppointmentServerServer) UpdateAppointmentConfig(context.Context, *AppointmentConfig) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentConfig not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentConfig(context.Context, *Empty) (*GetAppointmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentConfig not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateTemplateCalendar(context.Context, *UpdateTemplateCalendarRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateCalendar not implemented")
}
func (*UnimplementedAppointmentServerServer) GetTemplateCalendar(context.Context, *GetTemplateCalendarRequest) (*GetTemplateCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateCalendar not implemented")
}
func (*UnimplementedAppointmentServerServer) SaveAppointmentTemplate(context.Context, *SaveAppointmentTemplateRequest) (*SaveAppointmentTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppointmentTemplate not implemented")
}
func (*UnimplementedAppointmentServerServer) ShowAppointmentTemplate(context.Context, *ShowAppointmentTemplateRequest) (*ShowAppointmentTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppointmentTemplate not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentTemplateConfigs(context.Context, *GetAppointmentTemplateConfigsRequest) (*GetAppointmentTemplateConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentTemplateConfigs not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentTemplateStatus(context.Context, *UpdateAppointmentTemplateStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentTemplateStatus not implemented")
}
func (*UnimplementedAppointmentServerServer) CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) SaveAppointmentLock(context.Context, *SaveAppointmentLockRequest) (*SaveAppointmentLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppointmentLock not implemented")
}
func (*UnimplementedAppointmentServerServer) DeleteAppointmentLock(context.Context, *DeleteAppointmentLockRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointmentLock not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointments(context.Context, *GetAppointmentsRequest) (*GetAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointments not implemented")
}
func (*UnimplementedAppointmentServerServer) ShowAppointment(context.Context, *ShowAppointmentRequest) (*ShowAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*UpdateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentTemplates(context.Context, *GetAppointmentTemplatesRequest) (*GetAppointmentTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentTemplates not implemented")
}
func (*UnimplementedAppointmentServerServer) DeleteAppointment(context.Context, *DeleteAppointmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) PayAppointment(context.Context, *PayAppointmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) RefundAppointment(context.Context, *RefundAppointmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) ArriveAppointment(context.Context, *ArriveAppointmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArriveAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentRemaining(context.Context, *GetAppointmentRemainingRequest) (*GetAppointmentRemainingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentRemaining not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentRemainingFast(context.Context, *GetAppointmentRemainingFastRequest) (*GetAppointmentRemainingFastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentRemainingFast not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentLimit(context.Context, *GetAppointmentLimitRequest) (*GetAppointmentLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentLimit not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentRecord(context.Context, *GetAppointmentRecordRequest) (*GetAppointmentRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentRecord not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentBreachLimit(context.Context, *GetAppointmentBreachLimitRequest) (*GetAppointmentBreachLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentBreachLimit not implemented")
}
func (*UnimplementedAppointmentServerServer) SaveAppointmentTempNumber(context.Context, *SaveAppointmentTempNumberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppointmentTempNumber not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentTradeInfo(context.Context, *UpdateAppointmentTradeInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentTradeInfo not implemented")
}
func (*UnimplementedAppointmentServerServer) GetCallers(context.Context, *GetCallersRequest) (*GetCallersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallers not implemented")
}
func (*UnimplementedAppointmentServerServer) GetCallerRecords(context.Context, *GetCallerRecordsRequest) (*GetCallerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallerRecords not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateCaller(context.Context, *UpdateCallerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCaller not implemented")
}
func (*UnimplementedAppointmentServerServer) CreateCallerRecord(context.Context, *CreateCallerRecordRequest) (*CreateCallerRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCallerRecord not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateCallerBlack(context.Context, *UpdateCallerBlackRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCallerBlack not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateCallerRecordAction(context.Context, *UpdateCallerRecordActionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCallerRecordAction not implemented")
}
func (*UnimplementedAppointmentServerServer) ShowCallerByPhone(context.Context, *ShowCallerByPhoneRequest) (*ShowCallerByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCallerByPhone not implemented")
}
func (*UnimplementedAppointmentServerServer) CreateAppointmentThemeCategory(context.Context, *CreateAppointmentThemeCategoryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointmentThemeCategory not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentThemeCategory(context.Context, *UpdateAppointmentThemeCategoryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentThemeCategory not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentThemeCategoryStatus(context.Context, *UpdateAppointmentThemeCategoryStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentThemeCategoryStatus not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentThemeCategories(context.Context, *GetAppointmentThemeCategoriesRequest) (*GetAppointmentThemeCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentThemeCategories not implemented")
}
func (*UnimplementedAppointmentServerServer) ShowAppointmentThemeCategory(context.Context, *ShowAppointmentThemeCategoryRequest) (*ShowAppointmentThemeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppointmentThemeCategory not implemented")
}
func (*UnimplementedAppointmentServerServer) CreateAppointmentThemeFeature(context.Context, *CreateAppointmentThemeFeatureRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointmentThemeFeature not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentThemeFeature(context.Context, *UpdateAppointmentThemeFeatureRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentThemeFeature not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentThemeFeatureStatus(context.Context, *UpdateAppointmentThemeFeatureStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentThemeFeatureStatus not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentThemeFeatures(context.Context, *GetAppointmentThemeFeaturesRequest) (*GetAppointmentThemeFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentThemeFeatures not implemented")
}
func (*UnimplementedAppointmentServerServer) ShowAppointmentThemeFeature(context.Context, *ShowAppointmentThemeFeatureRequest) (*ShowAppointmentThemeFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppointmentThemeFeature not implemented")
}
func (*UnimplementedAppointmentServerServer) CreateAppointmentTheme(context.Context, *CreateAppointmentThemeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointmentTheme not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentTheme(context.Context, *UpdateAppointmentThemeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentTheme not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentThemeStatus(context.Context, *UpdateAppointmentThemeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentThemeStatus not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentThemes(context.Context, *GetAppointmentThemesRequest) (*GetAppointmentThemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentThemes not implemented")
}
func (*UnimplementedAppointmentServerServer) ShowAppointmentTheme(context.Context, *ShowAppointmentThemeRequest) (*ShowAppointmentThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppointmentTheme not implemented")
}
func (*UnimplementedAppointmentServerServer) GetAppointmentThemesByRoomType(context.Context, *GetAppointmentThemesByRoomTypeRequest) (*GetAppointmentThemesByRoomTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentThemesByRoomType not implemented")
}
func (*UnimplementedAppointmentServerServer) JoinSharedAppointment(context.Context, *JoinSharedAppointmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSharedAppointment not implemented")
}
func (*UnimplementedAppointmentServerServer) UpdateAppointmentShare(context.Context, *UpdateAppointmentShareRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentShare not implemented")
}
func (*UnimplementedAppointmentServerServer) AppointmentOpenRoom(context.Context, *AppointmentOpenRoomRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppointmentOpenRoom not implemented")
}
func (*UnimplementedAppointmentServerServer) AppointmentCancelOpenRoom(context.Context, *AppointmentCancelOpenRoomRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppointmentCancelOpenRoom not implemented")
}

func RegisterAppointmentServerServer(s *grpc.Server, srv AppointmentServerServer) {
	s.RegisterService(&_AppointmentServer_serviceDesc, srv)
}

func _AppointmentServer_UpdateAppointmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentConfig(ctx, req.(*AppointmentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateTemplateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateTemplateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateTemplateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateTemplateCalendar(ctx, req.(*UpdateTemplateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetTemplateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetTemplateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetTemplateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetTemplateCalendar(ctx, req.(*GetTemplateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_SaveAppointmentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAppointmentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).SaveAppointmentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/SaveAppointmentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).SaveAppointmentTemplate(ctx, req.(*SaveAppointmentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ShowAppointmentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAppointmentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ShowAppointmentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ShowAppointmentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ShowAppointmentTemplate(ctx, req.(*ShowAppointmentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentTemplateConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentTemplateConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentTemplateConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentTemplateConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentTemplateConfigs(ctx, req.(*GetAppointmentTemplateConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentTemplateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentTemplateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentTemplateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentTemplateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentTemplateStatus(ctx, req.(*UpdateAppointmentTemplateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/CreateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).CreateAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_SaveAppointmentLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAppointmentLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).SaveAppointmentLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/SaveAppointmentLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).SaveAppointmentLock(ctx, req.(*SaveAppointmentLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_DeleteAppointmentLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppointmentLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).DeleteAppointmentLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/DeleteAppointmentLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).DeleteAppointmentLock(ctx, req.(*DeleteAppointmentLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointments(ctx, req.(*GetAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ShowAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ShowAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ShowAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ShowAppointment(ctx, req.(*ShowAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointment(ctx, req.(*UpdateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentTemplates(ctx, req.(*GetAppointmentTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_DeleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).DeleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/DeleteAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).DeleteAppointment(ctx, req.(*DeleteAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/CancelAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).CancelAppointment(ctx, req.(*CancelAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_PayAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).PayAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/PayAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).PayAppointment(ctx, req.(*PayAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_RefundAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).RefundAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/RefundAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).RefundAppointment(ctx, req.(*RefundAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ArriveAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArriveAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ArriveAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ArriveAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ArriveAppointment(ctx, req.(*ArriveAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentRemaining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRemainingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentRemaining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentRemaining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentRemaining(ctx, req.(*GetAppointmentRemainingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentRemainingFast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRemainingFastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentRemainingFast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentRemainingFast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentRemainingFast(ctx, req.(*GetAppointmentRemainingFastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentLimit(ctx, req.(*GetAppointmentLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentRecord(ctx, req.(*GetAppointmentRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentBreachLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentBreachLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentBreachLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentBreachLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentBreachLimit(ctx, req.(*GetAppointmentBreachLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_SaveAppointmentTempNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAppointmentTempNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).SaveAppointmentTempNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/SaveAppointmentTempNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).SaveAppointmentTempNumber(ctx, req.(*SaveAppointmentTempNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentTradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentTradeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentTradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentTradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentTradeInfo(ctx, req.(*UpdateAppointmentTradeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetCallers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetCallers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetCallers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetCallers(ctx, req.(*GetCallersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetCallerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetCallerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetCallerRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetCallerRecords(ctx, req.(*GetCallerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCallerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateCaller(ctx, req.(*UpdateCallerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_CreateCallerRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCallerRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).CreateCallerRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/CreateCallerRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).CreateCallerRecord(ctx, req.(*CreateCallerRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateCallerBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCallerBlackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateCallerBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateCallerBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateCallerBlack(ctx, req.(*UpdateCallerBlackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateCallerRecordAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCallerRecordActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateCallerRecordAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateCallerRecordAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateCallerRecordAction(ctx, req.(*UpdateCallerRecordActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ShowCallerByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCallerByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ShowCallerByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ShowCallerByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ShowCallerByPhone(ctx, req.(*ShowCallerByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_CreateAppointmentThemeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentThemeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).CreateAppointmentThemeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/CreateAppointmentThemeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).CreateAppointmentThemeCategory(ctx, req.(*CreateAppointmentThemeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentThemeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentThemeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentThemeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeCategory(ctx, req.(*UpdateAppointmentThemeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentThemeCategoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentThemeCategoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeCategoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentThemeCategoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeCategoryStatus(ctx, req.(*UpdateAppointmentThemeCategoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentThemeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentThemeCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentThemeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentThemeCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentThemeCategories(ctx, req.(*GetAppointmentThemeCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ShowAppointmentThemeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAppointmentThemeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ShowAppointmentThemeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ShowAppointmentThemeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ShowAppointmentThemeCategory(ctx, req.(*ShowAppointmentThemeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_CreateAppointmentThemeFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentThemeFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).CreateAppointmentThemeFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/CreateAppointmentThemeFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).CreateAppointmentThemeFeature(ctx, req.(*CreateAppointmentThemeFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentThemeFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentThemeFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentThemeFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeFeature(ctx, req.(*UpdateAppointmentThemeFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentThemeFeatureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentThemeFeatureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeFeatureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentThemeFeatureStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeFeatureStatus(ctx, req.(*UpdateAppointmentThemeFeatureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentThemeFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentThemeFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentThemeFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentThemeFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentThemeFeatures(ctx, req.(*GetAppointmentThemeFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ShowAppointmentThemeFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAppointmentThemeFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ShowAppointmentThemeFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ShowAppointmentThemeFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ShowAppointmentThemeFeature(ctx, req.(*ShowAppointmentThemeFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_CreateAppointmentTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).CreateAppointmentTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/CreateAppointmentTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).CreateAppointmentTheme(ctx, req.(*CreateAppointmentThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentTheme(ctx, req.(*UpdateAppointmentThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentThemeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentThemeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentThemeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentThemeStatus(ctx, req.(*UpdateAppointmentThemeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentThemes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentThemes(ctx, req.(*GetAppointmentThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_ShowAppointmentTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAppointmentThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).ShowAppointmentTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/ShowAppointmentTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).ShowAppointmentTheme(ctx, req.(*ShowAppointmentThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_GetAppointmentThemesByRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentThemesByRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).GetAppointmentThemesByRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/GetAppointmentThemesByRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).GetAppointmentThemesByRoomType(ctx, req.(*GetAppointmentThemesByRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_JoinSharedAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinSharedAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).JoinSharedAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/JoinSharedAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).JoinSharedAppointment(ctx, req.(*JoinSharedAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_UpdateAppointmentShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).UpdateAppointmentShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/UpdateAppointmentShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).UpdateAppointmentShare(ctx, req.(*UpdateAppointmentShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_AppointmentOpenRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentOpenRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).AppointmentOpenRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/AppointmentOpenRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).AppointmentOpenRoom(ctx, req.(*AppointmentOpenRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentServer_AppointmentCancelOpenRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentCancelOpenRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServerServer).AppointmentCancelOpenRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentServer/AppointmentCancelOpenRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServerServer).AppointmentCancelOpenRoom(ctx, req.(*AppointmentCancelOpenRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppointmentServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appointment.AppointmentServer",
	HandlerType: (*AppointmentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAppointmentConfig",
			Handler:    _AppointmentServer_UpdateAppointmentConfig_Handler,
		},
		{
			MethodName: "GetAppointmentConfig",
			Handler:    _AppointmentServer_GetAppointmentConfig_Handler,
		},
		{
			MethodName: "UpdateTemplateCalendar",
			Handler:    _AppointmentServer_UpdateTemplateCalendar_Handler,
		},
		{
			MethodName: "GetTemplateCalendar",
			Handler:    _AppointmentServer_GetTemplateCalendar_Handler,
		},
		{
			MethodName: "SaveAppointmentTemplate",
			Handler:    _AppointmentServer_SaveAppointmentTemplate_Handler,
		},
		{
			MethodName: "ShowAppointmentTemplate",
			Handler:    _AppointmentServer_ShowAppointmentTemplate_Handler,
		},
		{
			MethodName: "GetAppointmentTemplateConfigs",
			Handler:    _AppointmentServer_GetAppointmentTemplateConfigs_Handler,
		},
		{
			MethodName: "UpdateAppointmentTemplateStatus",
			Handler:    _AppointmentServer_UpdateAppointmentTemplateStatus_Handler,
		},
		{
			MethodName: "CreateAppointment",
			Handler:    _AppointmentServer_CreateAppointment_Handler,
		},
		{
			MethodName: "SaveAppointmentLock",
			Handler:    _AppointmentServer_SaveAppointmentLock_Handler,
		},
		{
			MethodName: "DeleteAppointmentLock",
			Handler:    _AppointmentServer_DeleteAppointmentLock_Handler,
		},
		{
			MethodName: "GetAppointments",
			Handler:    _AppointmentServer_GetAppointments_Handler,
		},
		{
			MethodName: "ShowAppointment",
			Handler:    _AppointmentServer_ShowAppointment_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _AppointmentServer_UpdateAppointment_Handler,
		},
		{
			MethodName: "GetAppointmentTemplates",
			Handler:    _AppointmentServer_GetAppointmentTemplates_Handler,
		},
		{
			MethodName: "DeleteAppointment",
			Handler:    _AppointmentServer_DeleteAppointment_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _AppointmentServer_CancelAppointment_Handler,
		},
		{
			MethodName: "PayAppointment",
			Handler:    _AppointmentServer_PayAppointment_Handler,
		},
		{
			MethodName: "RefundAppointment",
			Handler:    _AppointmentServer_RefundAppointment_Handler,
		},
		{
			MethodName: "ArriveAppointment",
			Handler:    _AppointmentServer_ArriveAppointment_Handler,
		},
		{
			MethodName: "GetAppointmentRemaining",
			Handler:    _AppointmentServer_GetAppointmentRemaining_Handler,
		},
		{
			MethodName: "GetAppointmentRemainingFast",
			Handler:    _AppointmentServer_GetAppointmentRemainingFast_Handler,
		},
		{
			MethodName: "GetAppointmentLimit",
			Handler:    _AppointmentServer_GetAppointmentLimit_Handler,
		},
		{
			MethodName: "GetAppointmentRecord",
			Handler:    _AppointmentServer_GetAppointmentRecord_Handler,
		},
		{
			MethodName: "GetAppointmentBreachLimit",
			Handler:    _AppointmentServer_GetAppointmentBreachLimit_Handler,
		},
		{
			MethodName: "SaveAppointmentTempNumber",
			Handler:    _AppointmentServer_SaveAppointmentTempNumber_Handler,
		},
		{
			MethodName: "UpdateAppointmentTradeInfo",
			Handler:    _AppointmentServer_UpdateAppointmentTradeInfo_Handler,
		},
		{
			MethodName: "GetCallers",
			Handler:    _AppointmentServer_GetCallers_Handler,
		},
		{
			MethodName: "GetCallerRecords",
			Handler:    _AppointmentServer_GetCallerRecords_Handler,
		},
		{
			MethodName: "UpdateCaller",
			Handler:    _AppointmentServer_UpdateCaller_Handler,
		},
		{
			MethodName: "CreateCallerRecord",
			Handler:    _AppointmentServer_CreateCallerRecord_Handler,
		},
		{
			MethodName: "UpdateCallerBlack",
			Handler:    _AppointmentServer_UpdateCallerBlack_Handler,
		},
		{
			MethodName: "UpdateCallerRecordAction",
			Handler:    _AppointmentServer_UpdateCallerRecordAction_Handler,
		},
		{
			MethodName: "ShowCallerByPhone",
			Handler:    _AppointmentServer_ShowCallerByPhone_Handler,
		},
		{
			MethodName: "CreateAppointmentThemeCategory",
			Handler:    _AppointmentServer_CreateAppointmentThemeCategory_Handler,
		},
		{
			MethodName: "UpdateAppointmentThemeCategory",
			Handler:    _AppointmentServer_UpdateAppointmentThemeCategory_Handler,
		},
		{
			MethodName: "UpdateAppointmentThemeCategoryStatus",
			Handler:    _AppointmentServer_UpdateAppointmentThemeCategoryStatus_Handler,
		},
		{
			MethodName: "GetAppointmentThemeCategories",
			Handler:    _AppointmentServer_GetAppointmentThemeCategories_Handler,
		},
		{
			MethodName: "ShowAppointmentThemeCategory",
			Handler:    _AppointmentServer_ShowAppointmentThemeCategory_Handler,
		},
		{
			MethodName: "CreateAppointmentThemeFeature",
			Handler:    _AppointmentServer_CreateAppointmentThemeFeature_Handler,
		},
		{
			MethodName: "UpdateAppointmentThemeFeature",
			Handler:    _AppointmentServer_UpdateAppointmentThemeFeature_Handler,
		},
		{
			MethodName: "UpdateAppointmentThemeFeatureStatus",
			Handler:    _AppointmentServer_UpdateAppointmentThemeFeatureStatus_Handler,
		},
		{
			MethodName: "GetAppointmentThemeFeatures",
			Handler:    _AppointmentServer_GetAppointmentThemeFeatures_Handler,
		},
		{
			MethodName: "ShowAppointmentThemeFeature",
			Handler:    _AppointmentServer_ShowAppointmentThemeFeature_Handler,
		},
		{
			MethodName: "CreateAppointmentTheme",
			Handler:    _AppointmentServer_CreateAppointmentTheme_Handler,
		},
		{
			MethodName: "UpdateAppointmentTheme",
			Handler:    _AppointmentServer_UpdateAppointmentTheme_Handler,
		},
		{
			MethodName: "UpdateAppointmentThemeStatus",
			Handler:    _AppointmentServer_UpdateAppointmentThemeStatus_Handler,
		},
		{
			MethodName: "GetAppointmentThemes",
			Handler:    _AppointmentServer_GetAppointmentThemes_Handler,
		},
		{
			MethodName: "ShowAppointmentTheme",
			Handler:    _AppointmentServer_ShowAppointmentTheme_Handler,
		},
		{
			MethodName: "GetAppointmentThemesByRoomType",
			Handler:    _AppointmentServer_GetAppointmentThemesByRoomType_Handler,
		},
		{
			MethodName: "JoinSharedAppointment",
			Handler:    _AppointmentServer_JoinSharedAppointment_Handler,
		},
		{
			MethodName: "UpdateAppointmentShare",
			Handler:    _AppointmentServer_UpdateAppointmentShare_Handler,
		},
		{
			MethodName: "AppointmentOpenRoom",
			Handler:    _AppointmentServer_AppointmentOpenRoom_Handler,
		},
		{
			MethodName: "AppointmentCancelOpenRoom",
			Handler:    _AppointmentServer_AppointmentCancelOpenRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/appointment/appointment.proto",
}
