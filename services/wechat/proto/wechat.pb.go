// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: proto/wechat/wechat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_wechat_wechat_proto protoreflect.FileDescriptor

var file_proto_wechat_wechat_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe4, 0x03, 0x0a,
	0x0d, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x53,
	0x64, 0x6b, 0x12, 0x1c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4a, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x16, 0x4f, 0x6d, 0x79, 0x5c, 0x43, 0x72, 0x69, 0x75, 0x73,
	0x5c, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_wechat_wechat_proto_goTypes = []interface{}{
	(*OfficialAuthURLRequest)(nil),        // 0: wechat.OfficialAuthURLRequest
	(*OfficialCodeGetUserRequest)(nil),    // 1: wechat.OfficialCodeGetUserRequest
	(*OfficialOpenidGetUserRequest)(nil),  // 2: wechat.OfficialOpenidGetUserRequest
	(*OfficialJsSdkRequest)(nil),          // 3: wechat.OfficialJsSdkRequest
	(*SendTemplateMessageRequest)(nil),    // 4: wechat.SendTemplateMessageRequest
	(*OfficialAuthURLResponse)(nil),       // 5: wechat.OfficialAuthURLResponse
	(*OfficialCodeGetUserResponse)(nil),   // 6: wechat.OfficialCodeGetUserResponse
	(*OfficialOpenidGetUserResponse)(nil), // 7: wechat.OfficialOpenidGetUserResponse
	(*OfficialJsSdkResponse)(nil),         // 8: wechat.OfficialJsSdkResponse
	(*SendTemplateMessageResponse)(nil),   // 9: wechat.SendTemplateMessageResponse
}
var file_proto_wechat_wechat_proto_depIdxs = []int32{
	0, // 0: wechat.WechatService.OfficialGetAuthURL:input_type -> wechat.OfficialAuthURLRequest
	1, // 1: wechat.WechatService.OfficialCodeGetUser:input_type -> wechat.OfficialCodeGetUserRequest
	2, // 2: wechat.WechatService.OfficialOpenidGetUser:input_type -> wechat.OfficialOpenidGetUserRequest
	3, // 3: wechat.WechatService.OfficialJsSdk:input_type -> wechat.OfficialJsSdkRequest
	4, // 4: wechat.WechatService.SendTemplateMessage:input_type -> wechat.SendTemplateMessageRequest
	5, // 5: wechat.WechatService.OfficialGetAuthURL:output_type -> wechat.OfficialAuthURLResponse
	6, // 6: wechat.WechatService.OfficialCodeGetUser:output_type -> wechat.OfficialCodeGetUserResponse
	7, // 7: wechat.WechatService.OfficialOpenidGetUser:output_type -> wechat.OfficialOpenidGetUserResponse
	8, // 8: wechat.WechatService.OfficialJsSdk:output_type -> wechat.OfficialJsSdkResponse
	9, // 9: wechat.WechatService.SendTemplateMessage:output_type -> wechat.SendTemplateMessageResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_wechat_wechat_proto_init() }
func file_proto_wechat_wechat_proto_init() {
	if File_proto_wechat_wechat_proto != nil {
		return
	}
	file_proto_wechat_official_proto_init()
	file_proto_wechat_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_wechat_wechat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_wechat_wechat_proto_goTypes,
		DependencyIndexes: file_proto_wechat_wechat_proto_depIdxs,
	}.Build()
	File_proto_wechat_wechat_proto = out.File
	file_proto_wechat_wechat_proto_rawDesc = nil
	file_proto_wechat_wechat_proto_goTypes = nil
	file_proto_wechat_wechat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WechatServiceClient is the client API for WechatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WechatServiceClient interface {
	// 公众号 获取网页授权URL
	OfficialGetAuthURL(ctx context.Context, in *OfficialAuthURLRequest, opts ...grpc.CallOption) (*OfficialAuthURLResponse, error)
	// 公众号 code 换取 user 信息
	OfficialCodeGetUser(ctx context.Context, in *OfficialCodeGetUserRequest, opts ...grpc.CallOption) (*OfficialCodeGetUserResponse, error)
	// 公众号 openid获取详细 user信息
	OfficialOpenidGetUser(ctx context.Context, in *OfficialOpenidGetUserRequest, opts ...grpc.CallOption) (*OfficialOpenidGetUserResponse, error)
	// 公众号 JSSDK
	OfficialJsSdk(ctx context.Context, in *OfficialJsSdkRequest, opts ...grpc.CallOption) (*OfficialJsSdkResponse, error)
	// SendTemplateMessage 发送模版消息
	SendTemplateMessage(ctx context.Context, in *SendTemplateMessageRequest, opts ...grpc.CallOption) (*SendTemplateMessageResponse, error)
}

type wechatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatServiceClient(cc grpc.ClientConnInterface) WechatServiceClient {
	return &wechatServiceClient{cc}
}

func (c *wechatServiceClient) OfficialGetAuthURL(ctx context.Context, in *OfficialAuthURLRequest, opts ...grpc.CallOption) (*OfficialAuthURLResponse, error) {
	out := new(OfficialAuthURLResponse)
	err := c.cc.Invoke(ctx, "/wechat.WechatService/OfficialGetAuthURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatServiceClient) OfficialCodeGetUser(ctx context.Context, in *OfficialCodeGetUserRequest, opts ...grpc.CallOption) (*OfficialCodeGetUserResponse, error) {
	out := new(OfficialCodeGetUserResponse)
	err := c.cc.Invoke(ctx, "/wechat.WechatService/OfficialCodeGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatServiceClient) OfficialOpenidGetUser(ctx context.Context, in *OfficialOpenidGetUserRequest, opts ...grpc.CallOption) (*OfficialOpenidGetUserResponse, error) {
	out := new(OfficialOpenidGetUserResponse)
	err := c.cc.Invoke(ctx, "/wechat.WechatService/OfficialOpenidGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatServiceClient) OfficialJsSdk(ctx context.Context, in *OfficialJsSdkRequest, opts ...grpc.CallOption) (*OfficialJsSdkResponse, error) {
	out := new(OfficialJsSdkResponse)
	err := c.cc.Invoke(ctx, "/wechat.WechatService/OfficialJsSdk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatServiceClient) SendTemplateMessage(ctx context.Context, in *SendTemplateMessageRequest, opts ...grpc.CallOption) (*SendTemplateMessageResponse, error) {
	out := new(SendTemplateMessageResponse)
	err := c.cc.Invoke(ctx, "/wechat.WechatService/SendTemplateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatServiceServer is the server API for WechatService service.
type WechatServiceServer interface {
	// 公众号 获取网页授权URL
	OfficialGetAuthURL(context.Context, *OfficialAuthURLRequest) (*OfficialAuthURLResponse, error)
	// 公众号 code 换取 user 信息
	OfficialCodeGetUser(context.Context, *OfficialCodeGetUserRequest) (*OfficialCodeGetUserResponse, error)
	// 公众号 openid获取详细 user信息
	OfficialOpenidGetUser(context.Context, *OfficialOpenidGetUserRequest) (*OfficialOpenidGetUserResponse, error)
	// 公众号 JSSDK
	OfficialJsSdk(context.Context, *OfficialJsSdkRequest) (*OfficialJsSdkResponse, error)
	// SendTemplateMessage 发送模版消息
	SendTemplateMessage(context.Context, *SendTemplateMessageRequest) (*SendTemplateMessageResponse, error)
}

// UnimplementedWechatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWechatServiceServer struct {
}

func (*UnimplementedWechatServiceServer) OfficialGetAuthURL(context.Context, *OfficialAuthURLRequest) (*OfficialAuthURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialGetAuthURL not implemented")
}
func (*UnimplementedWechatServiceServer) OfficialCodeGetUser(context.Context, *OfficialCodeGetUserRequest) (*OfficialCodeGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialCodeGetUser not implemented")
}
func (*UnimplementedWechatServiceServer) OfficialOpenidGetUser(context.Context, *OfficialOpenidGetUserRequest) (*OfficialOpenidGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialOpenidGetUser not implemented")
}
func (*UnimplementedWechatServiceServer) OfficialJsSdk(context.Context, *OfficialJsSdkRequest) (*OfficialJsSdkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialJsSdk not implemented")
}
func (*UnimplementedWechatServiceServer) SendTemplateMessage(context.Context, *SendTemplateMessageRequest) (*SendTemplateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTemplateMessage not implemented")
}

func RegisterWechatServiceServer(s *grpc.Server, srv WechatServiceServer) {
	s.RegisterService(&_WechatService_serviceDesc, srv)
}

func _WechatService_OfficialGetAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialAuthURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServiceServer).OfficialGetAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechat.WechatService/OfficialGetAuthURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServiceServer).OfficialGetAuthURL(ctx, req.(*OfficialAuthURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatService_OfficialCodeGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialCodeGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServiceServer).OfficialCodeGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechat.WechatService/OfficialCodeGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServiceServer).OfficialCodeGetUser(ctx, req.(*OfficialCodeGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatService_OfficialOpenidGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialOpenidGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServiceServer).OfficialOpenidGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechat.WechatService/OfficialOpenidGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServiceServer).OfficialOpenidGetUser(ctx, req.(*OfficialOpenidGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatService_OfficialJsSdk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialJsSdkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServiceServer).OfficialJsSdk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechat.WechatService/OfficialJsSdk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServiceServer).OfficialJsSdk(ctx, req.(*OfficialJsSdkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatService_SendTemplateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTemplateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServiceServer).SendTemplateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechat.WechatService/SendTemplateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServiceServer).SendTemplateMessage(ctx, req.(*SendTemplateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WechatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wechat.WechatService",
	HandlerType: (*WechatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OfficialGetAuthURL",
			Handler:    _WechatService_OfficialGetAuthURL_Handler,
		},
		{
			MethodName: "OfficialCodeGetUser",
			Handler:    _WechatService_OfficialCodeGetUser_Handler,
		},
		{
			MethodName: "OfficialOpenidGetUser",
			Handler:    _WechatService_OfficialOpenidGetUser_Handler,
		},
		{
			MethodName: "OfficialJsSdk",
			Handler:    _WechatService_OfficialJsSdk_Handler,
		},
		{
			MethodName: "SendTemplateMessage",
			Handler:    _WechatService_SendTemplateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wechat/wechat.proto",
}
