// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: crius.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DiscoverServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DiscoverServersRequest) Reset() {
	*x = DiscoverServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crius_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverServersRequest) ProtoMessage() {}

func (x *DiscoverServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crius_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverServersRequest.ProtoReflect.Descriptor instead.
func (*DiscoverServersRequest) Descriptor() ([]byte, []int) {
	return file_crius_proto_rawDescGZIP(), []int{0}
}

func (x *DiscoverServersRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DiscoverServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *DiscoverServersResponse) Reset() {
	*x = DiscoverServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crius_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverServersResponse) ProtoMessage() {}

func (x *DiscoverServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crius_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverServersResponse.ProtoReflect.Descriptor instead.
func (*DiscoverServersResponse) Descriptor() ([]byte, []int) {
	return file_crius_proto_rawDescGZIP(), []int{1}
}

func (x *DiscoverServersResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type DiscoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DiscoverRequest) Reset() {
	*x = DiscoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crius_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverRequest) ProtoMessage() {}

func (x *DiscoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crius_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverRequest.ProtoReflect.Descriptor instead.
func (*DiscoverRequest) Descriptor() ([]byte, []int) {
	return file_crius_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crius_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_crius_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_crius_proto_rawDescGZIP(), []int{3}
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Ip     string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port   int64  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Weight int32  `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crius_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_crius_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_crius_proto_rawDescGZIP(), []int{4}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Service) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Service) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_crius_proto protoreflect.FileDescriptor

var file_crius_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6d, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0xc1, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x69, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x15,
	0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x09, 0x4f, 0x6d, 0x79, 0x5c,
	0x43, 0x72, 0x69, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crius_proto_rawDescOnce sync.Once
	file_crius_proto_rawDescData = file_crius_proto_rawDesc
)

func file_crius_proto_rawDescGZIP() []byte {
	file_crius_proto_rawDescOnce.Do(func() {
		file_crius_proto_rawDescData = protoimpl.X.CompressGZIP(file_crius_proto_rawDescData)
	})
	return file_crius_proto_rawDescData
}

var file_crius_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_crius_proto_goTypes = []interface{}{
	(*DiscoverServersRequest)(nil),  // 0: proto.DiscoverServersRequest
	(*DiscoverServersResponse)(nil), // 1: proto.DiscoverServersResponse
	(*DiscoverRequest)(nil),         // 2: proto.DiscoverRequest
	(*Empty)(nil),                   // 3: proto.Empty
	(*Service)(nil),                 // 4: proto.Service
}
var file_crius_proto_depIdxs = []int32{
	4, // 0: proto.DiscoverServersResponse.services:type_name -> proto.Service
	4, // 1: proto.CriusService.Heart:input_type -> proto.Service
	2, // 2: proto.CriusService.Discover:input_type -> proto.DiscoverRequest
	0, // 3: proto.CriusService.DiscoverServers:input_type -> proto.DiscoverServersRequest
	3, // 4: proto.CriusService.Heart:output_type -> proto.Empty
	4, // 5: proto.CriusService.Discover:output_type -> proto.Service
	1, // 6: proto.CriusService.DiscoverServers:output_type -> proto.DiscoverServersResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_crius_proto_init() }
func file_crius_proto_init() {
	if File_crius_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crius_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crius_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crius_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crius_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crius_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crius_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crius_proto_goTypes,
		DependencyIndexes: file_crius_proto_depIdxs,
		MessageInfos:      file_crius_proto_msgTypes,
	}.Build()
	File_crius_proto = out.File
	file_crius_proto_rawDesc = nil
	file_crius_proto_goTypes = nil
	file_crius_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CriusServiceClient is the client API for CriusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CriusServiceClient interface {
	Heart(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Empty, error)
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*Service, error)
	DiscoverServers(ctx context.Context, in *DiscoverServersRequest, opts ...grpc.CallOption) (*DiscoverServersResponse, error)
}

type criusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCriusServiceClient(cc grpc.ClientConnInterface) CriusServiceClient {
	return &criusServiceClient{cc}
}

func (c *criusServiceClient) Heart(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.CriusService/Heart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criusServiceClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/proto.CriusService/Discover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criusServiceClient) DiscoverServers(ctx context.Context, in *DiscoverServersRequest, opts ...grpc.CallOption) (*DiscoverServersResponse, error) {
	out := new(DiscoverServersResponse)
	err := c.cc.Invoke(ctx, "/proto.CriusService/DiscoverServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriusServiceServer is the server API for CriusService service.
type CriusServiceServer interface {
	Heart(context.Context, *Service) (*Empty, error)
	Discover(context.Context, *DiscoverRequest) (*Service, error)
	DiscoverServers(context.Context, *DiscoverServersRequest) (*DiscoverServersResponse, error)
}

// UnimplementedCriusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCriusServiceServer struct {
}

func (*UnimplementedCriusServiceServer) Heart(context.Context, *Service) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heart not implemented")
}
func (*UnimplementedCriusServiceServer) Discover(context.Context, *DiscoverRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (*UnimplementedCriusServiceServer) DiscoverServers(context.Context, *DiscoverServersRequest) (*DiscoverServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverServers not implemented")
}

func RegisterCriusServiceServer(s *grpc.Server, srv CriusServiceServer) {
	s.RegisterService(&_CriusService_serviceDesc, srv)
}

func _CriusService_Heart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriusServiceServer).Heart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CriusService/Heart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriusServiceServer).Heart(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriusService_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriusServiceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CriusService/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriusServiceServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriusService_DiscoverServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriusServiceServer).DiscoverServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CriusService/DiscoverServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriusServiceServer).DiscoverServers(ctx, req.(*DiscoverServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CriusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CriusService",
	HandlerType: (*CriusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heart",
			Handler:    _CriusService_Heart_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _CriusService_Discover_Handler,
		},
		{
			MethodName: "DiscoverServers",
			Handler:    _CriusService_DiscoverServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crius.proto",
}
